{ "metadata": { "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.6", "generated_at": "2023-10-13T15:55:54.326487Z", "invocation_id": "6df77eec-80ef-4982-8673-1c3edefe8202", "env": { "DBT_CLOUD_PROJECT_ID": "270542", "DBT_CLOUD_RUN_ID": "204529470", "DBT_CLOUD_JOB_ID": "384691", "DBT_CLOUD_RUN_REASON": "Merging code to main", "DBT_CLOUD_RUN_REASON_CATEGORY": "other", "DBT_CLOUD_RUN_TRIGGER_CATEGORY": "RUN_REASON_CATEGORY_API" }, "project_name": "tpch", "project_id": "8330e1b1d54365ea716dbeca47bf2cf6", "user_id": "699deafc-24e7-4cdb-8ab8-8b5ed58d1bff", "send_anonymous_usage_stats": true, "adapter_type": "snowflake" }, "nodes": { "model.tpch.stg_stocks__history": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_stocks__history", "resource_type": "model", "package_name": "tpch", "path": "staging/stocks/stg_stocks__history.sql", "original_file_path": "models/staging/stocks/stg_stocks__history.sql", "unique_id": "model.tpch.stg_stocks__history", "fqn": [ "tpch", "staging", "stocks", "stg_stocks__history" ], "alias": "stg_stocks__history", "checksum": { "name": "sha256", "checksum": "bc512e88bacc01dbd10193345833f9ed45d460da83fead2a1c9af72567dd7845" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212556.3468635, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_stocks__history", "raw_code": "with \n\nsource as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('stocks', 'history') }}\n\n),\n\nrenamed as (\n\n select\n symbol,\n date,\n close,\n volume,\n open,\n high,\n low,\n adjclose as adjusted_closed,\n dividends,\n splits\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "stocks", "history" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.stocks.history" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_stocks__summary_profile": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_stocks__summary_profile", "resource_type": "model", "package_name": "tpch", "path": "staging/stocks/stg_stocks__summary_profile.sql", "original_file_path": "models/staging/stocks/stg_stocks__summary_profile.sql", "unique_id": "model.tpch.stg_stocks__summary_profile", "fqn": [ "tpch", "staging", "stocks", "stg_stocks__summary_profile" ], "alias": "stg_stocks__summary_profile", "checksum": { "name": "sha256", "checksum": "b59d2bf9cdf1c2b10f61479dda7e2b1d77e8556227de3a74700b9ce1dbe97543" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212556.3618782, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_stocks__summary_profile", "raw_code": "with \n\nsource as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('stocks', 'summary_profile') }}\n\n),\n\nrenamed as (\n\n select\n address1 as address_1,\n city,\n state,\n zip as zip_code,\n country,\n phone,\n website,\n industry,\n sector,\n long_business_summary,\n full_time_employees,\n symbol,\n address2 as address_2\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "stocks", "summary_profile" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.stocks.summary_profile" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_nations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_nations", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_nations.sql", "original_file_path": "models/staging/tpch/stg_tpch_nations.sql", "unique_id": "model.tpch.stg_tpch_nations", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_nations" ], "alias": "stg_tpch_nations", "checksum": { "name": "sha256", "checksum": "b864eb71cb7121aaa9324c726e4b731790d1051663f5d0800cc333984f469a07" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for nations data", "columns": { "nation_key": { "name": "nation_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "region_key": { "name": "region_key", "description": "foreign key to stg_tpch_regions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_regions", "sql_on": "${stg_tpch_nations.region_key} = ${stg_tpch_regions.region_key}" } ] } }, "created_at": 1697212557.2524517, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_nations", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n select\n \n n_nationkey as nation_key,\n n_name as name,\n n_regionkey as region_key,\n n_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_orders": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_orders", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_orders.sql", "original_file_path": "models/staging/tpch/stg_tpch_orders.sql", "unique_id": "model.tpch.stg_tpch_orders", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_orders" ], "alias": "stg_tpch_orders", "checksum": { "name": "sha256", "checksum": "a4b80b2fffac97b0a2f3c6abb74fc39f7995ddc6ae72ec8487d6e1e7d19b2df1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for orders data", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key to stg_tpch_customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_price": { "name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212557.2554138, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_orders", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'orders') }}\n\n),\n\nrenamed as (\n\n select\n \n o_orderkey as order_key,\n o_custkey as customer_key,\n o_orderstatus as status_code,\n o_totalprice as total_price,\n o_orderdate as order_date,\n o_orderpriority as priority_code,\n o_clerk as clerk_name,\n o_shippriority as ship_priority,\n o_comment as comment\n\n\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_regions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_regions", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_regions.sql", "original_file_path": "models/staging/tpch/stg_tpch_regions.sql", "unique_id": "model.tpch.stg_tpch_regions", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_regions" ], "alias": "stg_tpch_regions", "checksum": { "name": "sha256", "checksum": "5c45bba024d6d0699e21c20e64896613725601f2f269a33888c66cf659937ca1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for regions data", "columns": { "region_key": { "name": "region_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212557.2635381, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_regions", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n select\n r_regionkey as region_key,\n r_name as name,\n r_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_customers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_customers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_customers.sql", "original_file_path": "models/staging/tpch/stg_tpch_customers.sql", "unique_id": "model.tpch.stg_tpch_customers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_customers" ], "alias": "stg_tpch_customers", "checksum": { "name": "sha256", "checksum": "a355a27ce9605284d74274c5186212122c6922f461a7eb56cea452f39c9294b5" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for customers data", "columns": { "customer_key": { "name": "customer_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1697212557.2414472, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_customers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'customer') }}\n\n),\n\ncleanup as (\n\n select\n \n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from cleanup", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql", "unique_id": "model.tpch.stg_tpch_suppliers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_suppliers" ], "alias": "stg_tpch_suppliers", "checksum": { "name": "sha256", "checksum": "39e217e9757437fcc72c0938f2729a5f5fec76f79d911f216377459f8890a766" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for suppliers data", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_suppliers.nation_key} = ${stg_tpch_nations.nation_key}" } ] } }, "created_at": 1697212557.26717, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n select\n \n s_suppkey as supplier_key,\n s_name as supplier_name,\n s_address as supplier_address,\n s_nationkey as nation_key,\n s_phone as phone_number,\n s_acctbal as account_balance,\n s_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_parts": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_parts", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_parts.sql", "original_file_path": "models/staging/tpch/stg_tpch_parts.sql", "unique_id": "model.tpch.stg_tpch_parts", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_parts" ], "alias": "stg_tpch_parts", "checksum": { "name": "sha256", "checksum": "3afc02dcebd3cb5b7f7ac728016e76e1f0e47e4cea714bbf2b9d70f852ed64df" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for parts data", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212557.263071, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_parts", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n select\n \n p_partkey as part_key,\n p_name as name,\n p_mfgr as manufacturer,\n p_brand as brand,\n p_type as type,\n p_size as size,\n p_container as container,\n p_retailprice as retail_price,\n p_comment as comment,\n 'hello world' as col\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_line_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_line_items", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_line_items.sql", "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql", "unique_id": "model.tpch.stg_tpch_line_items", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_line_items" ], "alias": "stg_tpch_line_items", "checksum": { "name": "sha256", "checksum": "f6b2ba6705c49b2e2263b3fc9fcb43454a7b9df0073790517b917396f7ca71cb" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for line items data", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key to stg_tpch_orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_instructions": { "name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true }, "created_at": 1697212557.2488933, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_line_items", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.generate_surrogate_key(\n ['l_orderkey', \n 'l_linenumber']) }}\n as order_item_key,\n l_orderkey as order_key,\n l_partkey as part_key,\n l_suppkey as supplier_key,\n l_linenumber as line_number,\n l_quantity as quantity,\n l_extendedprice as extended_price,\n l_discount as discount_percentage,\n l_tax as tax_rate,\n l_returnflag as return_flag,\n l_linestatus as status_code,\n l_shipdate as ship_date,\n l_commitdate as commit_date,\n l_receiptdate as receipt_date,\n l_shipinstruct as ship_instructions,\n l_shipmode as ship_mode,\n l_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.generate_surrogate_key" ], "nodes": [ "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.stg_tpch_part_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_tpch_part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "staging/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql", "unique_id": "model.tpch.stg_tpch_part_suppliers", "fqn": [ "tpch", "staging", "tpch", "stg_tpch_part_suppliers" ], "alias": "stg_tpch_part_suppliers", "checksum": { "name": "sha256", "checksum": "8d6fd06f1a895d7dcff7fe7c806b575e6bacc1380863ae8f6455e1272ef75dd8" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "staging layer for suppliers data", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "surrogate key for the model -- combo of ps_partkey + ps_suppkey", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key to stg_tpch_parts", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key to stg_tpch_suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "comment": { "name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/staging/tpch/_tpch__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "view", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${stg_tpch_part_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1697212557.260092, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_tpch_part_suppliers", "raw_code": "with source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n select\n \n {{ dbt_utils.generate_surrogate_key(\n ['ps_partkey', \n 'ps_suppkey']) }} \n as part_supplier_key,\n ps_partkey as part_key,\n ps_suppkey as supplier_key,\n ps_availqty as available_quantity,\n ps_supplycost as cost,\n ps_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed", "language": "sql", "refs": [], "sources": [ [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.generate_surrogate_key" ], "nodes": [ "source.tpch.tpch.partsupp" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.metricflow_time_spine": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "metricflow_time_spine", "resource_type": "model", "package_name": "tpch", "path": "utils/metricflow_time_spine.sql", "original_file_path": "models/utils/metricflow_time_spine.sql", "unique_id": "model.tpch.metricflow_time_spine", "fqn": [ "tpch", "utils", "metricflow_time_spine" ], "alias": "metricflow_time_spine", "checksum": { "name": "sha256", "checksum": "47914e17fe314e27f22878b413a03b264ce1eaecf2cfa09ecf9a309155f25e0c" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212556.4115777, "relation_name": "DOUG_DEMO_V2.ANALYTICS.metricflow_time_spine", "raw_code": "{{\n config(\n materialized = 'table',\n )\n}}\n\nwith days as (\n\n {{\n dbt_utils.date_spine(\n 'day',\n \"to_date('01/01/2000','mm/dd/yyyy')\",\n \"to_date('01/01/2027','mm/dd/yyyy')\"\n )\n }}\n\n),\n\nfinal as (\n select cast(date_day as date) as date_day\n from days\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.date_spine" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.dim_date": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_date", "resource_type": "model", "package_name": "tpch", "path": "utils/dim_date.sql", "original_file_path": "models/utils/dim_date.sql", "unique_id": "model.tpch.dim_date", "fqn": [ "tpch", "utils", "dim_date" ], "alias": "dim_date", "checksum": { "name": "sha256", "checksum": "3625a74bc7a47c19207f28ae6af481109b18effe943e86f9db4ab55c74ad5e1e" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212556.443528, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_date", "raw_code": "with dates as (\n {{ dbt_utils.date_spine(\n datepart=\"day\",\n start_date=\"cast('2020-01-01' as date)\",\n end_date=\"cast('2024-01-01' as date)\"\n ) }}\n)\n\nselect\n date_day as date,\n date_trunc('week', date_day) as week,\n date_trunc('month', date_day) as month,\n date_trunc('quarter', date_day) as quarter,\n date_trunc('year', date_day) as year\nfrom dates", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.date_spine" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.all_days": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "all_days", "resource_type": "model", "package_name": "tpch", "path": "utils/all_days.sql", "original_file_path": "models/utils/all_days.sql", "unique_id": "model.tpch.all_days", "fqn": [ "tpch", "utils", "all_days" ], "alias": "all_days", "checksum": { "name": "sha256", "checksum": "07511c8cce5ac1b93c721a9691612940e28736da2cfc79705eb706a1b5ed8ccf" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This model is an example of how to create a date spine using dbt_utils. Rather than writing a bunch of code to create this, we're able to three lines of code.", "columns": { "date_day": { "name": "date_day", "description": "date generated by the macro", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/utils/utils.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.360003, "relation_name": "DOUG_DEMO_V2.ANALYTICS.all_days", "raw_code": "{{ dbt_utils.date_spine(\n datepart=\"day\",\n start_date=\"to_date('01/01/1992', 'mm/dd/yyyy')\",\n end_date=\"dateadd(year, 1, current_date)\"\n )\n}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.date_spine" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.use_variables": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "use_variables", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/use_variables.sql", "original_file_path": "models/demo_examples/use_variables.sql", "unique_id": "model.tpch.use_variables", "fqn": [ "tpch", "demo_examples", "use_variables" ], "alias": "use_variables", "checksum": { "name": "sha256", "checksum": "6645070a7fa501a6fa7ce26684617a5a70ed16d0e6c63c9f98d26d7861360e71" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "demo to show variables", "columns": { "order_item_key": { "name": "order_item_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.3754306, "relation_name": "DOUG_DEMO_V2.ANALYTICS.use_variables", "raw_code": "-- This is here to show that data older than start_date exists - run this first\n-- select min(order_date) from {{ ref('fct_order_items') }}\n\n-- start_date is defined in the dbt_project.yml \n-- to illustrate overriding variables from the command line, run dbt run -m use_variables --vars '{\"start_date\": \"1996-01-01\"}'\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('fct_order_items') }} where order_date >= '{{ var(\"start_date\") }}'", "language": "sql", "refs": [ { "name": "fct_order_items", "package": null, "version": null }, { "name": "fct_order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.materialization_incremental": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "materialization_incremental", "resource_type": "model", "package_name": "tpch", "path": "demo_examples/materialization_incremental.sql", "original_file_path": "models/demo_examples/materialization_incremental.sql", "unique_id": "model.tpch.materialization_incremental", "fqn": [ "tpch", "demo_examples", "materialization_incremental" ], "alias": "materialization_incremental", "checksum": { "name": "sha256", "checksum": "2921d9e7dcbf49d7fb31b020db2b9e3ce1fa88b418c833f40738c937d4f92cae" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "demo to show incremental model", "columns": { "customer_key": { "name": "customer_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/demo_examples/demo_examples.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "use_anonymous_sproc": true }, "created_at": 1697212557.3746681, "relation_name": "DOUG_DEMO_V2.ANALYTICS.materialization_incremental", "raw_code": "{{ config(materialized='incremental') }}\n\nwith source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'customer') }}\n\n),\n\n\nrenamed as (\n\n select\n c_custkey as customer_key,\n c_name as name,\n c_address as address, \n c_nationkey as nation_key,\n c_phone as phone_number,\n c_acctbal as account_balance,\n c_mktsegment as market_segment,\n c_comment as comment\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed\n\n{% if is_incremental() %}\n -- this filter will only be applied on an incremental run\n where customer_key not in (select customer_key from {{this}} )\n\n{% endif %}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.is_incremental" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.fct_order_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_order_items.sql", "original_file_path": "models/marts/core/fct_order_items.sql", "unique_id": "model.tpch.fct_order_items", "fqn": [ "tpch", "marts", "core", "fct_order_items" ], "alias": "fct_order_items", "checksum": { "name": "sha256", "checksum": "707189d860cd0eaed22a64f1b96d43fdf92148435a79bc0fd4d4c29009922664" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [ "finance" ], "description": "order items fact table", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": { "metrics": { "items_in_order": { "type": "count_distinct" } } }, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_cost": { "name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_item_count": { "name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": { "metrics": { "total_revenue": { "type": "sum", "show_underlying_values": [ "return_flag", "order_item_status_code", "supplier_key", "ship_mode" ] } } }, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/_core__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_order_items.customer_key} = ${dim_customers.customer_key}" }, { "join": "stg_tpch_suppliers", "sql_on": "${fct_order_items.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1697212557.4303179, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_order_items", "raw_code": "{{\n config(\n materialized = 'table',\n tags = ['finance']\n )\n}}\n\nwith order_item as (\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('order_items') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('part_suppliers') }}\n\n),\n\nfinal as (\n select \n order_item.order_item_key,\n order_item.order_key,\n order_item.order_date,\n order_item.customer_key,\n order_item.part_key,\n order_item.supplier_key,\n order_item.order_item_status_code,\n order_item.return_flag,\n order_item.line_number,\n order_item.ship_date,\n order_item.commit_date,\n order_item.receipt_date,\n order_item.ship_mode,\n part_supplier.cost as supplier_cost,\n {# ps.retail_price, #}\n order_item.base_price,\n order_item.discount_percentage,\n order_item.discounted_price,\n order_item.tax_rate,\n \n 1 as order_item_count,\n order_item.quantity,\n order_item.gross_item_sales_amount,\n order_item.discounted_item_sales_amount,\n order_item.item_discount_amount,\n order_item.item_tax_amount,\n order_item.net_item_sales_amount\n\n from\n order_item\n inner join part_supplier\n on order_item.part_key = part_supplier.part_key and\n order_item.supplier_key = part_supplier.supplier_key\n)\nselect \n *\nfrom\n final\norder by\n order_date", "language": "sql", "refs": [ { "name": "order_items", "package": null, "version": null }, { "name": "part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.order_items", "model.tpch.part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.dim_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_suppliers.sql", "original_file_path": "models/marts/core/dim_suppliers.sql", "unique_id": "model.tpch.dim_suppliers", "fqn": [ "tpch", "marts", "core", "dim_suppliers" ], "alias": "dim_suppliers", "checksum": { "name": "sha256", "checksum": "ecdf5d788fb87a00fe8c6e089a5a3e0e6e5e7d0ae6ac0076d68a675dae309518" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Suppliers dimensions table", "columns": { "supplier_key": { "name": "supplier_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/_core__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_suppliers", "sql_on": "${dim_suppliers.supplier_key} = ${stg_tpch_suppliers.supplier_key}" } ] } }, "created_at": 1697212557.421744, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_suppliers", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\n\nwith supplier as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n select \n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n nation.name as nation,\n region.name as region,\n supplier.phone_number,\n supplier.account_balance\n from\n supplier\n inner join nation\n on supplier.nation_key = nation.nation_key\n inner join region \n on nation.region_key = region.region_key\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final", "language": "sql", "refs": [ { "name": "stg_tpch_suppliers", "package": null, "version": null }, { "name": "stg_tpch_nations", "package": null, "version": null }, { "name": "stg_tpch_regions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.fct_orders_stats_sql": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_orders_stats_sql", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders_stats_sql.sql", "original_file_path": "models/marts/core/fct_orders_stats_sql.sql", "unique_id": "model.tpch.fct_orders_stats_sql", "fqn": [ "tpch", "marts", "core", "fct_orders_stats_sql" ], "alias": "fct_orders_stats_sql", "checksum": { "name": "sha256", "checksum": "68216d76f0de26925f55aa75b56a11a9b3ce8ee8c4204352e1e993ef8e276212" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212556.484398, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders_stats_sql", "raw_code": "{% set ref_orders = ref('fct_orders') %}\n\nwith \n\norders as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref_orders }}\n\n),\n\ndescribed as (\n\n {% set columns = adapter.get_columns_in_relation(ref_orders) %}\n {% set numeric_cols = [] %}\n {% for col in columns %}\n {% if col.dtype in ('NUMBER', 'FLOAT') %}\n {% do numeric_cols.append(col) %}\n {% endif %}\n {% endfor %}\n \n {% set stats = {\n 'stddev': 'stddev(...)',\n 'min': 'min(...)',\n 'mean': 'avg(...)',\n 'count': 'count(...)',\n 'max': 'max(...)',\n } %}\n \n {% for stat_name, stat_calc in stats.items() %}\n \n select\n '{{ stat_name }}' as metric,\n {% for col in numeric_cols %}\n {{ stat_calc | replace('...', col.name) }} as {{ col.name }}{{ ',' if not loop.last }}\n {% endfor %}\n \n from {{ ref_orders }}\n \n {{ 'union all' if not loop.last }}\n \n {% endfor %}\n \n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from described", "language": "sql", "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.dim_customers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_customers", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "unique_id": "model.tpch.dim_customers", "fqn": [ "tpch", "marts", "core", "dim_customers" ], "alias": "dim_customers", "checksum": { "name": "sha256", "checksum": "92da2905a5e766655b67182c48fa8243b3fbfa91c7a42e3433adbd1b45cf248f" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "transient": false, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Customer dimensions table", "columns": { "customer_key": { "name": "customer_key", "description": "Primary key on the customers table", "meta": { "metrics": { "total_unique_customers": { "type": "count" } } }, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "region": { "name": "region", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "address": { "name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "nation": { "name": "nation", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "market_segment": { "name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/_core__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "stg_tpch_customers", "sql_on": "${dim_customers.customer_key} = ${stg_tpch_customers.customer_key}" }, { "join": "stg_tpch_nations", "sql_on": "${stg_tpch_customers.nation_key} = ${stg_tpch_nations.nation_key}" } ] }, "transient": false }, "created_at": 1697212557.4164054, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_customers", "raw_code": "{{\n config(\n materialized = 'table',\n transient=false\n )\n}}\n\nwith customer as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n select \n customer.customer_key,\n customer.name,\n customer.address,\n nation.nation_key,\n nation.name as nation,\n region.region_key,\n region.name as region,\n customer.phone_number,\n customer.account_balance,\n customer.market_segment\n from\n customer\n inner join nation\n on customer.nation_key = nation.nation_key\n inner join region\n on nation.region_key = region.region_key\n)\nselect \n *\nfrom\n final\norder by\n customer_key", "language": "sql", "refs": [ { "name": "stg_tpch_customers", "package": null, "version": null }, { "name": "stg_tpch_nations", "package": null, "version": null }, { "name": "stg_tpch_regions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.fct_orders": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_orders", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "unique_id": "model.tpch.fct_orders", "fqn": [ "tpch", "marts", "core", "fct_orders" ], "alias": "fct_orders", "checksum": { "name": "sha256", "checksum": "d40495d41ae87c331218f92d695995b8d6a42935ea8bd90606194d193a492bf2" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [ "finance" ], "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [ "finance" ], "description": "orders fact table", "columns": { "order_key": { "name": "order_key", "description": "primary key of the model", "meta": { "metrics": { "total_orders": { "type": "sum" } } }, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": { "metrics": { "total_unique_customers": { "type": "count_distinct" } } }, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status_code": { "name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "priority_code": { "name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "clerk_name": { "name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_priority": { "name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_count": { "name": "order_count", "description": "count of order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/_core__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "meta": { "joins": [ { "join": "dim_customers", "sql_on": "${fct_orders.customer_key} = ${dim_customers.customer_key}" } ] }, "tags": [ "finance" ] }, "created_at": 1697212557.434404, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders", "raw_code": "{{\n config(\n materialized = 'table',\n tags=['finance']\n )\n}}\n\n\nwith orders as (\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_orders') }}\n\n),\norder_item as (\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n select \n order_key,\n sum(gross_item_sales_amount) as gross_item_sales_amount,\n sum(item_discount_amount) as item_discount_amount,\n sum(item_tax_amount) as item_tax_amount,\n sum(net_item_sales_amount) as net_item_sales_amount\n from order_item\n group by\n 1\n),\nfinal as (\n\n select \n\n orders.order_key, \n orders.order_date,\n orders.customer_key,\n orders.status_code,\n orders.priority_code,\n orders.ship_priority,\n orders.clerk_name,\n 1 as order_count,\n order_item_summary.gross_item_sales_amount,\n order_item_summary.item_discount_amount,\n order_item_summary.item_tax_amount,\n order_item_summary.net_item_sales_amount\n from\n orders\n inner join order_item_summary\n on orders.order_key = order_item_summary.order_key\n)\nselect \n *\nfrom\n final\n\norder by\n order_date", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null }, { "name": "order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.dim_parts": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_parts", "resource_type": "model", "package_name": "tpch", "path": "marts/core/dim_parts.sql", "original_file_path": "models/marts/core/dim_parts.sql", "unique_id": "model.tpch.dim_parts", "fqn": [ "tpch", "marts", "core", "dim_parts" ], "alias": "dim_parts", "checksum": { "name": "sha256", "checksum": "d219372a8f9f61e7f76d160ba914834de7fc5883f1fdc81c03da59c08ad262ba" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Parts dimensions table", "columns": { "part_key": { "name": "part_key", "description": "primary key of the model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "size": { "name": "size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/core/_core__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.4176958, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_parts", "raw_code": "{{\n config(\n materialized = 'table'\n )\n}}\nwith part as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n select \n part_key,\n manufacturer,\n name,\n brand,\n type,\n size,\n container,\n retail_price\n from\n part\n)\nselect *\nfrom final \norder by part_key", "language": "sql", "refs": [ { "name": "stg_tpch_parts", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.agg_segment_page_views": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "agg_segment_page_views", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_segment_page_views.sql", "original_file_path": "models/marts/aggregates/agg_segment_page_views.sql", "unique_id": "model.tpch.agg_segment_page_views", "fqn": [ "tpch", "marts", "aggregates", "agg_segment_page_views" ], "alias": "agg_segment_page_views", "checksum": { "name": "sha256", "checksum": "58a939fd71f581c69e19b5f1cb8ff77f144b016213efa8eeb1e2cdfdd61f75b1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212556.5095663, "relation_name": "DOUG_DEMO_V2.ANALYTICS.agg_segment_page_views", "raw_code": "with page_views as (\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('upstream', 'int_segment__pages') }}\n)\n\nselect\n date_trunc('day', timestamp) as date_day,\n src as page_source,\n title as page_title,\n count(*) as total_page_views\nfrom page_views\nwhere page_title not like 'DaaC'\ngroup by 1, 2, 3", "language": "sql", "refs": [ { "name": "int_segment__pages", "package": "upstream", "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.upstream.int_segment__pages" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.agg_ship_modes_dynamic_pivot": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "agg_ship_modes_dynamic_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_dynamic_pivot", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_dynamic_pivot" ], "alias": "agg_ship_modes_dynamic_pivot", "checksum": { "name": "sha256", "checksum": "7bb902ee2f121900dface286424b53cbf8a3b6955f4323df0621f760385ce5df" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.511424, "relation_name": "DOUG_DEMO_V2.ANALYTICS.agg_ship_modes_dynamic_pivot", "raw_code": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n {# this pulls the unique ship modes from the fct_order_items table #}\n select ship_mode from {{ ref('fct_order_items') }} group by 1 \n\n{%- endcall %}\n\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n\nselect\n date_part('year', order_date) as order_year,\n\n {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n {%- for ship_mode in ship_modes -%}\n sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n {%- if not loop.last -%},{% endif %}\n {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "language": "sql", "refs": [ { "name": "fct_order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.statement" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.agg_ship_modes_hardcoded_pivot": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "agg_ship_modes_hardcoded_pivot", "resource_type": "model", "package_name": "tpch", "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "unique_id": "model.tpch.agg_ship_modes_hardcoded_pivot", "fqn": [ "tpch", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot" ], "alias": "agg_ship_modes_hardcoded_pivot", "checksum": { "name": "sha256", "checksum": "fb4d45e5eeb79b20f3daa52029cb340a75fa52c2e6516c9f921ee34b21d604dd" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system", "columns": { "order_year": { "name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/aggregates/aggregates.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.5107486, "relation_name": "DOUG_DEMO_V2.ANALYTICS.agg_ship_modes_hardcoded_pivot", "raw_code": "/* Create a pivot table with hard-coded columns based on a query of the ship modes that are in the system */\n\nwith merged as (\n select\n date_part('year', order_date) as order_year,\n ship_mode,\n gross_item_sales_amount\n from {{ ref('fct_order_items') }}\n)\n\nselect\n README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch \nfrom\n merged\n -- have to manually map strings in the pivot operation\n pivot(sum(gross_item_sales_amount) for ship_mode in (\n 'AIR',\n 'REG AIR',\n 'FOB',\n 'RAIL',\n 'MAIL',\n 'SHIP',\n 'TRUCK'\n )) as p \n\norder by order_year", "language": "sql", "refs": [ { "name": "fct_order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.order_items": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "order_items", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/order_items.sql", "original_file_path": "models/marts/intermediate/order_items.sql", "unique_id": "model.tpch.order_items", "fqn": [ "tpch", "marts", "intermediate", "order_items" ], "alias": "order_items", "checksum": { "name": "sha256", "checksum": "f2e191f05857c25b4519f79c948f909a068245b05042eb7227d8723772bae1b1" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": { "order_item_key": { "name": "order_item_key", "description": "surrogate key for the model -- combo of order_key + line_number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_key": { "name": "order_key", "description": "foreign key for orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "customer_key": { "name": "customer_key", "description": "foreign key for customers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for suppliers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_date": { "name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_status_code": { "name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "return_flag": { "name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "line_number": { "name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "order_item_status_code": { "name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_date": { "name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "commit_date": { "name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "receipt_date": { "name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ship_mode": { "name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "extended_price": { "name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "quantity": { "name": "quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "base_price": { "name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discount_percentage": { "name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discounted_price": { "name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "gross_item_sales_amount": { "name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_discount_amount": { "name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tax_rate": { "name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "item_tax_amount": { "name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "net_item_sales_amount": { "name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.5140104, "relation_name": "DOUG_DEMO_V2.ANALYTICS.order_items", "raw_code": "with orders as (\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n line_item.order_item_key,\n orders.order_key,\n orders.customer_key,\n line_item.part_key,\n line_item.supplier_key,\n orders.order_date,\n orders.status_code as order_status_code,\n\n\n line_item.return_flag,\n \n line_item.line_number,\n line_item.status_code as order_item_status_code,\n line_item.ship_date,\n line_item.commit_date,\n line_item.receipt_date,\n line_item.ship_mode,\n line_item.extended_price,\n line_item.quantity,\n \n -- extended_price is actually the line item total,\n -- so we back out the extended price per item\n (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n line_item.discount_percentage,\n (base_price README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n line_item.extended_price as gross_item_sales_amount,\n (line_item.extended_price README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n -- We model discounts as negative amounts\n (-1 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch line_item.extended_price README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch line_item.discount_percentage){{ money() }} as item_discount_amount,\n line_item.tax_rate,\n ((gross_item_sales_amount + item_discount_amount) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch line_item.tax_rate){{ money() }} as item_tax_amount,\n (\n gross_item_sales_amount + \n item_discount_amount + \n item_tax_amount\n ){{ money() }} as net_item_sales_amount\n\nfrom\n orders\ninner join line_item\n on orders.order_key = line_item.order_key\norder by\n orders.order_date", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null }, { "name": "stg_tpch_line_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.money" ], "nodes": [ "model.tpch.stg_tpch_orders", "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.tpch.part_suppliers": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "part_suppliers", "resource_type": "model", "package_name": "tpch", "path": "marts/intermediate/part_suppliers.sql", "original_file_path": "models/marts/intermediate/part_suppliers.sql", "unique_id": "model.tpch.part_suppliers", "fqn": [ "tpch", "marts", "intermediate", "part_suppliers" ], "alias": "part_suppliers", "checksum": { "name": "sha256", "checksum": "b91609b8b02af6d8690f13bbfd816df2e35444657ae9777bc5977d1af64c7553" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": { "part_supplier_key": { "name": "part_supplier_key", "description": "primary key of the models", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_key": { "name": "part_key", "description": "foreign key for part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_name": { "name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "manufacturer": { "name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "brand": { "name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_type": { "name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "part_size": { "name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "container": { "name": "container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "retail_price": { "name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_key": { "name": "supplier_key", "description": "foreign key for supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_name": { "name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "supplier_address": { "name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone_number": { "name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "account_balance": { "name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "nation_key": { "name": "nation_key", "description": "foreign key for nation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "available_quantity": { "name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "cost": { "name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://models/marts/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212557.5168571, "relation_name": "DOUG_DEMO_V2.ANALYTICS.part_suppliers", "raw_code": "with part as (\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n select \n\n part_supplier.part_supplier_key,\n part.part_key,\n part.name as part_name,\n part.manufacturer,\n part.brand,\n part.type as part_type,\n part.size as part_size,\n part.container,\n part.retail_price,\n\n supplier.supplier_key,\n supplier.supplier_name,\n supplier.supplier_address,\n supplier.phone_number,\n supplier.account_balance,\n supplier.nation_key,\n\n part_supplier.available_quantity,\n part_supplier.cost\nfrom\n part \ninner join \n part_supplier\n on part.part_key = part_supplier.part_key\ninner join\n supplier\n on part_supplier.supplier_key = supplier.supplier_key\norder by\n part.part_key\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final", "language": "sql", "refs": [ { "name": "stg_tpch_parts", "package": null, "version": null }, { "name": "stg_tpch_suppliers", "package": null, "version": null }, { "name": "stg_tpch_part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers", "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "snapshot.tpch.tpch_customer_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_customer_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_customer_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_customer_snapshot.sql", "unique_id": "snapshot.tpch.tpch_customer_snapshot", "fqn": [ "tpch", "tpch", "tpch_customer_snapshot", "tpch_customer_snapshot" ], "alias": "tpch_customer_snapshot", "checksum": { "name": "sha256", "checksum": "ad4d6b254a3d8260e5de6b207da31f0e294b173ea743eeb8e9e0fd9305216d6b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "c_custkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "c_custkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1697212556.593832, "relation_name": "doug_demo_v2.snapshots.tpch_customer_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='c_custkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'customer') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "snapshot.tpch.tpch_part_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_part_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_part_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_part_snapshot.sql", "unique_id": "snapshot.tpch.tpch_part_snapshot", "fqn": [ "tpch", "tpch", "tpch_part_snapshot", "tpch_part_snapshot" ], "alias": "tpch_part_snapshot", "checksum": { "name": "sha256", "checksum": "052952412b2ba03ba41cb88d43a5709b18063807c98750501b7288d4c7612642" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "p_partkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "p_partkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1697212556.6077816, "relation_name": "doug_demo_v2.snapshots.tpch_part_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='p_partkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'part') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "snapshot.tpch.tpch_supplier_snapshot": { "database": "doug_demo_v2", "schema": "snapshots", "name": "tpch_supplier_snapshot", "resource_type": "snapshot", "package_name": "tpch", "path": "tpch/tpch_supplier_snapshot.sql", "original_file_path": "snapshots/tpch/tpch_supplier_snapshot.sql", "unique_id": "snapshot.tpch.tpch_supplier_snapshot", "fqn": [ "tpch", "tpch", "tpch_supplier_snapshot", "tpch_supplier_snapshot" ], "alias": "tpch_supplier_snapshot", "checksum": { "name": "sha256", "checksum": "18b69c9e200356c4b6a0bcd1ef3bf95834e5c1f1f3e4435f6806f8af758bf4a9" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "s_suppkey", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "strategy": "timestamp", "target_schema": "snapshots", "target_database": "doug_demo_v2", "updated_at": "_etl_updated_timestamp", "check_cols": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "target_database": "doug_demo_v2", "target_schema": "snapshots", "unique_key": "s_suppkey", "strategy": "timestamp", "updated_at": "_etl_updated_timestamp" }, "created_at": 1697212556.614774, "relation_name": "doug_demo_v2.snapshots.tpch_supplier_snapshot", "raw_code": "\n\n{{ config(\n target_database='doug_demo_v2',\n target_schema='snapshots',\n unique_key='s_suppkey',\n strategy='timestamp',\n updated_at='_etl_updated_timestamp',\n)}}\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source('tpch', 'supplier') }}\n\n", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "analysis.tpch.customer_snapshot_query": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "customer_snapshot_query", "resource_type": "analysis", "package_name": "tpch", "path": "analysis/customer_snapshot_query.sql", "original_file_path": "analyses/customer_snapshot_query.sql", "unique_id": "analysis.tpch.customer_snapshot_query", "fqn": [ "tpch", "analysis", "customer_snapshot_query" ], "alias": "customer_snapshot_query", "checksum": { "name": "sha256", "checksum": "3217248d3588f7056ddbc630a1ec7476fbd6e2360ef33253f3a78ce5a1bfa53a" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true }, "created_at": 1697212556.6451116, "relation_name": null, "raw_code": "with counts as (\n select c_custkey, count(*) as customer_count\n from {{ ref('tpch_customer_snapshot') }}\n group by 1\n having customer_count > 1\n)\n\nselect a.*\nfrom {{ ref('tpch_customer_snapshot') }} a\njoin counts b on a.c_custkey = b.c_custkey\norder by c_custkey, dbt_valid_from", "language": "sql", "refs": [ { "name": "tpch_customer_snapshot", "package": null, "version": null }, { "name": "tpch_customer_snapshot", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "snapshot.tpch.tpch_customer_snapshot" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "test.tpch.stg_tpch_orders_assert_positive_price": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "stg_tpch_orders_assert_positive_price", "resource_type": "test", "package_name": "tpch", "path": "stg_tpch_orders_assert_positive_price.sql", "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql", "unique_id": "test.tpch.stg_tpch_orders_assert_positive_price", "fqn": [ "tpch", "stg_tpch_orders_assert_positive_price" ], "alias": "stg_tpch_orders_assert_positive_price", "checksum": { "name": "sha256", "checksum": "8053b8720b4b33690bebc56cb881005b949ee16023e351a1bc962529f18fe038" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1697212556.6797538, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\nwith orders as ( select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom orders \nwhere total_price < 0", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "original_file_path": "tests/macro_stg_tphc_suppliers_assert_pos_acct_bal.sql", "unique_id": "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "fqn": [ "tpch", "macro_stg_tphc_suppliers_assert_pos_acct_bal" ], "alias": "macro_stg_tphc_suppliers_assert_pos_acct_bal", "checksum": { "name": "sha256", "checksum": "bf636d56abefc837b17711ef1da6b27464592065652f29633fa94905b5eea4cc" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "warn", "tags": [ "finance" ] }, "created_at": 1697212556.6854546, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='warn',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_suppliers', 'account_balance') }}", "language": "sql", "refs": [ { "name": "stg_tpch_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "test.tpch.macro_stg_tpch_orders_assert_pos_price": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "macro_stg_tpch_orders_assert_pos_price", "resource_type": "test", "package_name": "tpch", "path": "macro_stg_tpch_orders_assert_pos_price.sql", "original_file_path": "tests/macro_stg_tpch_orders_assert_pos_price.sql", "unique_id": "test.tpch.macro_stg_tpch_orders_assert_pos_price", "fqn": [ "tpch", "macro_stg_tpch_orders_assert_pos_price" ], "alias": "macro_stg_tpch_orders_assert_pos_price", "checksum": { "name": "sha256", "checksum": "bd383c3dbfe817a0fc1b18fa7431a8d3da0e4b53802e70a10f6c8461bbe89e79" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [ "finance" ], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [ "finance" ], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "enabled": true, "severity": "error", "tags": [ "finance" ] }, "created_at": 1697212556.692057, "relation_name": null, "raw_code": "{{\n config(\n enabled=true,\n severity='error',\n tags = ['finance']\n )\n}}\n\n\n{{ test_all_values_gte_zero('stg_tpch_orders', 'total_price') }}", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.tpch.test_all_values_gte_zero" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null } }, "seed.tpch.country_codes": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "country_codes", "resource_type": "seed", "package_name": "tpch", "path": "country_codes.csv", "original_file_path": "seeds/country_codes.csv", "unique_id": "seed.tpch.country_codes", "fqn": [ "tpch", "country_codes" ], "alias": "country_codes", "checksum": { "name": "sha256", "checksum": "ef89ea6f694c374f98a14061acb6674a4337e48262f90b1117e9c8584151b764" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Lookup table for country and two digit ISO codes", "columns": { "Name": { "name": "Name", "description": "Name of the country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "Code": { "name": "Code", "description": "2-digit ISO code for the country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.1853125, "relation_name": "DOUG_DEMO_V2.ANALYTICS.country_codes", "raw_code": "", "root_path": "/tmp/jobs/204529470/target", "depends_on": { "macros": [] } }, "seed.tpch.snowflake_contract_rates": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "snowflake_contract_rates", "resource_type": "seed", "package_name": "tpch", "path": "snowflake_contract_rates.csv", "original_file_path": "seeds/snowflake_contract_rates.csv", "unique_id": "seed.tpch.snowflake_contract_rates", "fqn": [ "tpch", "snowflake_contract_rates" ], "alias": "snowflake_contract_rates", "checksum": { "name": "sha256", "checksum": "7a45369a64ed269dddd2eee23564d668bcd14ccf702d50a485334398b18c0d29" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": { "effective_date": "DATE", "rate": "NUMBER" }, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "quote_columns": null, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "This is an example of a seed. Seeds are CSV files in your dbt project (typically in your data directory), that dbt can load into your data warehouse using the dbt seed command.\n", "columns": { "effective_date": { "name": "effective_date", "description": "effective date of contract", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rate": { "name": "rate", "description": "rate based on the effective date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://seeds/data.yml", "build_path": null, "deferred": false, "unrendered_config": { "column_types": { "effective_date": "DATE", "rate": "NUMBER" } }, "created_at": 1697212557.1837792, "relation_name": "DOUG_DEMO_V2.ANALYTICS.snowflake_contract_rates", "raw_code": "", "root_path": "/tmp/jobs/204529470/target", "depends_on": { "macros": [] } }, "model.dbt_artifacts.dim_dbt__exposures": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "fqn": [ "dbt_artifacts", "dim_dbt__exposures" ], "alias": "dim_dbt__exposures", "checksum": { "name": "sha256", "checksum": "4e6b5285050f6cdd809b3a1c0f072e75114e595aa9f53a6c9b9cfba4adad4487" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about exposures.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "description": { "name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "exposure_execution_id": { "name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "url": { "name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5867596, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__exposures", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n select\n exposure_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n type,\n owner,\n maturity,\n path,\n description,\n url,\n package_name,\n depends_on_nodes,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from exposures", "language": "sql", "refs": [ { "name": "stg_dbt__exposures", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__exposures" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__models", "fqn": [ "dbt_artifacts", "dim_dbt__models" ], "alias": "dim_dbt__models", "checksum": { "name": "sha256", "checksum": "d983205b0257086d4182d80e8f99313234b70dd0f54c63ae4aaed1e3326a142b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about models.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5926514, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__models", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n select\n model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n materialization,\n tags,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from models", "language": "sql", "refs": [ { "name": "stg_dbt__models", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__models" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__sources": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "unique_id": "model.dbt_artifacts.dim_dbt__sources", "fqn": [ "dbt_artifacts", "dim_dbt__sources" ], "alias": "dim_dbt__sources", "checksum": { "name": "sha256", "checksum": "7c05773e6974d042eba9c13f7cc7d4d922c6c255855e6a3b4043fa7bf8e2bac0" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about sources.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "freshness": { "name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loader": { "name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "source_execution_id": { "name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.598292, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__sources", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n select\n source_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n source_name,\n loader,\n name,\n identifier,\n loaded_at_field,\n freshness\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from sources", "language": "sql", "refs": [ { "name": "stg_dbt__sources", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__sources" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__snapshots": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "fqn": [ "dbt_artifacts", "dim_dbt__snapshots" ], "alias": "dim_dbt__snapshots", "checksum": { "name": "sha256", "checksum": "8a2ef7f0b0892c9197611911c1c0700e86a301e27825da25a7f66cfd2bab409c" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about snapshots.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "strategy": { "name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5664544, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__snapshots", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n select\n snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n strategy,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from snapshots", "language": "sql", "refs": [ { "name": "stg_dbt__snapshots", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__snapshots" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.fct_dbt__model_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "fqn": [ "dbt_artifacts", "fct_dbt__model_executions" ], "alias": "fct_dbt__model_executions", "checksum": { "name": "sha256", "checksum": "95cfbd8c023b5c9e920c6bb694ffa5c7f59596b49b9f8a811c7d2a6fdb7cfabe" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Fact model that contains data about model executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "bytes_affected": { "name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.574716, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_dbt__model_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n select\n model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n {% if target.type == 'bigquery' %}\n bytes_processed,\n {% endif %}\n materialization,\n schema, -- noqa\n name,\n alias,\n message\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from model_executions", "language": "sql", "refs": [ { "name": "stg_dbt__model_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__model_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__current_models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__current_models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "fqn": [ "dbt_artifacts", "dim_dbt__current_models" ], "alias": "dim_dbt__current_models", "checksum": { "name": "sha256", "checksum": "c05bd9789102586e652f96737cced00ed202366d17e9d78bb89535ee5cbadf82" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_full_refresh_run_completed_at": { "name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_full_refresh_run_rows_affected": { "name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_full_refresh_run_bytes_processed": { "name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_full_refresh_run_total_runtime": { "name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_run_completed_at": { "name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_run_rows_affected": { "name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_run_bytes_processed": { "name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "last_run_total_runtime": { "name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5725584, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__current_models", "raw_code": "with base as (\n select *\n from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n select *\n from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Retrieves the models present in the most recent run */\n select *\n from base\n where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Retreives all successful run information for the models present in the most\n recent run and ranks them based on query completion time */\n select\n model_executions.node_id\n , model_executions.was_full_refresh\n , model_executions.query_completed_at\n , model_executions.total_node_runtime\n , model_executions.rows_affected\n {% if target.type == 'bigquery' %}\n , model_executions.bytes_processed\n {% endif %}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Row number by refresh and node ID */\n , row_number() over (\n partition by latest_models.node_id, model_executions.was_full_refresh\n order by model_executions.query_completed_at desc /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var most recent ranked first */\n ) as run_idx\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Row number by node ID */\n , row_number() over (\n partition by latest_models.node_id\n order by model_executions.query_completed_at desc /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var most recent ranked first */\n ) as run_idx_id_only\n from model_executions\n inner join latest_models on model_executions.node_id = latest_models.node_id\n where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n select\n node_id\n , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n {% if target.type == 'bigquery' %}\n , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n {% endif %}\n , max(case when run_idx_id_only = 1 then query_completed_at end) as last_run_completed_at\n , max(case when run_idx_id_only = 1 then total_node_runtime end) as last_run_total_runtime\n , max(case when run_idx_id_only = 1 then rows_affected end) as last_run_rows_affected\n {% if target.type == 'bigquery' %}\n , max(case when run_idx_id_only = 1 then bytes_processed end) as last_run_bytes_processed\n {% endif %}\n , max(case when not was_full_refresh then query_completed_at end) as last_incremental_run_completed_at\n , max(case when not was_full_refresh then total_node_runtime end) as last_incremental_run_total_runtime\n , max(case when not was_full_refresh then rows_affected end) as last_incremental_run_rows_affected\n {% if target.type == 'bigquery' %}\n , max(case when not was_full_refresh then bytes_processed end) as last_incremental_run_bytes_processed\n {% endif %}\n from latest_models_runs\n where run_idx = 1\n group by 1\n),\n\nfinal as (\n select\n latest_models.*\n , latest_model_stats.last_full_refresh_run_completed_at\n , latest_model_stats.last_full_refresh_run_total_runtime\n , latest_model_stats.last_full_refresh_run_rows_affected\n {% if target.type == 'bigquery' %}\n , latest_model_stats.last_full_refresh_run_bytes_processed\n {% endif %}\n , latest_model_stats.last_run_completed_at\n , latest_model_stats.last_run_total_runtime\n , latest_model_stats.last_run_rows_affected\n {% if target.type == 'bigquery' %}\n , latest_model_stats.last_run_bytes_processed\n {% endif %}\n , latest_model_stats.last_incremental_run_completed_at\n , latest_model_stats.last_incremental_run_total_runtime\n , latest_model_stats.last_incremental_run_rows_affected\n {% if target.type == 'bigquery' %}\n , latest_model_stats.last_incremental_run_bytes_processed\n {% endif %}\n from latest_models\n left join latest_model_stats\n on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final", "language": "sql", "refs": [ { "name": "stg_dbt__models", "package": null, "version": null }, { "name": "stg_dbt__model_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.fct_dbt__test_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "fqn": [ "dbt_artifacts", "fct_dbt__test_executions" ], "alias": "fct_dbt__test_executions", "checksum": { "name": "sha256", "checksum": "38ab767416a2b1bfdc5d471dc4c7bb9d2a44b7482c6d96f8fe55d4d0f1f3aff3" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Fact model that contains data about test executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5946767, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_dbt__test_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n select\n test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n failures,\n message\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from test_executions", "language": "sql", "refs": [ { "name": "stg_dbt__test_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__test_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.fct_dbt__seed_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "fqn": [ "dbt_artifacts", "fct_dbt__seed_executions" ], "alias": "fct_dbt__seed_executions", "checksum": { "name": "sha256", "checksum": "6ee5abff9a8147d1e7e55895dc4e0fda41867069ef06cb00c0cfbec7f1551590" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Fact model that contains data about seed executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6000035, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_dbt__seed_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n select\n seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias,\n message\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from seed_executions", "language": "sql", "refs": [ { "name": "stg_dbt__seed_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__seed_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.fct_dbt__invocations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "fqn": [ "dbt_artifacts", "fct_dbt__invocations" ], "alias": "fct_dbt__invocations", "checksum": { "name": "sha256", "checksum": "c58651a8fb885f0b0bdcea8a7000c8413b8d611f7ed0bf82fcd49e5000619c32" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Fact model that contains data about invocations.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "project_name": { "name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_command": { "name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "full_refresh_flag": { "name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_threads": { "name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "env_vars": { "name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_vars": { "name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "invocation_args": { "name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_custom_envs": { "name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5827909, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_dbt__invocations", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n select\n command_invocation_id,\n dbt_version,\n project_name,\n run_started_at,\n dbt_command,\n full_refresh_flag,\n target_profile_name,\n target_name,\n target_schema,\n target_threads,\n dbt_cloud_project_id,\n dbt_cloud_job_id,\n dbt_cloud_run_id,\n dbt_cloud_run_reason_category,\n dbt_cloud_run_reason,\n env_vars,\n dbt_vars,\n invocation_args,\n dbt_custom_envs\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from invocations", "language": "sql", "refs": [ { "name": "stg_dbt__invocations", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__invocations" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__tests": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "unique_id": "model.dbt_artifacts.dim_dbt__tests", "fqn": [ "dbt_artifacts", "dim_dbt__tests" ], "alias": "dim_dbt__tests", "checksum": { "name": "sha256", "checksum": "aa301ae84a25357e3eb01bb41238f7d5126cbc576348fb769246a8b5737c0065" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about tests.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_path": { "name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5905848, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__tests", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n select\n test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n depends_on_nodes,\n package_name,\n test_path,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from tests", "language": "sql", "refs": [ { "name": "stg_dbt__tests", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__tests" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.dim_dbt__seeds": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "dim_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "fqn": [ "dbt_artifacts", "dim_dbt__seeds" ], "alias": "dim_dbt__seeds", "checksum": { "name": "sha256", "checksum": "350b4d88c96d239c69da34d8b875d2002a2d74a8330a1f39b73fdb71850082d0" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Dimension model that contains data about seeds.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5885782, "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_dbt__seeds", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n select\n seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n package_name,\n path,\n checksum,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from seeds", "language": "sql", "refs": [ { "name": "stg_dbt__seeds", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__seeds" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.fct_dbt__snapshot_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "fqn": [ "dbt_artifacts", "fct_dbt__snapshot_executions" ], "alias": "fct_dbt__snapshot_executions", "checksum": { "name": "sha256", "checksum": "fae9bb5c2160bdb4c937f9d5971b896e47f78a08cd423722efd4a1f03854c012" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Fact model that contains data about snapshot executions.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.5624142, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n select\n snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias,\n message\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from snapshot_executions", "language": "sql", "refs": [ { "name": "stg_dbt__snapshot_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__test_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__test_executions" ], "alias": "stg_dbt__test_executions", "checksum": { "name": "sha256", "checksum": "7b853f126d1c8a0f661ad02777eed4aff54326d0e2b8d5e63fc9728e9df7b2a2" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6052184, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__test_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n failures,\n message\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "test_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.test_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__seed_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__seed_executions" ], "alias": "stg_dbt__seed_executions", "checksum": { "name": "sha256", "checksum": "a1d73976c499d79936a129f1fa7a536f66e97812829b27bbf2b84fef747b3ac0" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6021385, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__seed_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema, -- noqa\n name,\n alias,\n message,\n adapter_response\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "seed_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.seed_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "unique_id": "model.dbt_artifacts.stg_dbt__models", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__models" ], "alias": "stg_dbt__models", "checksum": { "name": "sha256", "checksum": "0a664afe03945dbaae372463eae188b78b521749277ba76892822589903836b9" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6156733, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__models", "raw_code": "with base as (\n\n select *\n from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n materialization,\n tags,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "models", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.models" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__model_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__model_executions" ], "alias": "stg_dbt__model_executions", "checksum": { "name": "sha256", "checksum": "838f0f4d3e7fc7e36bb8d3f183bb86bc24cdabc0a00474298175c3f8b829cb60" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "model_execution_id": { "name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "bytes_processed": { "name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.608983, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__model_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n {% if target.type == 'bigquery' %}\n bytes_processed,\n {% endif %}\n materialization,\n schema, -- noqa\n name,\n alias,\n message,\n adapter_response\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "model_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.model_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__seeds": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__seeds" ], "alias": "stg_dbt__seeds", "checksum": { "name": "sha256", "checksum": "e13641fa3693779fe9c7457f4705deff6149ae1cff14de40944a0d2d2baf7fbe" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "seed_execution_id": { "name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.612371, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__seeds", "raw_code": "with base as (\n\n select *\n from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n package_name,\n path,\n checksum,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "seeds", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.seeds" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__tests": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "unique_id": "model.dbt_artifacts.stg_dbt__tests", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__tests" ], "alias": "stg_dbt__tests", "checksum": { "name": "sha256", "checksum": "7b637a0590b30d0bef21fcb5c57af5a0fbeceb33e5e01819fbd4755dbfdd5c74" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_execution_id": { "name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_path": { "name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6036034, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__tests", "raw_code": "with base as (\n\n select *\n from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n depends_on_nodes,\n package_name,\n test_path,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "tests", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.tests" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__snapshot_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__snapshot_executions" ], "alias": "stg_dbt__snapshot_executions", "checksum": { "name": "sha256", "checksum": "92e77fda2ce7ffd3e6edd41579564ad719fc1f1212d6dc41e4701c1bda7f3841" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6107697, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n select *\n from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema, -- noqa\n name,\n alias,\n message,\n adapter_response\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "snapshot_executions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part" ], "nodes": [ "model.dbt_artifacts.snapshot_executions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__snapshots": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__snapshots" ], "alias": "stg_dbt__snapshots", "checksum": { "name": "sha256", "checksum": "74411b1790f62e26679e3313efb3c5cc3a48fa5581659f859d7e6805872c9f47" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": { "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "snapshot_execution_id": { "name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "strategy": { "name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6139495, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__snapshots", "raw_code": "with base as (\n\n select *\n from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n strategy,\n meta,\n alias\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "snapshots", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.snapshots" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__sources": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "unique_id": "model.dbt_artifacts.stg_dbt__sources", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__sources" ], "alias": "stg_dbt__sources", "checksum": { "name": "sha256", "checksum": "fc17534ee4f5f3307a8ae0a3e40a26195bbb631e77a005b7bc09d87dd6ffd791" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "freshness": { "name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loader": { "name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "source_execution_id": { "name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.606727, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__sources", "raw_code": "with base as (\n\n select *\n from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n source_name,\n loader,\n name,\n identifier,\n loaded_at_field,\n freshness\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "sources", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.sources" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__invocations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__invocations" ], "alias": "stg_dbt__invocations", "checksum": { "name": "sha256", "checksum": "3c6ec7ff1be73763b9215b9cdb5713dbef4e09473f9179b8aae86f44591db65d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "project_name": { "name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_command": { "name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "full_refresh_flag": { "name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_threads": { "name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "env_vars": { "name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_vars": { "name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "invocation_args": { "name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_custom_envs": { "name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.6193485, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__invocations", "raw_code": "with base as (\n\n select *\n from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n select\n command_invocation_id,\n dbt_version,\n project_name,\n run_started_at,\n dbt_command,\n full_refresh_flag,\n target_profile_name,\n target_name,\n target_schema,\n target_threads,\n dbt_cloud_project_id,\n dbt_cloud_job_id,\n dbt_cloud_run_id,\n dbt_cloud_run_reason_category,\n dbt_cloud_run_reason,\n env_vars,\n dbt_vars,\n invocation_args,\n dbt_custom_envs\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "invocations", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [ "model.dbt_artifacts.invocations" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.stg_dbt__exposures": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "stg_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "fqn": [ "dbt_artifacts", "staging", "stg_dbt__exposures" ], "alias": "stg_dbt__exposures", "checksum": { "name": "sha256", "checksum": "ed5659a51982675abe6dd58ae003be71a3681da997e6f3edf219dfc800fb6f38" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "description": { "name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "exposure_execution_id": { "name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "url": { "name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "use_anonymous_sproc": true }, "created_at": 1697212557.617375, "relation_name": "DOUG_DEMO_V2.ANALYTICS.stg_dbt__exposures", "raw_code": "with base as (\n\n select *\n from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n select\n {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n type,\n owner,\n maturity,\n path,\n description,\n url,\n package_name,\n depends_on_nodes,\n tags\n from base\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from enhanced", "language": "sql", "refs": [ { "name": "exposures", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt_artifacts.generate_surrogate_key" ], "nodes": [ "model.dbt_artifacts.exposures" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.sources": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "unique_id": "model.dbt_artifacts.sources", "fqn": [ "dbt_artifacts", "sources", "sources" ], "alias": "sources", "checksum": { "name": "sha256", "checksum": "cdb2b6f673a0c33ee6f4b4df2061af8e3f377b2270c807abc6e2652b6eef91d9" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about sources. One row per node per execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "source_name": { "name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loader": { "name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "identifier": { "name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "loaded_at_field": { "name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "freshness": { "name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/sources.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.636682, "relation_name": "DOUG_DEMO_V2.ANALYTICS.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as source_name,\n cast(null as {{ type_string() }}) as loader,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as identifier,\n cast(null as {{ type_string() }}) as loaded_at_field,\n {% if target.type == 'snowflake' %}\n cast(null as {{ type_array() }}) as freshness,\n {% else %}\n cast(null as {{ type_json() }}) as freshness,\n {% endif %}\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.invocations": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "unique_id": "model.dbt_artifacts.invocations", "fqn": [ "dbt_artifacts", "sources", "invocations" ], "alias": "invocations", "checksum": { "name": "sha256", "checksum": "6a4815b5120da5634e36f6e798de58df84e90a99217f492f326fccbc04d1ffba" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about the invocations of dbt. One row per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_version": { "name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "project_name": { "name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_command": { "name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "full_refresh_flag": { "name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_profile_name": { "name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_name": { "name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_schema": { "name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "target_threads": { "name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "env_vars": { "name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_vars": { "name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "invocation_args": { "name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dbt_custom_envs": { "name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/invocations.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6315105, "relation_name": "DOUG_DEMO_V2.ANALYTICS.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as dbt_version,\n cast(null as {{ type_string() }}) as project_name,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as dbt_command,\n cast(null as {{ type_boolean() }}) as full_refresh_flag,\n cast(null as {{ type_string() }}) as target_profile_name,\n cast(null as {{ type_string() }}) as target_name,\n cast(null as {{ type_string() }}) as target_schema,\n cast(null as {{ type_int() }}) as target_threads,\n cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n cast(null as {{ type_json() }}) as env_vars,\n cast(null as {{ type_json() }}) as dbt_vars,\n cast(null as {{ type_json() }}) as invocation_args,\n cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.test_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "unique_id": "model.dbt_artifacts.test_executions", "fqn": [ "dbt_artifacts", "sources", "test_executions" ], "alias": "test_executions", "checksum": { "name": "sha256", "checksum": "99cdc23c924ffccb41d4f04f1c01d77b68882db3d20103ade59566e54f795e5a" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for metadata about test executions. One row per test execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "failures": { "name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.621085, "relation_name": "DOUG_DEMO_V2.ANALYTICS.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_int() }}) as failures,\n cast(null as {{ type_string() }}) as message,\n cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.tests": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "unique_id": "model.dbt_artifacts.tests", "fqn": [ "dbt_artifacts", "sources", "tests" ], "alias": "tests", "checksum": { "name": "sha256", "checksum": "4c01738a844f61998ee400d5488ffc6ec4f26f5cab407c1e381d68b372b13a85" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for metadata about test executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "test_path": { "name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/tests.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6351418, "relation_name": "DOUG_DEMO_V2.ANALYTICS.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as test_path,\n cast(null as {{ type_array() }}) as tags,\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.snapshots": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "unique_id": "model.dbt_artifacts.snapshots", "fqn": [ "dbt_artifacts", "sources", "snapshots" ], "alias": "snapshots", "checksum": { "name": "sha256", "checksum": "7105778c0a8dbf7396ed63f19ec8c56bfd6133605ad351bb924ecc68055eb92a" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "strategy": { "name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6263475, "relation_name": "DOUG_DEMO_V2.ANALYTICS.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_string() }}) as strategy,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.exposures": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "unique_id": "model.dbt_artifacts.exposures", "fqn": [ "dbt_artifacts", "sources", "exposures" ], "alias": "exposures", "checksum": { "name": "sha256", "checksum": "6e722dd3b66bc19547705c0d0e95151b9676c07c9c7af257128258a28b76dc89" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about exposure exections. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "owner": { "name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "maturity": { "name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "description": { "name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "url": { "name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/exposures.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6342227, "relation_name": "DOUG_DEMO_V2.ANALYTICS.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as type,\n cast(null as {{ type_json() }}) as owner,\n cast(null as {{ type_string() }}) as maturity,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as description,\n cast(null as {{ type_string() }}) as url,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_array() }}) as tags,\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.model_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "unique_id": "model.dbt_artifacts.model_executions", "fqn": [ "dbt_artifacts", "sources", "model_executions" ], "alias": "model_executions", "checksum": { "name": "sha256", "checksum": "00aae46c1cbea3c8af251b4a237357156d86e22cebcbbe4b939fb7319036ebba" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about model executions. One row per model execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6228445, "relation_name": "DOUG_DEMO_V2.ANALYTICS.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n {% if target.type == 'bigquery' %}\n cast(null as {{ type_int() }}) as bytes_processed,\n {% endif %}\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_string() }}) as message,\n cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.snapshot_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "unique_id": "model.dbt_artifacts.snapshot_executions", "fqn": [ "dbt_artifacts", "sources", "snapshot_executions" ], "alias": "snapshot_executions", "checksum": { "name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about snapshot executions. One row per snapshot execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6295152, "relation_name": "DOUG_DEMO_V2.ANALYTICS.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_string() }}) as message,\n cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.models": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "unique_id": "model.dbt_artifacts.models", "fqn": [ "dbt_artifacts", "sources", "models" ], "alias": "models", "checksum": { "name": "sha256", "checksum": "5dc9021a99345640990cec2146093b91bb211ee5b97d165d468768df1d437daf" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "depends_on_nodes": { "name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "tags": { "name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/models.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.627627, "relation_name": "DOUG_DEMO_V2.ANALYTICS.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_array() }}) as depends_on_nodes,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_array() }}) as tags,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.seed_executions": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "unique_id": "model.dbt_artifacts.seed_executions", "fqn": [ "dbt_artifacts", "sources", "seed_executions" ], "alias": "seed_executions", "checksum": { "name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for data about seed executions. One row per seed execution.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "was_full_refresh": { "name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "thread_id": { "name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "status": { "name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "compile_started_at": { "name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "query_completed_at": { "name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "total_node_runtime": { "name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "rows_affected": { "name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "materialization": { "name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "message": { "name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adapter_response": { "name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.624694, "relation_name": "DOUG_DEMO_V2.ANALYTICS.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_boolean() }}) as was_full_refresh,\n cast(null as {{ type_string() }}) as thread_id,\n cast(null as {{ type_string() }}) as status,\n cast(null as {{ type_timestamp() }}) as compile_started_at,\n cast(null as {{ type_timestamp() }}) as query_completed_at,\n cast(null as {{ type_float() }}) as total_node_runtime,\n cast(null as {{ type_int() }}) as rows_affected,\n cast(null as {{ type_string() }}) as materialization,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_string() }}) as message,\n cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.dbt_artifacts.seeds": { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "unique_id": "model.dbt_artifacts.seeds", "fqn": [ "dbt_artifacts", "sources", "seeds" ], "alias": "seeds", "checksum": { "name": "sha256", "checksum": "55e82a7ace6b25fd550da716c0414cbc730fc733bdab74d12cc688ee52f44469" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": { "columns": true }, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "file_format": "delta", "use_anonymous_sproc": true, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": { "command_invocation_id": { "name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "node_id": { "name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "run_started_at": { "name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "database": { "name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "schema": { "name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "name": { "name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "package_name": { "name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "path": { "name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "checksum": { "name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "meta": { "name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "alias": { "name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "all_results": { "name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://models/sources/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": { "columns": "{{ target.name != \"databricks\" }}" }, "use_anonymous_sproc": true }, "created_at": 1697212557.6326537, "relation_name": "DOUG_DEMO_V2.ANALYTICS.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n select 1 as foo\n)\n\nselect\n cast(null as {{ type_string() }}) as command_invocation_id,\n cast(null as {{ type_string() }}) as node_id,\n cast(null as {{ type_timestamp() }}) as run_started_at,\n cast(null as {{ type_string() }}) as database,\n cast(null as {{ type_string() }}) as schema,\n cast(null as {{ type_string() }}) as name,\n cast(null as {{ type_string() }}) as package_name,\n cast(null as {{ type_string() }}) as path,\n cast(null as {{ type_string() }}) as checksum,\n cast(null as {{ type_json() }}) as meta,\n cast(null as {{ type_string() }}) as alias,\n cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json" ], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_customers_customer_key" ], "alias": "unique_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.2882862, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_customers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.tpch.stg_tpch_customers" }, "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('stg_tpch_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_customers_customer_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_customers_customer_key" ], "alias": "not_null_stg_tpch_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.2906187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_customers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_customers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.stg_tpch_customers", "attached_node": "model.tpch.stg_tpch_customers" }, "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_line_items_order_item_key" ], "alias": "unique_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.2928584, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_line_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.tpch.stg_tpch_line_items" }, "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('stg_tpch_line_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_line_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_line_items_order_item_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_line_items_order_item_key" ], "alias": "not_null_stg_tpch_line_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.2952344, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_line_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_line_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.stg_tpch_line_items", "attached_node": "model.tpch.stg_tpch_line_items" }, "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_nations_nation_key" ], "alias": "unique_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.2973962, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_nations", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.tpch.stg_tpch_nations" }, "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "nation_key", "model": "{{ get_where_subquery(ref('stg_tpch_nations')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_nations_nation_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_nations_nation_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_nations_nation_key" ], "alias": "not_null_stg_tpch_nations_nation_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.299498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_nations", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_nations" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "nation_key", "file_key_name": "models.stg_tpch_nations", "attached_node": "model.tpch.stg_tpch_nations" }, "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_orders_order_key" ], "alias": "unique_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3016548, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.tpch.stg_tpch_orders" }, "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('stg_tpch_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_orders_order_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_orders_order_key" ], "alias": "not_null_stg_tpch_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3037672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_key", "file_key_name": "models.stg_tpch_orders", "attached_node": "model.tpch.stg_tpch_orders" }, "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_part_suppliers_part_supplier_key" ], "alias": "unique_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3066545, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.tpch.stg_tpch_part_suppliers" }, "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_part_suppliers_part_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_part_suppliers_part_supplier_key" ], "alias": "not_null_stg_tpch_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3087842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_supplier_key", "file_key_name": "models.stg_tpch_part_suppliers", "attached_node": "model.tpch.stg_tpch_part_suppliers" }, "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_parts_part_key" ], "alias": "unique_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3108797, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_parts", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.tpch.stg_tpch_parts" }, "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('stg_tpch_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_parts_part_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_parts_part_key" ], "alias": "not_null_stg_tpch_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3130145, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_parts", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_parts" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_key", "file_key_name": "models.stg_tpch_parts", "attached_node": "model.tpch.stg_tpch_parts" }, "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_regions_region_key" ], "alias": "unique_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3151236, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_regions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.tpch.stg_tpch_regions" }, "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "region_key", "model": "{{ get_where_subquery(ref('stg_tpch_regions')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_regions_region_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_regions_region_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_regions_region_key" ], "alias": "not_null_stg_tpch_regions_region_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3175938, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_regions", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_regions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "region_key", "file_key_name": "models.stg_tpch_regions", "attached_node": "model.tpch.stg_tpch_regions" }, "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464", "fqn": [ "tpch", "staging", "tpch", "unique_stg_tpch_suppliers_supplier_key" ], "alias": "unique_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3197203, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.tpch.stg_tpch_suppliers" }, "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('stg_tpch_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_stg_tpch_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_stg_tpch_suppliers_supplier_key.sql", "original_file_path": "models/staging/tpch/_tpch__models.yml", "unique_id": "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "fqn": [ "tpch", "staging", "tpch", "not_null_stg_tpch_suppliers_supplier_key" ], "alias": "not_null_stg_tpch_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3218682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "stg_tpch_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.stg_tpch_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "supplier_key", "file_key_name": "models.stg_tpch_suppliers", "attached_node": "model.tpch.stg_tpch_suppliers" }, "test.tpch.unique_materialization_incremental_customer_key.325783f327": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_materialization_incremental_customer_key.325783f327", "fqn": [ "tpch", "demo_examples", "unique_materialization_incremental_customer_key" ], "alias": "unique_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.376722, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "materialization_incremental", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.materialization_incremental", "attached_node": "model.tpch.materialization_incremental" }, "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('materialization_incremental')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_materialization_incremental_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_materialization_incremental_customer_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "fqn": [ "tpch", "demo_examples", "not_null_materialization_incremental_customer_key" ], "alias": "not_null_materialization_incremental_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.379186, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "materialization_incremental", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.materialization_incremental" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.materialization_incremental", "attached_node": "model.tpch.materialization_incremental" }, "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.unique_use_variables_order_item_key.fb5576fe0e", "fqn": [ "tpch", "demo_examples", "unique_use_variables_order_item_key" ], "alias": "unique_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3813834, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "use_variables", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.use_variables" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.tpch.use_variables" }, "test.tpch.not_null_use_variables_order_item_key.c2bd602686": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('use_variables')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_use_variables_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_use_variables_order_item_key.sql", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "fqn": [ "tpch", "demo_examples", "not_null_use_variables_order_item_key" ], "alias": "not_null_use_variables_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.3840709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "use_variables", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.use_variables" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.use_variables", "attached_node": "model.tpch.use_variables" }, "test.tpch.unique_dim_customers_customer_key.ad8156656e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.unique_dim_customers_customer_key.ad8156656e", "fqn": [ "tpch", "marts", "core", "unique_dim_customers_customer_key" ], "alias": "unique_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.435789, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_customers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers" }, "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_customers_customer_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_customers_customer_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "fqn": [ "tpch", "marts", "core", "not_null_dim_customers_customer_key" ], "alias": "not_null_dim_customers_customer_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.4380646, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_customers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers" }, "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA" ], "column_name": "region", "model": "{{ get_where_subquery(ref('dim_customers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "resource_type": "test", "package_name": "tpch", "path": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "fqn": [ "tpch", "marts", "core", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA" ], "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc" }, "created_at": 1697212557.441015, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "language": "sql", "refs": [ { "name": "dim_customers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "region", "file_key_name": "models.dim_customers", "attached_node": "model.tpch.dim_customers" }, "test.tpch.unique_dim_parts_part_key.712df18d58": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_parts_part_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.unique_dim_parts_part_key.712df18d58", "fqn": [ "tpch", "marts", "core", "unique_dim_parts_part_key" ], "alias": "unique_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.4556596, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_parts", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_parts" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.tpch.dim_parts" }, "test.tpch.not_null_dim_parts_part_key.4358f880d9": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_key", "model": "{{ get_where_subquery(ref('dim_parts')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_parts_part_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_parts_part_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.not_null_dim_parts_part_key.4358f880d9", "fqn": [ "tpch", "marts", "core", "not_null_dim_parts_part_key" ], "alias": "not_null_dim_parts_part_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.457817, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_parts", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_parts" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_key", "file_key_name": "models.dim_parts", "attached_node": "model.tpch.dim_parts" }, "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770", "fqn": [ "tpch", "marts", "core", "unique_dim_suppliers_supplier_key" ], "alias": "unique_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.4599628, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.tpch.dim_suppliers" }, "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "supplier_key", "model": "{{ get_where_subquery(ref('dim_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_dim_suppliers_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_dim_suppliers_supplier_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "fqn": [ "tpch", "marts", "core", "not_null_dim_suppliers_supplier_key" ], "alias": "not_null_dim_suppliers_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.4624677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "dim_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.dim_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "supplier_key", "file_key_name": "models.dim_suppliers", "attached_node": "model.tpch.dim_suppliers" }, "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.unique_fct_order_items_order_item_key.4d6426a255", "fqn": [ "tpch", "marts", "core", "unique_fct_order_items_order_item_key" ], "alias": "unique_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.464605, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "fct_order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.tpch.fct_order_items" }, "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('fct_order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_fct_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_order_items_order_item_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "fqn": [ "tpch", "marts", "core", "not_null_fct_order_items_order_item_key" ], "alias": "not_null_fct_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.466727, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "fct_order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.fct_order_items", "attached_node": "model.tpch.fct_order_items" }, "test.tpch.unique_fct_orders_order_key.f5e7a90273": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "unique_fct_orders_order_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.unique_fct_orders_order_key.f5e7a90273", "fqn": [ "tpch", "marts", "core", "unique_fct_orders_order_key" ], "alias": "unique_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.468892, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders" }, "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_fct_orders_order_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_fct_orders_order_key.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "fqn": [ "tpch", "marts", "core", "not_null_fct_orders_order_key" ], "alias": "not_null_fct_orders_order_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.4710274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.fct_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders" }, "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": { "test_metadata": { "name": "relationships", "kwargs": { "to": "ref('dim_customers')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fct_orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_", "resource_type": "test", "package_name": "tpch", "path": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae.sql", "original_file_path": "models/marts/core/_core__models.yml", "unique_id": "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "fqn": [ "tpch", "marts", "core", "relationships_fct_orders_customer_key__customer_key__ref_dim_customers_" ], "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "error", "alias": "relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae" }, "created_at": 1697212557.4739175, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_01863b95ad98bb6a66c90da6f065c2ae\") }}", "language": "sql", "refs": [ { "name": "dim_customers", "package": null, "version": null }, { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "customer_key", "file_key_name": "models.fct_orders", "attached_node": "model.tpch.fct_orders" }, "test.tpch.unique_order_items_order_item_key.43a40b2837": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "unique_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_order_items_order_item_key.43a40b2837", "fqn": [ "tpch", "marts", "intermediate", "unique_order_items_order_item_key" ], "alias": "unique_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.518024, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.tpch.order_items" }, "test.tpch.not_null_order_items_order_item_key.44b9fa7311": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "order_item_key", "model": "{{ get_where_subquery(ref('order_items')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_order_items_order_item_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_order_items_order_item_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "fqn": [ "tpch", "marts", "intermediate", "not_null_order_items_order_item_key" ], "alias": "not_null_order_items_order_item_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.52035, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "order_items", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.order_items" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "order_item_key", "file_key_name": "models.order_items", "attached_node": "model.tpch.order_items" }, "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "unique_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "unique_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8", "fqn": [ "tpch", "marts", "intermediate", "unique_part_suppliers_part_supplier_key" ], "alias": "unique_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.5224538, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "model.tpch.part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.tpch.part_suppliers" }, "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "part_supplier_key", "model": "{{ get_where_subquery(ref('part_suppliers')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "not_null_part_suppliers_part_supplier_key", "resource_type": "test", "package_name": "tpch", "path": "not_null_part_suppliers_part_supplier_key.sql", "original_file_path": "models/marts/intermediate/intermediate.yml", "unique_id": "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "fqn": [ "tpch", "marts", "intermediate", "not_null_part_suppliers_part_supplier_key" ], "alias": "not_null_part_suppliers_part_supplier_key", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.524572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [ { "name": "part_suppliers", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "model.tpch.part_suppliers" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "part_supplier_key", "file_key_name": "models.part_suppliers", "attached_node": "model.tpch.part_suppliers" }, "test.tpch.source_not_null_stocks_fund_ownership_symbol.99c0478082": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "symbol", "model": "{{ get_where_subquery(source('stocks', 'fund_ownership')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_fund_ownership_symbol", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_fund_ownership_symbol.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_fund_ownership_symbol.99c0478082", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_fund_ownership_symbol" ], "alias": "source_not_null_stocks_fund_ownership_symbol", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6704493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "fund_ownership" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.fund_ownership" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "symbol", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_stocks_fund_ownership_report_date.02f3c41854": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "report_date", "model": "{{ get_where_subquery(source('stocks', 'fund_ownership')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_fund_ownership_report_date", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_fund_ownership_report_date.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_fund_ownership_report_date.02f3c41854", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_fund_ownership_report_date" ], "alias": "source_not_null_stocks_fund_ownership_report_date", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6729612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "fund_ownership" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.fund_ownership" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "report_date", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_stocks_history_symbol.b0644274db": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "symbol", "model": "{{ get_where_subquery(source('stocks', 'history')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_history_symbol", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_history_symbol.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_history_symbol.b0644274db", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_history_symbol" ], "alias": "source_not_null_stocks_history_symbol", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6761863, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "history" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.history" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "symbol", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_stocks_history_date.f4fea1f801": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "date", "model": "{{ get_where_subquery(source('stocks', 'history')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_history_date", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_history_date.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_history_date.f4fea1f801", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_history_date" ], "alias": "source_not_null_stocks_history_date", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.678401, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "history" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.history" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "date", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_stocks_insider_transactions_symbol.8f0e196176": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "symbol", "model": "{{ get_where_subquery(source('stocks', 'insider_transactions')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_insider_transactions_symbol", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_insider_transactions_symbol.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_insider_transactions_symbol.8f0e196176", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_insider_transactions_symbol" ], "alias": "source_not_null_stocks_insider_transactions_symbol", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6811361, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "insider_transactions" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.insider_transactions" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "symbol", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_stocks_summary_profile_symbol.fa45866d66": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "symbol", "model": "{{ get_where_subquery(source('stocks', 'summary_profile')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_stocks_summary_profile_symbol", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_stocks_summary_profile_symbol.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_not_null_stocks_summary_profile_symbol.fa45866d66", "fqn": [ "tpch", "staging", "stocks", "source_not_null_stocks_summary_profile_symbol" ], "alias": "source_not_null_stocks_summary_profile_symbol", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6839495, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "summary_profile" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.stocks.summary_profile" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "symbol", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_unique_stocks_summary_profile_symbol.2822f29ef3": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "symbol", "model": "{{ get_where_subquery(source('stocks', 'summary_profile')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_stocks_summary_profile_symbol", "resource_type": "test", "package_name": "tpch", "path": "source_unique_stocks_summary_profile_symbol.sql", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "test.tpch.source_unique_stocks_summary_profile_symbol.2822f29ef3", "fqn": [ "tpch", "staging", "stocks", "source_unique_stocks_summary_profile_symbol" ], "alias": "source_unique_stocks_summary_profile_symbol", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6860604, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "stocks", "summary_profile" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.stocks.summary_profile" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "symbol", "file_key_name": "sources.stocks", "attached_node": null }, "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_orders_o_orderkey" ], "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6884503, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "o_orderkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_orders_o_orderkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_orders_o_orderkey" ], "alias": "source_unique_tpch_orders_o_orderkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.690922, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "o_orderkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{{ get_where_subquery(source('tpch', 'orders')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_" ], "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b" }, "created_at": 1697212557.69321, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ], [ "tpch", "orders" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "o_custkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_customer_c_custkey" ], "alias": "source_not_null_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.6994982, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_customer_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_customer_c_custkey" ], "alias": "source_unique_tpch_customer_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7016299, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "c_custkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "c_nationkey", "model": "{{ get_where_subquery(source('tpch', 'customer')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_" ], "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7" }, "created_at": 1697212557.7037547, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_cust_995f2a0feb713559c0b1751b26b40aa7\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "customer" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.customer" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "c_nationkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_" ], "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c" }, "created_at": 1697212557.7098536, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "orders" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.orders", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "l_orderkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_" ], "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740" }, "created_at": 1697212557.7152736, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "l_partkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{{ get_where_subquery(source('tpch', 'lineitem')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_" ], "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292" }, "created_at": 1697212557.7209382, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "lineitem" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.lineitem" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "l_suppkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_nation_n_nationkey" ], "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.727294, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "n_nationkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_nation_n_nationkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_nation_n_nationkey" ], "alias": "source_unique_tpch_nation_n_nationkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.729462, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.nation" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "n_nationkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{{ get_where_subquery(source('tpch', 'nation')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_" ], "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039" }, "created_at": 1697212557.7316773, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ], [ "tpch", "nation" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region", "source.tpch.tpch.nation" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "n_regionkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_part_p_partkey" ], "alias": "source_not_null_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7377467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "p_partkey", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_part_p_partkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_part_p_partkey.30b171988e", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_part_p_partkey" ], "alias": "source_unique_tpch_part_p_partkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7399187, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "p_partkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": { "test_metadata": { "name": "accepted_range", "kwargs": { "min_value": 0, "max_value": 2000, "column_name": "p_retailprice", "model": "{{ get_where_subquery(source('tpch', 'part')) }}" }, "namespace": "dbt_utils" }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0", "resource_type": "test", "package_name": "tpch", "path": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "fqn": [ "tpch", "staging", "tpch", "dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0" ], "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008" }, "created_at": 1697212557.7420359, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_accepted_rang_867ec3ee807cbbcbc712784162a33008\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "p_retailprice", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_" ], "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8" }, "created_at": 1697212557.7525733, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "part" ], [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "ps_partkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{{ get_where_subquery(source('tpch', 'partsupp')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_" ], "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817" }, "created_at": 1697212557.758219, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ], [ "tpch", "partsupp" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.supplier", "source.tpch.tpch.partsupp" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "ps_suppkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_region_r_regionkey" ], "alias": "source_not_null_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7645226, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "r_regionkey", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_region_r_regionkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_region_r_regionkey" ], "alias": "source_unique_tpch_region_r_regionkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7666256, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "r_regionkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": { "test_metadata": { "name": "accepted_values", "kwargs": { "values": [ "AFRICA", "AMERICA", "ASIA", "EUROPE", "MIDDLE EAST" ], "column_name": "r_name", "model": "{{ get_where_subquery(source('tpch', 'region')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST", "resource_type": "test", "package_name": "tpch", "path": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "fqn": [ "tpch", "staging", "tpch", "source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST" ], "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24" }, "created_at": 1697212557.7687817, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_tpch_re_8cb7df798af7d7dff1ac8c857e950c24\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "region" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.region" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "r_name", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_supplier_s_suppkey" ], "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.774093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "s_suppkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_supplier_s_suppkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_supplier_s_suppkey" ], "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697212557.7761948, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch.supplier" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "s_suppkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": { "test_metadata": { "name": "relationships", "kwargs": { "to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{{ get_where_subquery(source('tpch', 'supplier')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "resource_type": "test", "package_name": "tpch", "path": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "fqn": [ "tpch", "staging", "tpch", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_" ], "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b" }, "created_at": 1697212557.7783318, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch", "nation" ], [ "tpch", "supplier" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_relationships", "macro.dbt.get_where_subquery" ], "nodes": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "s_nationkey", "file_key_name": "sources.tpch", "attached_node": null }, "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": { "test_metadata": { "name": "unique", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e", "fqn": [ "tpch", "staging", "tpch", "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey" ], "alias": "source_unique_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1697212557.78433, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_unique" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot", "attached_node": null }, "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": { "test_metadata": { "name": "not_null", "kwargs": { "column_name": "c_custkey", "model": "{{ get_where_subquery(source('tpch_snapshot', 'customer_snapshot_src')) }}" }, "namespace": null }, "database": "DOUG_DEMO_V2", "schema": "ANALYTICS_dbt_test__audit", "name": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "resource_type": "test", "package_name": "tpch", "path": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.sql", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "fqn": [ "tpch", "staging", "tpch", "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey" ], "alias": "source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey", "checksum": { "name": "none", "checksum": "" }, "config": { "enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0" }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "severity": "WARN" }, "created_at": 1697212557.786451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [], "sources": [ [ "tpch_snapshot", "customer_snapshot_src" ] ], "metrics": [], "depends_on": { "macros": [ "macro.dbt.test_not_null" ], "nodes": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "column_name": "c_custkey", "file_key_name": "sources.tpch_snapshot", "attached_node": null }, "model.upstream.int_segment__pages": { "database": "DOUG_DEMO_V2", "schema": "upstream", "name": "int_segment__pages", "resource_type": "model", "package_name": "upstream", "path": "", "original_file_path": "", "unique_id": "model.upstream.int_segment__pages", "fqn": [ "upstream", "int_segment__pages" ], "alias": "int_segment__pages", "checksum": { "name": "sha256", "checksum": "44acd6d86a25fe68b8c5f042b239114385bcc38f0d6a55b55e5354dddb0e2d6d" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "int_segment__pages", "schema": "upstream", "database": "DOUG_DEMO_V2" }, "created_at": 1697212557.7895985, "relation_name": "DOUG_DEMO_V2.upstream.int_segment__pages", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.upstream.int_segment__tracks": { "database": "DOUG_DEMO_V2", "schema": "upstream", "name": "int_segment__tracks", "resource_type": "model", "package_name": "upstream", "path": "", "original_file_path": "", "unique_id": "model.upstream.int_segment__tracks", "fqn": [ "upstream", "int_segment__tracks" ], "alias": "int_segment__tracks", "checksum": { "name": "sha256", "checksum": "19215376397a46389939ce0805cc6f3ebb5bb019cf8bb3114f0c9fdb5e7f6634" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "int_segment__tracks", "schema": "upstream", "database": "DOUG_DEMO_V2" }, "created_at": 1697212557.7896376, "relation_name": "DOUG_DEMO_V2.upstream.int_segment__tracks", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null }, "model.upstream.int_segment__link_clicked": { "database": "DOUG_DEMO_V2", "schema": "upstream", "name": "int_segment__link_clicked", "resource_type": "model", "package_name": "upstream", "path": "", "original_file_path": "", "unique_id": "model.upstream.int_segment__link_clicked", "fqn": [ "upstream", "int_segment__link_clicked" ], "alias": "int_segment__link_clicked", "checksum": { "name": "sha256", "checksum": "1fa5f1804941c0a644155fa066e5c99ddcf731028645b8b7556d69c9e5463ab8" }, "config": { "enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "alias": "int_segment__link_clicked", "schema": "upstream", "database": "DOUG_DEMO_V2" }, "created_at": 1697212557.7896633, "relation_name": "DOUG_DEMO_V2.upstream.int_segment__link_clicked", "raw_code": "", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "public", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null } }, "sources": { "source.tpch.stocks.fund_ownership": { "database": "doug_demo_v2", "schema": "stocks", "name": "fund_ownership", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.fund_ownership", "fqn": [ "tpch", "staging", "stocks", "stocks", "fund_ownership" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "fund_ownership", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing ownership of funds by various organizations.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol of the fund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "report_date": { "name": "report_date", "description": "The date when the ownership data was reported.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "organization": { "name": "organization", "description": "Name or identifier of the organization owning the fund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "pct_held": { "name": "pct_held", "description": "Percentage of the fund held by the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "position": { "name": "position", "description": "The specific position or rank of the organization based on fund ownership.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "value": { "name": "value", "description": "Value of the fund held by the organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "pct_change": { "name": "pct_change", "description": "Percentage change in the organization's fund ownership from the last report.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.fund_ownership", "created_at": 1697212557.6746986 }, "source.tpch.stocks.grade_history": { "database": "doug_demo_v2", "schema": "stocks", "name": "grade_history", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.grade_history", "fqn": [ "tpch", "staging", "stocks", "stocks", "grade_history" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "grade_history", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing the historical grading changes made by various firms for different symbols.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol for which the grade change has occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "epoch_grade_date": { "name": "epoch_grade_date", "description": "The date (in epoch time format) when the grade change was reported or made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "firm": { "name": "firm", "description": "Name or identifier of the firm that made the grade change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "to_grade": { "name": "to_grade", "description": "The new grade assigned to the symbol.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "from_grade": { "name": "from_grade", "description": "The previous grade of the symbol before the change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "action": { "name": "action", "description": "Specific action or reason leading to the grade change (e.g., \"upgrade\", \"downgrade\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.grade_history", "created_at": 1697212557.6749792 }, "source.tpch.stocks.history": { "database": "doug_demo_v2", "schema": "stocks", "name": "history", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.history", "fqn": [ "tpch", "staging", "stocks", "stocks", "history" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "history", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing the historical price data and related attributes for each symbol.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol for which the historical data is captured.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "date": { "name": "date", "description": "Date of the recorded historical data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "close": { "name": "close", "description": "Closing price of the symbol on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "volume": { "name": "volume", "description": "Trading volume for the symbol on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "open": { "name": "open", "description": "Opening price of the symbol on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "high": { "name": "high", "description": "Highest traded price of the symbol on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "low": { "name": "low", "description": "Lowest traded price of the symbol on the given date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "adjclose": { "name": "adjclose", "description": "Adjusted closing price, accounting for any corporate actions like splits or dividends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "dividends": { "name": "dividends", "description": "Dividend amount issued for the symbol on the given date, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "splits": { "name": "splits", "description": "Stock split ratio on the given date, if any (e.g., \"2:1\" for a 2-for-1 split).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.history", "created_at": 1697212557.6796448 }, "source.tpch.stocks.insider_transactions": { "database": "doug_demo_v2", "schema": "stocks", "name": "insider_transactions", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.insider_transactions", "fqn": [ "tpch", "staging", "stocks", "stocks", "insider_transactions" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "insider_transactions", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing transactions made by company insiders, capturing the nature, and value of the transactions.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol of the company for which the insider transaction has occurred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "shares": { "name": "shares", "description": "Number of shares involved in the insider transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "filer_url": { "name": "filer_url", "description": "URL pointing to details or profile of the insider (filer).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "transaction_text": { "name": "transaction_text", "description": "Textual description or summary of the insider transaction (e.g., \"Purchased\", \"Sold\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "filer_name": { "name": "filer_name", "description": "Full name of the insider (filer) executing the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "filer_relation": { "name": "filer_relation", "description": "Relation of the filer to the company (e.g., \"CEO\", \"Director\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "money_text": { "name": "money_text", "description": "Textual representation of the monetary value of the transaction (e.g., \"$1,000,000\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "start_date": { "name": "start_date", "description": "Date on which the insider transaction started or was executed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ownership": { "name": "ownership", "description": "Type or nature of ownership after the transaction (e.g., \"Direct\", \"Indirect\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "value": { "name": "value", "description": "Monetary value of the shares transacted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.insider_transactions", "created_at": 1697212557.6823094 }, "source.tpch.stocks.recommendation_trends": { "database": "doug_demo_v2", "schema": "stocks", "name": "recommendation_trends", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.recommendation_trends", "fqn": [ "tpch", "staging", "stocks", "stocks", "recommendation_trends" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "recommendation_trends", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing the recommendation trends for various stocks, indicating analyst consensus on buying, holding, or selling.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol of the company for which the recommendation trends are captured.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "period": { "name": "period", "description": "Time period for which the recommendations are given (e.g., \"Q1 2023\", \"Jan 2023\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "strong_buy": { "name": "strong_buy", "description": "Number of analysts giving a \"Strong Buy\" recommendation for the stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "buy": { "name": "buy", "description": "Number of analysts recommending to \"Buy\" the stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "hold": { "name": "hold", "description": "Number of analysts suggesting to \"Hold\" or maintain the current stock position.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "sell": { "name": "sell", "description": "Number of analysts recommending to \"Sell\" the stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "strong_sell": { "name": "strong_sell", "description": "Number of analysts giving a \"Strong Sell\" recommendation for the stock.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.recommendation_trends", "created_at": 1697212557.6825469 }, "source.tpch.stocks.sec_filings": { "database": "doug_demo_v2", "schema": "stocks", "name": "sec_filings", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.sec_filings", "fqn": [ "tpch", "staging", "stocks", "stocks", "sec_filings" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "sec_filings", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "Table detailing the various SEC filings associated with different companies.", "columns": { "symbol": { "name": "symbol", "description": "Ticker symbol of the company for which the SEC filing pertains.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "date": { "name": "date", "description": "The textual representation of the date on which the SEC filing was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "epoch_date": { "name": "epoch_date", "description": "The date (in epoch time format) of the SEC filing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "type": { "name": "type", "description": "Type or category of the SEC filing (e.g., \"10-K\", \"10-Q\", \"8-K\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "title": { "name": "title", "description": "Brief title or description of the specific SEC filing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "edgar_url": { "name": "edgar_url", "description": "URL link to the specific filing on the EDGAR database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.sec_filings", "created_at": 1697212557.6827517 }, "source.tpch.stocks.summary_profile": { "database": "doug_demo_v2", "schema": "stocks", "name": "summary_profile", "resource_type": "source", "package_name": "tpch", "path": "models/staging/stocks/_stocks__sources.yml", "original_file_path": "models/staging/stocks/_stocks__sources.yml", "unique_id": "source.tpch.stocks.summary_profile", "fqn": [ "tpch", "staging", "stocks", "stocks", "summary_profile" ], "source_name": "stocks", "source_description": "", "loader": "", "identifier": "summary_profile", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "General information and summary details about a company or entity.", "columns": { "address1": { "name": "address1", "description": "The primary street address of the company or entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "city": { "name": "city", "description": "The city where the company or entity is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "state": { "name": "state", "description": "The state or province where the company or entity is located.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "zip": { "name": "zip", "description": "The postal code of the company or entity's location.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "country": { "name": "country", "description": "The country where the company or entity is headquartered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "phone": { "name": "phone", "description": "The main contact phone number for the company or entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "website": { "name": "website", "description": "The official website URL of the company or entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "industry": { "name": "industry", "description": "The specific industry in which the company or entity operates.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "sector": { "name": "sector", "description": "The broader sector or category of the economy in which the company or entity belongs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "long_business_summary": { "name": "long_business_summary", "description": "A detailed description or overview of the company or entity's primary operations and business activities.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "full_time_employees": { "name": "full_time_employees", "description": "The number of full-time employees currently employed by the company or entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "symbol": { "name": "symbol", "description": "The unique ticker symbol used to represent the company or entity in the stock market.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "address2": { "name": "address2", "description": "Any secondary street address or suite number associated with the company or entity.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.stocks.summary_profile", "created_at": 1697212557.6872218 }, "source.tpch.tpch.orders": { "database": "doug_demo_v2", "schema": "tpch", "name": "orders", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.orders", "fqn": [ "tpch", "staging", "tpch", "tpch", "orders" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "orders", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main order tracking table", "columns": { "o_orderkey": { "name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_custkey": { "name": "o_custkey", "description": "Foreign Key to C_CUSTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_orderstatus": { "name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_totalprice": { "name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_orderdate": { "name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_orderpriority": { "name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_clerk": { "name": "o_clerk", "description": "id of the clerk", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_shippriority": { "name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "o_comment": { "name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.orders", "created_at": 1697212557.697994 }, "source.tpch.tpch.customer": { "database": "doug_demo_v2", "schema": "tpch", "name": "customer", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.customer", "fqn": [ "tpch", "staging", "tpch", "tpch", "customer" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "customer", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main customer table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "customer id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.customer", "created_at": 1697212557.7086384 }, "source.tpch.tpch.lineitem": { "database": "doug_demo_v2", "schema": "tpch", "name": "lineitem", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.lineitem", "fqn": [ "tpch", "staging", "tpch", "tpch", "lineitem" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "lineitem", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main lineitem table", "columns": { "l_orderkey": { "name": "l_orderkey", "description": "Foreign Key to O_ORDERKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_partkey": { "name": "l_partkey", "description": "Foreign key to P_PARTKEY, first part of the compound Foreign Key to (PS_PARTKEY,PS_SUPPKEY) with L_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_suppkey": { "name": "l_suppkey", "description": "Foreign key to S_SUPPKEY, second part of the compound Foreign Key to (PS_PARTKEY, PS_SUPPKEY) with L_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_linenumber": { "name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_quantity": { "name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_extendedprice": { "name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_discount": { "name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_tax": { "name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_returnflag": { "name": "l_returnflag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_linestatus": { "name": "l_linestatus", "description": "status code of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_shipdate": { "name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_commitdate": { "name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_receiptdate": { "name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_shipinstruct": { "name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_shipmode": { "name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "l_comment": { "name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.lineitem", "created_at": 1697212557.7259765 }, "source.tpch.tpch.nation": { "database": "doug_demo_v2", "schema": "tpch", "name": "nation", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.nation", "fqn": [ "tpch", "staging", "tpch", "tpch", "nation" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "nation", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "nation mapping", "columns": { "n_nationkey": { "name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "n_name": { "name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "n_regionkey": { "name": "n_regionkey", "description": "Foreign Key to R_REGIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "n_comment": { "name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.nation", "created_at": 1697212557.736523 }, "source.tpch.tpch.part": { "database": "doug_demo_v2", "schema": "tpch", "name": "part", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.part", "fqn": [ "tpch", "staging", "tpch", "tpch", "part" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "part", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part table", "columns": { "p_partkey": { "name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_name": { "name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_mfgr": { "name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_brand": { "name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_type": { "name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_size": { "name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_container": { "name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_retailprice": { "name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "p_comment": { "name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.part", "created_at": 1697212557.7513041 }, "source.tpch.tpch.partsupp": { "database": "doug_demo_v2", "schema": "tpch", "name": "partsupp", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.partsupp", "fqn": [ "tpch", "staging", "tpch", "tpch", "partsupp" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "partsupp", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": { "warn_after": { "count": 24, "period": "hour" }, "error_after": { "count": 48, "period": "hour" }, "filter": null }, "external": null, "description": "main part supplier table", "columns": { "ps_partkey": { "name": "ps_partkey", "description": "Foreign Key to P_PARTKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ps_suppkey": { "name": "ps_suppkey", "description": "Foreign Key to S_SUPPKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ps_availqty": { "name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ps_supplycost": { "name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "ps_comment": { "name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.partsupp", "created_at": 1697212557.762978 }, "source.tpch.tpch.region": { "database": "doug_demo_v2", "schema": "tpch", "name": "region", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.region", "fqn": [ "tpch", "staging", "tpch", "tpch", "region" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "region", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "region mapping", "columns": { "r_regionkey": { "name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "r_name": { "name": "r_name", "description": "region name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "r_comment": { "name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.region", "created_at": 1697212557.7725613 }, "source.tpch.tpch.supplier": { "database": "doug_demo_v2", "schema": "tpch", "name": "supplier", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch.supplier", "fqn": [ "tpch", "staging", "tpch", "tpch", "supplier" ], "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)", "loader": "", "identifier": "supplier", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": "_etl_updated_timestamp", "freshness": null, "external": null, "description": "main supplier table", "columns": { "s_suppkey": { "name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_name": { "name": "s_name", "description": "id of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_address": { "name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_nationkey": { "name": "s_nationkey", "description": "Foreign Key to N_NATIONKEY", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_phone": { "name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_acctbal": { "name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "s_comment": { "name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "doug_demo_v2.tpch.supplier", "created_at": 1697212557.7830849 }, "source.tpch.tpch_snapshot.customer_snapshot_src": { "database": "analytics", "schema": "dbt_mwinkler", "name": "customer_snapshot_src", "resource_type": "source", "package_name": "tpch", "path": "models/staging/tpch/_tpch__sources.yml", "original_file_path": "models/staging/tpch/_tpch__sources.yml", "unique_id": "source.tpch.tpch_snapshot.customer_snapshot_src", "fqn": [ "tpch", "staging", "tpch", "tpch_snapshot", "customer_snapshot_src" ], "source_name": "tpch_snapshot", "source_description": "", "loader": "", "identifier": "customer_snapshot_src", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": null, "description": "slowly changing dimension table", "columns": { "c_custkey": { "name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_name": { "name": "c_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_address": { "name": "c_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_nationkey": { "name": "c_nationkey", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_phone": { "name": "c_phone", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_acctbal": { "name": "c_acctbal", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_mktsegment": { "name": "c_mktsegment", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] }, "c_comment": { "name": "c_comment", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.dbt_mwinkler.customer_snapshot_src", "created_at": 1697212557.7876172 }, "source.tpch.deutsche_boerse.trading_data": { "database": "analytics", "schema": "boerse", "name": "trading_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/external_sources.yml", "original_file_path": "models/demo_examples/external_sources.yml", "unique_id": "source.tpch.deutsche_boerse.trading_data", "fqn": [ "tpch", "demo_examples", "deutsche_boerse", "trading_data" ], "source_name": "deutsche_boerse", "source_description": "This is an example of using external sources", "loader": "", "identifier": "trading_data", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@boerse", "file_format": "(type=csv field_delimiter=',' skip_header=1)", "row_format": null, "tbl_properties": null, "partitions": [ { "name": "source_file_name", "data_type": "varchar", "expression": "metadata$filename" } ], "auto_refresh": false }, "description": "The Deutsche Börse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.\n", "columns": { "ISIN": { "name": "ISIN", "description": "ISIN of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "MarketSegment": { "name": "MarketSegment", "description": "The product market segment, following the convention on http://www.eurexchange.com", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "UnderlyingSymbol": { "name": "UnderlyingSymbol", "description": "The underlying security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "UnderlyingISIN": { "name": "UnderlyingISIN", "description": "ISIN of any underlying security\t", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "Currency": { "name": "Currency", "description": "Currency in which the product is traded\t(ISO 4127)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "SecurityType": { "name": "SecurityType", "description": "Type of instrument", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "MaturityDate": { "name": "MaturityDate", "description": "Maturity date of the security", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "StrikePrice": { "name": "StrikePrice", "description": "Strike price", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [] }, "PutOrCall": { "name": "PutOrCall", "description": "Type of option (string: PUT or CALL)", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "MLEG": { "name": "MLEG", "description": "Identifies multi-leg options", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "ContractGenerationNumber": { "name": "ContractGenerationNumber", "description": "The generation number for options contracts", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "SecurityID": { "name": "SecurityID", "description": "Unique identifier for each contract", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "Date": { "name": "Date", "description": "Date of trading period", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": [] }, "Time": { "name": "Time", "description": "Minute of trading to which this entry relates", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "tags": [] }, "StartPrice": { "name": "StartPrice", "description": "Trading price at the start of period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [] }, "MaxPrice": { "name": "MaxPrice", "description": "Maximum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [] }, "MinPrice": { "name": "MinPrice", "description": "Minimum price over the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [] }, "EndPrice": { "name": "EndPrice", "description": "Trading price at the end of the period", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "tags": [] }, "NumberOfContracts": { "name": "NumberOfContracts", "description": "Number of contracts traded during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": [] }, "NumberOfTrades": { "name": "NumberOfTrades", "description": "Number of distinct trades during the period", "meta": {}, "data_type": "INT", "constraints": [], "quote": null, "tags": [] } }, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics.boerse.trading_data", "created_at": 1697212557.787918 }, "source.tpch.test_eqrx_s3.dummy_data": { "database": "DOUG_DEMO_V2", "schema": "dbt_dguthrie", "name": "dummy_data", "resource_type": "source", "package_name": "tpch", "path": "models/demo_examples/demo_examples.yml", "original_file_path": "models/demo_examples/demo_examples.yml", "unique_id": "source.tpch.test_eqrx_s3.dummy_data", "fqn": [ "tpch", "demo_examples", "test_eqrx_s3", "dummy_data" ], "source_name": "test_eqrx_s3", "source_description": "", "loader": "", "identifier": "dummy_data", "quoting": { "database": null, "schema": null, "identifier": null, "column": null }, "loaded_at_field": null, "freshness": { "warn_after": { "count": null, "period": null }, "error_after": { "count": null, "period": null }, "filter": null }, "external": { "location": "@eqrx_test", "file_format": "( type = csv )", "row_format": null, "tbl_properties": null, "partitions": null }, "description": "Testing EQRx setup", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": { "enabled": true }, "patch_path": null, "unrendered_config": {}, "relation_name": "DOUG_DEMO_V2.dbt_dguthrie.dummy_data", "created_at": 1697212557.7881105 } }, "macros": { "macro.tpch.omit_soft_deletions": { "name": "omit_soft_deletions", "resource_type": "macro", "package_name": "tpch", "path": "macros/omit_soft_deletions.sql", "original_file_path": "macros/omit_soft_deletions.sql", "unique_id": "macro.tpch.omit_soft_deletions", "macro_sql": "{% macro omit_soft_deletions(table, columns) %}\n\n select {{ ', '.join(columns) }}\n from {{ table }}\n where not is_deleted\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4161367, "supported_languages": null }, "macro.tpch.grant_all_on_schemas": { "name": "grant_all_on_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/grant_all_on_schemas.sql", "original_file_path": "macros/grant_all_on_schemas.sql", "unique_id": "macro.tpch.grant_all_on_schemas", "macro_sql": "{% macro grant_all_on_schemas(schemas, role) %}\n {% for schema in schemas %}\n grant usage on schema {{ schema }} to role {{ role }};\n grant select on all tables in schema {{ schema }} to role {{ role }};\n grant select on all views in schema {{ schema }} to role {{ role }};\n grant select on future tables in schema {{ schema }} to role {{ role }};\n grant select on future views in schema {{ schema }} to role {{ role }};\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of how to grant permissions on schema", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "schemas", "type": "STRING", "description": "name of the schema you would like to give the role access to" }, { "name": "role", "type": "STRING", "description": "user/role within your warehouse you would like to give dbt access to" } ], "created_at": 1697212557.5361788, "supported_languages": null }, "macro.tpch.block_on_tests": { "name": "block_on_tests", "resource_type": "macro", "package_name": "tpch", "path": "macros/block_on_tests.sql", "original_file_path": "macros/block_on_tests.sql", "unique_id": "macro.tpch.block_on_tests", "macro_sql": "{% macro block_on_tests(list_of_test_macros) %}\n\n {% if execute %}\n {% for test in list_of_test_macros %}\n {% set results = run_query(test) %}\n {% if results[0][0] == 0 %}\n -- TEST {{loop.index}}: PASS\n {% else %}\n {% set msg %} TEST {{loop.index}}: FAIL {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {% endfor %}\n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4189062, "supported_languages": null }, "macro.tpch.generate_base_models": { "name": "generate_base_models", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_base_models.sql", "original_file_path": "macros/generate_base_models.sql", "unique_id": "macro.tpch.generate_base_models", "macro_sql": "{% macro generate_base_models(source_name, exclude=[], include=[], leading_commas=False, case_sensitive_cols=False) %}\n\n {%- if include | length > 0 and exclude | length > 0 -%}\n -- You cannot use both include and exclude arguments\n {%- elif execute -%}\n\n {% set sources = graph.sources.values() | selectattr('source_name', '==', source_name) %}\n\n {%- if exclude | length > 0 -%}\n {%- set sources = sources | rejectattr('name', 'in', exclude) -%}\n {%- endif -%}\n\n {%- if include | length > 0 -%}\n {%- set sources = sources | selectattr('name', 'in', include) -%}\n {%- endif -%}\n\n {%- for source in sources -%}\n\n -- ______________________ stg_{{ source_name }}__{{ source.name }}.sql ______________________\n\n {{ codegen.generate_base_model(source_name, source.name, leading_commas, case_sensitive_cols) }}\n\n {%- endfor -%}\n\n -- ______________________ END ______________________\n\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.generate_base_model" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.421542, "supported_languages": null }, "macro.tpch.limit_data_in_dev": { "name": "limit_data_in_dev", "resource_type": "macro", "package_name": "tpch", "path": "macros/limit_data_in_dev.sql", "original_file_path": "macros/limit_data_in_dev.sql", "unique_id": "macro.tpch.limit_data_in_dev", "macro_sql": "{% macro limit_data_in_dev(filter_column_name, lookback_days=7) %}\n\n{% if target.name == 'dev' %}\n\n\nwhere {{ filter_column_name }} >= dateadd('day', -{{ lookback_days }}, current_timestamp)\n{% endif %}\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to show conditional logic to limit data when working in dev.", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "filter_column_name", "type": "DATE", "description": "The name of the column you want to convert" }, { "name": "lookback_days", "type": "NUMBER", "description": "Number of lookback days. Defaults to 7." } ], "created_at": 1697212557.53287, "supported_languages": null }, "macro.tpch.standard_account_fields": { "name": "standard_account_fields", "resource_type": "macro", "package_name": "tpch", "path": "macros/standard_account_fields.sql", "original_file_path": "macros/standard_account_fields.sql", "unique_id": "macro.tpch.standard_account_fields", "macro_sql": "{% macro standard_account_fields() %}\n\n{# How to use\n\nselect {{ standard_account_fields() }}\nfrom {{ ref('fct_orders') }}\n\n#}\n\n{%- set return_fields = [\"gross_item_sales_amount\", \n \"item_discount_amount\",\n \"item_tax_amount\",\n \"net_item_sales_amount\"]\n -%}\n\n {%- for field in return_fields %}\n {{ field }}{% if not loop.last %},{% endif %}{% endfor -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of using a macro to standardize the fiels within the analysis", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "return_fields", "type": "STRING", "description": "fields you would like returned for analysis" } ], "created_at": 1697212557.5393765, "supported_languages": null }, "macro.tpch._select_extremes": { "name": "_select_extremes", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch._select_extremes", "macro_sql": "{% macro _select_extremes(fn, table_name, key_columns, timestamp_column='loaded_at') %}\nselect a.* from {{ table_name }} as a\ninner join (\n select {{ ','.join(key_columns) }}, {{ fn }}({{ timestamp_column }}) as last_update\n from {{ table_name }}\n group by {{ ','.join(key_columns) }}\n) as b on (\n {% for key_column in key_columns %}\n a.{{ key_column }} = b.{{ key_column }}\n and\n {% endfor %}\n a.{{ timestamp_column }} = b.last_update\n)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4249384, "supported_languages": null }, "macro.tpch.select_latest": { "name": "select_latest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_latest", "macro_sql": "{% macro select_latest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('max', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4254258, "supported_languages": null }, "macro.tpch.select_earliest": { "name": "select_earliest", "resource_type": "macro", "package_name": "tpch", "path": "macros/select_extremes.sql", "original_file_path": "macros/select_extremes.sql", "unique_id": "macro.tpch.select_earliest", "macro_sql": "{% macro select_earliest(table_name, key_columns, timestamp_column='loaded_at') %}\n{{ _select_extremes('min', table_name, key_columns, timestamp_column) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.tpch._select_extremes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4258745, "supported_languages": null }, "macro.tpch.money": { "name": "money", "resource_type": "macro", "package_name": "tpch", "path": "macros/convert_money.sql", "original_file_path": "macros/convert_money.sql", "unique_id": "macro.tpch.money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to convert a column to consistent precision", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "col", "type": "INTEGER", "description": "column getting converted to decimal(16,4)" } ], "created_at": 1697212557.5338616, "supported_languages": null }, "macro.tpch.drop_ci_schemas": { "name": "drop_ci_schemas", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_ci_schemas.sql", "original_file_path": "macros/drop_ci_schemas.sql", "unique_id": "macro.tpch.drop_ci_schemas", "macro_sql": "{% macro drop_ci_schemas(database=target.database, dryrun=True) %}\n\n {% set all_schemas_to_drop = [] %}\n\n {% set drop_schema_sql %}\n\n {% set find_schemas_sql %}\n SELECT SCHEMA_NAME\n FROM {{ database | upper }}.INFORMATION_SCHEMA.SCHEMATA\n WHERE SCHEMA_NAME LIKE 'DBT_CLOUD_PR_%';\n {% endset %}\n\n {% set schemas_to_drop = run_query(find_schemas_sql) %}\n\n {% for row in schemas_to_drop %}\n DROP SCHEMA {{ database | upper }}.{{ row[0] | upper }};\n {% do all_schemas_to_drop.append('{}.{}'.format(database.upper(), row[0].upper())) %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_schemas_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_schemas_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_schemas_to_drop), info=True) %}\n {% do run_query(drop_schema_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No schemas to drop!', info=True) %}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4295173, "supported_languages": null }, "macro.tpch.drop_old_nodes": { "name": "drop_old_nodes", "resource_type": "macro", "package_name": "tpch", "path": "macros/drop_old_nodes.sql", "original_file_path": "macros/drop_old_nodes.sql", "unique_id": "macro.tpch.drop_old_nodes", "macro_sql": "{% macro drop_old_nodes(dryrun=True) %}\n\n {% set nodes = graph.nodes.values() | list %}\n\n {% set dbs = nodes | map(attribute='database') | unique %}\n\n {% set all_tables_to_drop = [] %}\n\n {% set drop_table_sql %}\n\n {% for db in dbs %}\n\n -- Database: {{ db }}\n\n {% set schemas = nodes | selectattr('database', '==', db) | map(attribute='schema') | unique %}\n\n {% for schema in schemas %}\n\n -- Schema: {{ schema }}\n\n {% set model_names = nodes | selectattr('database', '==', db) | selectattr('schema', '==', schema) | map(attribute='name') | map('upper') | join(\"', '\") %}\n\n {% set find_tables_sql %}\n USE DATABASE {{ db }};\n SELECT DISTINCT TABLE_NAME, TABLE_TYPE\n FROM INFORMATION_SCHEMA.TABLES\n WHERE TABLE_SCHEMA = '{{ schema | upper }}'\n AND TABLE_TYPE IN ('VIEW', 'BASE TABLE')\n AND TABLE_NAME NOT IN ('{{ model_names }}');\n {% endset %}\n {% set tables_to_drop = run_query(find_tables_sql) %}\n\n {% for row in tables_to_drop %}\n DROP {% if row[1] == 'BASE TABLE' %}TABLE{% else %}VIEW{% endif %} {{ db | upper }}.{{ schema | upper }}.{{ row[0] }};\n {% do all_tables_to_drop.append('{}.{}.{}'.format(db.upper(), schema.upper(), row[0].upper())) %}\n {% endfor %}\n\n\n {% endfor %}\n {% endfor %}\n\n {% endset %}\n\n {% if all_tables_to_drop %}\n {% if dryrun %}\n {% do log('*NOT* dropping {}'.format(all_tables_to_drop), info=True) %}\n {% else %}\n {% do log('Dropping: {} ...'.format(all_tables_to_drop), info=True) %}\n {% do run_query(drop_table_sql) %}\n {% do log('Done.', info=True) %}\n {% endif %}\n {% else %}\n {% do log('No tables to drop!', info=True) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4359598, "supported_languages": null }, "macro.tpch.generate_models_yaml": { "name": "generate_models_yaml", "resource_type": "macro", "package_name": "tpch", "path": "macros/generate_models_yaml.sql", "original_file_path": "macros/generate_models_yaml.sql", "unique_id": "macro.tpch.generate_models_yaml", "macro_sql": "{% macro generate_models_yaml(model_names) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n\n{% for model_name in model_names %}\n\n {% do model_yaml.append(' - name: ' ~ model_name | lower) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% do model_yaml.append(' columns:') %}\n\n {% set relation=ref(model_name) %}\n {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n {% for column in columns %}\n {% do model_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% endfor %}\n\n {% do model_yaml.append('') %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4391053, "supported_languages": null }, "macro.tpch.create_udfs": { "name": "create_udfs", "resource_type": "macro", "package_name": "tpch", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.tpch.create_udfs", "macro_sql": "{% macro create_udfs() %}\n\n{% do run_query(create_area_of_circle()) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.tpch.create_area_of_circle" ] }, "description": "An example of how to create UDFs via macros", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1697212557.5343723, "supported_languages": null }, "macro.tpch.create_area_of_circle": { "name": "create_area_of_circle", "resource_type": "macro", "package_name": "tpch", "path": "macros/udf_area_of_circle.sql", "original_file_path": "macros/udf_area_of_circle.sql", "unique_id": "macro.tpch.create_area_of_circle", "macro_sql": "{% macro create_area_of_circle() %}\n\nuse database {{target.database}};\n\ndrop function if exists {{target.schema}}.area_of_circle(float);\n\ncreate function {{target.schema}}.area_of_circle(radius float)\n returns float\n as\n $$\n pi() README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch radius README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch radius\n $$\n ;\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "Continuation of UDF example", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1697212557.5372362, "supported_languages": null }, "macro.tpch.test_all_values_gte_zero": { "name": "test_all_values_gte_zero", "resource_type": "macro", "package_name": "tpch", "path": "macros/test_all_values_gte_zero.sql", "original_file_path": "macros/test_all_values_gte_zero.sql", "unique_id": "macro.tpch.test_all_values_gte_zero", "macro_sql": "{% macro test_all_values_gte_zero(table, column) %}\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref(table) }} where {{ column }} < 0\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "Macro to ensure values are greater than zero -- perfect for data tests", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "table", "type": "STRING", "description": "name of the table being tested" }, { "name": "column", "type": "STRING", "description": "name of the column being tested" } ], "created_at": 1697212557.5383587, "supported_languages": null }, "macro.tpch.unit_test_mode": { "name": "unit_test_mode", "resource_type": "macro", "package_name": "tpch", "path": "macros/unit_test_mode.sql", "original_file_path": "macros/unit_test_mode.sql", "unique_id": "macro.tpch.unit_test_mode", "macro_sql": "{% macro unit_test_mode() %}\n \n {% if var is not defined %}\n {{ return(False) }}\n\n {% elif var('test') == 'true' %}\n {{ return(True) }}\n\n {% else %}\n {{ return(False) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "An example of how to create a unit test", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [], "created_at": 1697212557.536712, "supported_languages": null }, "macro.tpch.cents_to_dollars": { "name": "cents_to_dollars", "resource_type": "macro", "package_name": "tpch", "path": "macros/cents_to_dollars.sql", "original_file_path": "macros/cents_to_dollars.sql", "unique_id": "macro.tpch.cents_to_dollars", "macro_sql": "{% macro cents_to_dollars(column_name, precision=2) -%}\n ({{ column_name }} / 100)::numeric(16, {{ precision }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to convert cents to dollars", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "tpch://macros/macro.yml", "arguments": [ { "name": "column_name", "type": "STRING", "description": "The name of the column you want to convert" }, { "name": "precision", "type": "INTEGER", "description": "Number of decimal places. Defaults to 2." } ], "created_at": 1697212557.531365, "supported_languages": null }, "macro.tpch.share_view": { "name": "share_view", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/share_view.sql", "original_file_path": "macros/snowflake/share_view.sql", "unique_id": "macro.tpch.share_view", "macro_sql": "{% macro share_view() %}\n\n{#\n\nUsage:\n\nThis would be used as a post-hook in the config block at the top of a model\n\nExample:\n\n{{ config(post_hook='{{ share_view() }}') }}\n\n#}\n\n -- Only run in production\n {% if target.name == 'prod' %}\n\n {% set sql %}\n -- Create a table with all data to be shared\n create or replace table share_db.private.{{ this.name }} as\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ this }};\n \n grant select on share_db.private.{{ this.name }} to role transformer;\n\n -- Create a secure view which selects based on current account\n create or replace secure view share_db.public.{{ this.name }} as\n select a.*\n from share_db.private.{{ this.name }} as a\n inner join share_db.private.company_shares as b on (\n a.customer_id = b.customer_id\n and b.snowflake_account = current_account()\n );\n \n grant select on share_db.public.{{ this.name }} to share customer_share;\n {% endset %}\n\n {% set table = run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4435127, "supported_languages": null }, "macro.tpch.dont_do_this": { "name": "dont_do_this", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/dont_do_this.sql", "original_file_path": "macros/snowflake/dont_do_this.sql", "unique_id": "macro.tpch.dont_do_this", "macro_sql": "{% macro dont_do_this() %}\n\n{% set sql %}\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ ref('dim_customers') }}\nlimit 10\n\n{% endset %}\n\n{% set results = run_query(sql).rows %}\n\n{% for result in results %}\n\n {{ log(result, info=True) }}\n\n{% endfor %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4445386, "supported_languages": null }, "macro.tpch.dbt_snowflake_validate_get_incremental_strategy": { "name": "dbt_snowflake_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n {#-- Find and validate the incremental strategy #}\n {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n {% set invalid_strategy_msg -%}\n Invalid incremental strategy provided: {{ strategy }}\n Expected one of: 'merge', 'delete+insert', 'insert_overwrite'\n {%- endset %}\n {% if strategy not in ['merge', 'delete+insert', 'insert_overwrite'] %}\n {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n {% endif %}\n\n {% do return(strategy) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4484735, "supported_languages": null }, "macro.tpch.dbt_snowflake_get_incremental_sql": { "name": "dbt_snowflake_get_incremental_sql", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n {% if strategy == 'merge' %}\n {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n {% elif strategy == 'delete+insert' %}\n {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n {% elif strategy == 'insert_overwrite' %}\n {% do return(get_insert_overwrite_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n {% else %}\n {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4499514, "supported_languages": null }, "macro.tpch.incremental_validate_delete_target_not_in_source": { "name": "incremental_validate_delete_target_not_in_source", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.incremental_validate_delete_target_not_in_source", "macro_sql": "{% macro incremental_validate_delete_target_not_in_source(delete_target_not_in_source, strategy, unique_key, default) %}\n \n {% if not delete_target_not_in_source %}\n {{ return(False) }}\n {% elif delete_target_not_in_source and strategy not in ['merge', 'delete+insert'] %}\n {% do exceptions.raise_compiler_error('invalid strategy for delete_target_not_in_source, must be one of: [merge, delete+insert]') %}\n {% elif delete_target_not_in_source and not unique_key %}\n {% do exceptions.raise_compiler_error('invalid configuration, must specify a unique_key to when delete_target_not_in_source is set to True') %}\n {% else %}\n {{ return(True) }}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4511058, "supported_languages": null }, "macro.tpch.delete_from_target_not_in_source": { "name": "delete_from_target_not_in_source", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.delete_from_target_not_in_source", "macro_sql": "{% macro delete_from_target_not_in_source(tmp_relation, target_relation, unique_key) %}\n \n delete from {{ target_relation }} where {{ unique_key }} not in (select {{ unique_key }} from {{ tmp_relation }} );\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4515367, "supported_languages": null }, "macro.tpch.materialization_incremental_custom_snowflake": { "name": "materialization_incremental_custom_snowflake", "resource_type": "macro", "package_name": "tpch", "path": "macros/snowflake/materializations/incremental_custom.sql", "original_file_path": "macros/snowflake/materializations/incremental_custom.sql", "unique_id": "macro.tpch.materialization_incremental_custom_snowflake", "macro_sql": "{% materialization incremental_custom, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {%- set unique_key = config.get('unique_key') -%}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n {% set target_relation = this %}\n {% set existing_relation = load_relation(this) %}\n {% set tmp_relation = make_temp_relation(this) %}\n\n {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n {% set delete_target_not_in_source = incremental_validate_delete_target_not_in_source(\n delete_target_not_in_source = config.get('delete_target_not_in_source'), \n strategy=strategy,\n unique_key=unique_key,\n default=False\n )\n %}\n\n {{ run_hooks(pre_hooks) }}\n\n {% if existing_relation is none %}\n {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n {% elif existing_relation.is_view %}\n {#-- Can't overwrite a view with a table - we must drop --#}\n {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n {% do adapter.drop_relation(existing_relation) %}\n {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n {% elif full_refresh_mode %}\n {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n {% else %}\n {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n {% do adapter.expand_target_column_types(\n from_relation=tmp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n {% set delete_sql = delete_from_target_not_in_source(tmp_relation, target_relation, unique_key) %}\n {% endif %}\n\n {%- call statement('main') -%}\n {{ build_sql }}\n {% if delete_target_not_in_source %}\n {{ delete_sql }}\n {% endif %}\n {%- endcall -%}\n\n {{ run_hooks(post_hooks) }}\n\n {% set target_relation = target_relation.incorporate(type='table') %}\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.tpch.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.tpch.incremental_validate_delete_target_not_in_source", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.tpch.dbt_snowflake_get_incremental_sql", "macro.tpch.delete_from_target_not_in_source", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.456683, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__get_catalog": { "name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n {% set query %}\n with tables as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n table_type as \"table_type\",\n comment as \"table_comment\",\n\n -- note: this is the _role_ that owns the table\n table_owner as \"table_owner\",\n\n 'Clustering Key' as \"stats:clustering_key:label\",\n clustering_key as \"stats:clustering_key:value\",\n 'The key used to cluster this table' as \"stats:clustering_key:description\",\n (clustering_key is not null) as \"stats:clustering_key:include\",\n\n 'Row Count' as \"stats:row_count:label\",\n row_count as \"stats:row_count:value\",\n 'An approximate count of rows in this table' as \"stats:row_count:description\",\n (row_count is not null) as \"stats:row_count:include\",\n\n 'Approximate Size' as \"stats:bytes:label\",\n bytes as \"stats:bytes:value\",\n 'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n (bytes is not null) as \"stats:bytes:include\",\n\n 'Last Modified' as \"stats:last_modified:label\",\n to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n 'The timestamp for last update/change' as \"stats:last_modified:description\",\n (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n from {{ information_schema }}.tables\n where (\n {%- for schema in schemas -%}\n upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n )\n\n ),\n\n columns as (\n\n select\n table_catalog as \"table_database\",\n table_schema as \"table_schema\",\n table_name as \"table_name\",\n\n column_name as \"column_name\",\n ordinal_position as \"column_index\",\n data_type as \"column_type\",\n comment as \"column_comment\"\n\n from {{ information_schema }}.columns\n where (\n {%- for schema in schemas -%}\n upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n )\n )\n\n select *\n from tables\n join columns using (\"table_database\", \"table_schema\", \"table_name\")\n order by \"column_index\"\n {%- endset -%}\n\n {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4589586, "supported_languages": null }, "macro.dbt_snowflake.snowflake__copy_grants": { "name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n {% set copy_grants = config.get('copy_grants', False) %}\n {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4595883, "supported_languages": null }, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": { "name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(False) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4598925, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_table_as": { "name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {%- if language == 'sql' -%}\n {%- set transient = config.get('transient', default=true) -%}\n {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n {%- set cluster_by_keys = [cluster_by_keys] -%}\n {%- endif -%}\n {%- if cluster_by_keys is not none -%}\n {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n {% else %}\n {%- set cluster_by_string = none -%}\n {%- endif -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create or replace {% if temporary -%}\n temporary\n {%- elif transient -%}\n transient\n {%- endif %} table {{ relation }}\n {%- set contract_config = config.get('contract') -%}\n {%- if contract_config.enforced -%}\n {{ get_assert_columns_equivalent(sql) }}\n {{ get_table_columns_and_constraints() }}\n {% set compiled_code = get_select_subquery(compiled_code) %}\n {% endif %}\n {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n (\n {%- if cluster_by_string is not none -%}\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from (\n {{ compiled_code }}\n ) order by ({{ cluster_by_string }})\n {%- else -%}\n {{ compiled_code }}\n {%- endif %}\n );\n {% if cluster_by_string is not none and not temporary -%}\n alter table {{relation}} cluster by ({{cluster_by_string}});\n {%- endif -%}\n {% if enable_automatic_clustering and cluster_by_string is not none and not temporary -%}\n alter table {{relation}} resume recluster;\n {%- endif -%}\n\n {%- elif language == 'python' -%}\n {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4867115, "supported_languages": null }, "macro.dbt_snowflake.get_column_comment_sql": { "name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n {% if (column_name|upper in column_dict) -%}\n {% set matched_column = column_name|upper -%}\n {% elif (column_name|lower in column_dict) -%}\n {% set matched_column = column_name|lower -%}\n {% elif (column_name in column_dict) -%}\n {% set matched_column = column_name -%}\n {% else -%}\n {% set matched_column = None -%}\n {% endif -%}\n {% if matched_column -%}\n {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n {%- else -%}\n {{ adapter.quote(column_name) }} COMMENT $$$$\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.488444, "supported_languages": null }, "macro.dbt_snowflake.get_persist_docs_column_list": { "name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n {% for column_name in query_columns %}\n {{ get_column_comment_sql(column_name, model_columns) }}\n {{- \", \" if not loop.last else \"\" }}\n {% endfor %}\n)\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.48909, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": { "name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n {%- set secure = config.get('secure', default=false) -%}\n {%- set copy_grants = config.get('copy_grants', default=false) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create or replace {% if secure -%}\n secure\n {%- endif %} {% if is_temporary -%}\n temporary\n {%- endif %} view {{ relation }}\n {% if config.persist_column_docs() -%}\n {% set model_columns = model.columns %}\n {% set query_columns = get_columns_in_query(sql) %}\n {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n {%- endif %}\n {%- set contract_config = config.get('contract') -%}\n {%- if contract_config.enforced -%}\n {{ get_assert_columns_equivalent(sql) }}\n {%- endif %}\n {% if copy_grants -%} copy grants {%- endif %} as (\n {{ sql }}\n );\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.491147, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_view_as": { "name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4915051, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_columns_in_relation": { "name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n {%- set sql -%}\n describe table {{ relation }}\n {%- endset -%}\n {%- set result = run_query(sql) -%}\n\n {% set maximum = 10000 %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many columns in relation {{ relation }}! dbt can only get\n information about relations with fewer than {{ maximum }} columns.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n\n {% set columns = [] %}\n {% for row in result %}\n {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n {% endfor %}\n {% do return(columns) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4931993, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_schemas": { "name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n {% set maximum = 10000 %}\n {% set sql -%}\n show terse schemas in database {{ database }}\n limit {{ maximum }}\n {%- endset %}\n {% set result = run_query(sql) %}\n {% if (result | length) >= maximum %}\n {% set msg %}\n Too many schemas in database {{ database }}! dbt can only get\n information about databases with fewer than {{ maximum }} schemas.\n {% endset %}\n {% do exceptions.raise_compiler_error(msg) %}\n {% endif %}\n {{ return(result) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4944315, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": { "name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n {% set paginated_relations = [] %}\n\n {% for _ in range(0, max_iter) %}\n\n {%- set paginated_sql -%}\n show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n {%- endset -%}\n\n {%- set paginated_result = run_query(paginated_sql) %}\n {%- set paginated_n = (paginated_result | length) -%}\n\n {#\n terminating condition: if there are 0 records in the result we reached\n the end exactly on the previous iteration\n #}\n {%- if paginated_n == 0 -%}\n {%- break -%}\n {%- endif -%}\n\n {#\n terminating condition: At some point the user needs to be reasonable with how\n many objects are contained in their schemas. Since there was already\n one iteration before attempting pagination, loop.index == max_iter means\n the limit has been surpassed.\n #}\n\n {%- if loop.index == max_iter -%}\n {%- set msg -%}\n dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n or review and reduce the number of objects contained.\n {%- endset -%}\n\n {% do exceptions.raise_compiler_error(msg) %}\n {%- endif -%}\n\n {%- do paginated_relations.append(paginated_result) -%}\n {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n {#\n terminating condition: paginated_n < max_results_per_iter means we reached the end\n #}\n {%- if paginated_n < max_results_per_iter -%}\n {%- break -%}\n {%- endif -%}\n {%- endfor -%}\n\n {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.496689, "supported_languages": null }, "macro.dbt_snowflake.snowflake__list_relations_without_caching": { "name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n {%- set max_total_results = max_results_per_iter README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch max_iter -%}\n\n {%- set sql -%}\n show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n {%- endset -%}\n\n {%- set result = run_query(sql) -%}\n\n {%- set n = (result | length) -%}\n {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n {%- set paginated = namespace(result=[]) -%}\n\n {% if n >= max_results_per_iter %}\n\n {% set paginated.result = snowflake__get_paginated_relations_array(\n max_iter,\n max_results_per_iter,\n max_total_results,\n schema_relation,\n watermark\n )\n %}\n\n {% endif %}\n\n {%- set all_results_array = [result] + paginated.result -%}\n {%- set result = result.merge(all_results_array) -%}\n {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4986565, "supported_languages": null }, "macro.dbt_snowflake.snowflake__check_schema_exists": { "name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n {% call statement('check_schema_exists', fetch_result=True) -%}\n select count(*)\n from {{ information_schema }}.schemata\n where upper(schema_name) = upper('{{ schema }}')\n and upper(catalog_name) = upper('{{ information_schema.database }}')\n {%- endcall %}\n {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4993777, "supported_languages": null }, "macro.dbt_snowflake.snowflake__rename_relation": { "name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ to_relation }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.4998243, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_type": { "name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n {% call statement('alter_column_type') %}\n alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.500423, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_comment": { "name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n {%- if relation.is_dynamic_table -%}\n {%- set relation_type = 'dynamic table' -%}\n {%- else -%}\n {%- set relation_type = relation.type -%}\n {%- endif -%}\n comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5011675, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_column_comment": { "name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n {% if relation.is_dynamic_table -%}\n {% set relation_type = \"dynamic table\" %}\n {% else -%}\n {% set relation_type = relation.type %}\n {% endif %}\n alter {{ relation_type }} {{ relation }} alter\n {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_column_comment_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5025823, "supported_languages": null }, "macro.dbt_snowflake.get_current_query_tag": { "name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5030026, "supported_languages": null }, "macro.dbt_snowflake.set_query_tag": { "name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__set_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5033782, "supported_languages": null }, "macro.dbt_snowflake.snowflake__set_query_tag": { "name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% set original_query_tag = get_current_query_tag() %}\n {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n {{ return(original_query_tag)}}\n {% endif %}\n {{ return(none)}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5044487, "supported_languages": null }, "macro.dbt_snowflake.unset_query_tag": { "name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5048847, "supported_languages": null }, "macro.dbt_snowflake.snowflake__unset_query_tag": { "name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n {% set new_query_tag = config.get('query_tag') %}\n {% if new_query_tag %}\n {% if original_query_tag %}\n {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n {% else %}\n {{ log(\"No original query_tag, unsetting parameter.\") }}\n {% do run_query(\"alter session unset query_tag\") %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.505978, "supported_languages": null }, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": { "name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if relation.is_dynamic_table -%}\n {% set relation_type = \"dynamic table\" %}\n {% else -%}\n {% set relation_type = relation.type %}\n {% endif %}\n\n {% if add_columns %}\n\n {% set sql -%}\n alter {{ relation_type }} {{ relation }} add column\n {% for column in add_columns %}\n {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n {% if remove_columns %}\n\n {% set sql -%}\n alter {{ relation_type }} {{ relation }} drop column\n {% for column in remove_columns %}\n {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5081336, "supported_languages": null }, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": { "name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n {#\n Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n statements before passing them into run_query(), or calling in the 'main' statement\n of a materialization\n #}\n {% set dml_transaction -%}\n begin;\n {{ dml }};\n commit;\n {%- endset %}\n\n {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5086644, "supported_languages": null }, "macro.dbt_snowflake.snowflake__truncate_relation": { "name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n {% set truncate_dml %}\n truncate table {{ relation }}\n {% endset %}\n {% call statement('truncate_relation') -%}\n {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5092242, "supported_languages": null }, "macro.dbt_snowflake.snowflake__drop_relation": { "name": "snowflake__drop_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__drop_relation", "macro_sql": "{% macro snowflake__drop_relation(relation) -%}\n {%- if relation.is_dynamic_table -%}\n {% call statement('drop_relation', auto_begin=False) -%}\n drop dynamic table if exists {{ relation }}\n {%- endcall %}\n {%- else -%}\n {{- default__drop_relation(relation) -}}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.default__drop_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5098486, "supported_languages": null }, "macro.dbt_snowflake.materialization_snapshot_snowflake": { "name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_snapshot_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5106778, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__get_merge_sql": { "name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n {#\n Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n When no unique_key is provided, this macro will do a regular insert. If a unique_key\n is provided, then this macro will do a proper merge instead.\n #}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {%- set dml -%}\n {%- if unique_key is none -%}\n\n {{ sql_header if sql_header is not none }}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source_sql }}\n )\n\n {%- else -%}\n\n {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n {%- endif -%}\n {%- endset -%}\n\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.513029, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": { "name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5137267, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": { "name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5143087, "supported_languages": null }, "macro.dbt_snowflake.materialization_view_snowflake": { "name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set to_return = create_or_replace_view() %}\n\n {% set target_relation = this.incorporate(type='view') %}\n\n {% do persist_docs(target_relation, model, for_columns=false) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5154877, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__can_clone_table": { "name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n {{ return(True) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5160332, "supported_languages": null }, "macro.dbt_snowflake.snowflake__create_or_replace_clone": { "name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n create or replace\n {{ \"transient\" if config.get(\"transient\", true) }}\n table {{ this_relation }}\n clone {{ defer_relation }}\n {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5167072, "supported_languages": null }, "macro.dbt_snowflake.materialization_test_snowflake": { "name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n {% set original_query_tag = set_query_tag() %}\n {% set relations = materialization_test_default() %}\n {% do unset_query_tag(original_query_tag) %}\n {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5174875, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": { "name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var {#\n High-level principles:\n If we are running multiple statements (DELETE + INSERT),\n and we want to guarantee identical inputs to both statements,\n then we must first save the model query results as a temporary table\n (which presumably comes with a performance cost).\n If we are running a single statement (MERGE or INSERT alone),\n we _may_ save the model query definition as a view instead,\n for (presumably) faster overall incremental processing.\n\n Low-level specifics:\n If an invalid option is specified, then we will raise an\n excpetion with corresponding message.\n\n Languages other than SQL (like Python) will use a temporary table.\n With the default strategy of merge, the user may choose between a temporary\n table and view (defaulting to view).\n\n The append strategy can use a view because it will run a single INSERT statement.\n\n When unique_key is none, the delete+insert strategy can use a view beacuse a\n single INSERT statement is run with no DELETES as part of the statement.\n Otherwise, play it safe by using a temporary table.\n #} */\n\n {% if language == \"python\" and tmp_relation_type is not none %}\n {% do exceptions.raise_compiler_error(\n \"Python models currently only support 'table' for tmp_relation_type but \"\n ~ tmp_relation_type ~ \" was specified.\"\n ) %}\n {% endif %}\n\n {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n {% do exceptions.raise_compiler_error(\n \"In order to maintain consistent results when `unique_key` is not none,\n the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n ~ tmp_relation_type ~ \" was specified.\"\n )\n %}\n {% endif %}\n\n {% if language != \"sql\" %}\n {{ return(\"table\") }}\n {% elif tmp_relation_type == \"table\" %}\n {{ return(\"table\") }}\n {% elif tmp_relation_type == \"view\" %}\n {{ return(\"view\") }}\n {% elif strategy in (\"default\", \"merge\", \"append\") %}\n {{ return(\"view\") }}\n {% elif strategy == \"delete+insert\" and unique_key is none %}\n {{ return(\"view\") }}\n {% else %}\n {{ return(\"table\") }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.52223, "supported_languages": null }, "macro.dbt_snowflake.materialization_incremental_snowflake": { "name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {#-- Set vars --#}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n {%- set language = model['language'] -%}\n {% set target_relation = this %}\n {% set existing_relation = load_relation(this) %}\n\n {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n {%- set unique_key = config.get('unique_key') -%}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n {% set grant_config = config.get('grants') %}\n\n {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n {{ run_hooks(pre_hooks) }}\n\n {% if existing_relation is none %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% elif existing_relation.is_view %}\n {#-- Can't overwrite a view with a table - we must drop --#}\n {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n {% do adapter.drop_relation(existing_relation) %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n {% elif full_refresh_mode %}\n {%- call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall -%}\n\n {% else %}\n {#-- Create the temp relation, either as a view or as a temp table --#}\n {% if tmp_relation_type == 'view' %}\n {%- call statement('create_tmp_relation') -%}\n {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n {%- endcall -%}\n {% else %}\n {%- call statement('create_tmp_relation', language=language) -%}\n {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n {%- endcall -%}\n {% endif %}\n\n {% do adapter.expand_target_column_types(\n from_relation=tmp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n {%- call statement('main') -%}\n {{ strategy_sql_macro_func(strategy_arg_dict) }}\n {%- endcall -%}\n {% endif %}\n\n {% do drop_relation_if_exists(tmp_relation) %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set target_relation = target_relation.incorporate(type='table') %}\n\n {% set should_revoke =\n should_revoke(existing_relation.is_table, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.529499, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": { "name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5299015, "supported_languages": null }, "macro.dbt_snowflake.materialization_table_snowflake": { "name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n {% set original_query_tag = set_query_tag() %}\n\n {%- set identifier = models -%}\n {%- set language = model['language'] -%}\n\n {% set grant_config = config.get('grants') %}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set target_relation = api.Relation.create(identifier=identifier,\n schema=schema,\n database=database, type='table') -%}\n\n {{ run_hooks(pre_hooks) }}\n\n {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n -- downtime, but it should be a relatively infrequent occurrence #}\n {% if old_relation is not none and not old_relation.is_table %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ drop_relation_if_exists(old_relation) }}\n {% endif %}\n\n {% call statement('main', language=language) -%}\n {{ create_table_as(False, target_relation, compiled_code, language) }}\n {%- endcall %}\n\n {{ run_hooks(post_hooks) }}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5345678, "supported_languages": [ "sql", "python" ] }, "macro.dbt_snowflake.py_write_table": { "name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n # make sure pandas exists\n import importlib.util\n package_name = 'pandas'\n if importlib.util.find_spec(package_name):\n import pandas\n if isinstance(df, pandas.core.frame.DataFrame):\n session.use_database(target_relation.database)\n session.use_schema(target_relation.schema)\n # session.write_pandas does not have overwrite function\n df = session.createDataFrame(df)\n {% set target_relation_name = resolve_model_name(target_relation) %}\n df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n dbt = dbtObj(session.table)\n df = model(dbt, session)\n materialize(session, df, dbt.this)\n return \"OK\"\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.resolve_model_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.535216, "supported_languages": null }, "macro.dbt_snowflake.py_script_comment": { "name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n# return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5354517, "supported_languages": null }, "macro.dbt_snowflake.snowflake__load_csv_rows": { "name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n {% set batch_size = get_batch_size() %}\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n %s\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query('BEGIN', auto_begin=False) %}\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5396252, "supported_languages": null }, "macro.dbt_snowflake.materialization_seed_snowflake": { "name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n {% set original_query_tag = set_query_tag() %}\n\n {% set relations = materialization_seed_default() %}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return(relations) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5403464, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": { "name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n target_relation,\n configuration_changes,\n sql,\n existing_relation,\n backup_relation,\n intermediate_relation\n) -%}\n {{- log('Applying ALTER to: ' ~ target_relation) -}}\n\n {% if configuration_changes.requires_full_refresh %}\n {{- snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n\n {% else %}\n\n {%- set target_lag = configuration_changes.target_lag -%}\n {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n alter dynamic table {{ existing_relation }} set\n {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5455148, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": { "name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n {{- log('Applying CREATE to: ' ~ relation) -}}\n\n create or replace dynamic table {{ relation }}\n target_lag = '{{ config.get(\"target_lag\") }}'\n warehouse = {{ config.get(\"snowflake_warehouse\") }}\n as (\n {{ sql }}\n )\n ;\n {{ snowflake__refresh_dynamic_table(relation) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__refresh_dynamic_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5462475, "supported_languages": null }, "macro.dbt_snowflake.snowflake__describe_dynamic_table": { "name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n {%- set _dynamic_table_sql -%}\n show dynamic tables\n like '{{ relation.identifier }}'\n in schema {{ relation.database }}.{{ relation.schema }}\n ;\n select\n \"name\",\n \"schema_name\",\n \"database_name\",\n \"text\",\n \"target_lag\",\n \"warehouse\"\n from table(result_scan(last_query_id()))\n {%- endset %}\n {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5470545, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql": { "name": "snowflake__get_replace_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -%}\n {{- log('Applying REPLACE to: ' ~ target_relation) -}}\n {{ snowflake__get_drop_dynamic_table_sql(existing_relation) }};\n {{ snowflake__get_create_dynamic_table_as_sql(target_relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5476341, "supported_languages": null }, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": { "name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5480287, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": { "name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__describe_dynamic_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.548658, "supported_languages": null }, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": { "name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5489166, "supported_languages": null }, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": { "name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n {% set original_query_tag = set_query_tag() %}\n\n {% set existing_relation = load_cached_relation(this) %}\n {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n {% set backup_relation_type = target_relation.DynamicTable if existing_relation is none else existing_relation.type %}\n {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n {{ dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n {% if build_sql == '' %}\n {{ dynamic_table_execute_no_op(target_relation) }}\n {% else %}\n {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n {% endif %}\n\n {{ dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n {% do unset_query_tag(original_query_tag) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt_snowflake.dynamic_table_setup", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.dynamic_table_teardown", "macro.dbt_snowflake.unset_query_tag" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5571465, "supported_languages": [ "sql" ] }, "macro.dbt_snowflake.dynamic_table_setup": { "name": "dynamic_table_setup", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_setup", "macro_sql": "{% macro dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n -- backup_relation and intermediate_relation should not already exist in the database\n -- it's possible these exist because of a previous run that exited unexpectedly\n {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n -- drop the temp relations if they exist already in the database\n {{ snowflake__get_drop_dynamic_table_sql(preexisting_backup_relation) }}\n {{ snowflake__get_drop_dynamic_table_sql(preexisting_intermediate_relation) }}\n\n {{ run_hooks(pre_hooks) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5580962, "supported_languages": null }, "macro.dbt_snowflake.dynamic_table_teardown": { "name": "dynamic_table_teardown", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_teardown", "macro_sql": "{% macro dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n -- drop the temp relations if they exist to leave the database clean for the next run\n {{ snowflake__get_drop_dynamic_table_sql(backup_relation) }}\n {{ snowflake__get_drop_dynamic_table_sql(intermediate_relation) }}\n\n {{ run_hooks(post_hooks) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5586207, "supported_languages": null }, "macro.dbt_snowflake.dynamic_table_get_build_sql": { "name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n {% set full_refresh_mode = should_full_refresh() %}\n\n -- determine the scenario we're in: create, full_refresh, alter, refresh data\n {% if existing_relation is none %}\n {% set build_sql = snowflake__get_create_dynamic_table_as_sql(target_relation, sql) %}\n {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n {% set build_sql = snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n {% else %}\n\n -- get config options\n {% set on_configuration_change = config.get('on_configuration_change') %}\n {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n {% if configuration_changes is none %}\n {% set build_sql = '' %}\n {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n {% elif on_configuration_change == 'apply' %}\n {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n {% elif on_configuration_change == 'continue' %}\n {% set build_sql = '' %}\n {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n {% elif on_configuration_change == 'fail' %}\n {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n {% else %}\n -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n {% endif %}\n\n {% endif %}\n\n {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5616093, "supported_languages": null }, "macro.dbt_snowflake.dynamic_table_execute_no_op": { "name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(target_relation) %}\n {% do store_raw_result(\n name=\"main\",\n message=\"skip \" ~ target_relation,\n code=\"skip\",\n rows_affected=\"-1\"\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5621417, "supported_languages": null }, "macro.dbt_snowflake.dynamic_table_execute_build_sql": { "name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n {% set grant_config = config.get('grants') %}\n\n {% call statement(name=\"main\") %}\n {{ build_sql }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5632446, "supported_languages": null }, "macro.dbt_snowflake.snowflake__safe_cast": { "name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5636563, "supported_languages": null }, "macro.dbt_snowflake.snowflake__right": { "name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n case when {{ length_expression }} = 0\n then ''\n else\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n end\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5641792, "supported_languages": null }, "macro.dbt_snowflake.snowflake__escape_single_quotes": { "name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5646222, "supported_languages": null }, "macro.dbt_snowflake.snowflake__array_construct": { "name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5650344, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp": { "name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5655818, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": { "name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n {{ return(result) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.565994, "supported_languages": null }, "macro.dbt_snowflake.snowflake__snapshot_get_time": { "name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.566251, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": { "name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5665, "supported_languages": null }, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": { "name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5668142, "supported_languages": null }, "macro.dbt_snowflake.snowflake__bool_or": { "name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5671408, "supported_languages": null }, "macro.dbt.generate_schema_name": { "name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5681593, "supported_languages": null }, "macro.dbt.default__generate_schema_name": { "name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if custom_schema_name is none -%}\n\n {{ default_schema }}\n\n {%- else -%}\n\n {{ default_schema }}_{{ custom_schema_name | trim }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.568764, "supported_languages": null }, "macro.dbt.generate_schema_name_for_env": { "name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n {%- set default_schema = target.schema -%}\n {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n {{ custom_schema_name | trim }}\n\n {%- else -%}\n\n {{ default_schema }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.569412, "supported_languages": null }, "macro.dbt.generate_database_name": { "name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_database_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5702264, "supported_languages": null }, "macro.dbt.default__generate_database_name": { "name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n {%- set default_database = target.database -%}\n {%- if custom_database_name is none -%}\n\n {{ default_database }}\n\n {%- else -%}\n\n {{ custom_database_name }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5708108, "supported_languages": null }, "macro.dbt.generate_alias_name": { "name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__generate_alias_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5716527, "supported_languages": null }, "macro.dbt.default__generate_alias_name": { "name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n {%- if custom_alias_name -%}\n\n {{ custom_alias_name | trim }}\n\n {%- elif node.version -%}\n\n {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n {%- else -%}\n\n {{ node.name }}\n\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5725358, "supported_languages": null }, "macro.dbt.set_sql_header": { "name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5732899, "supported_languages": null }, "macro.dbt.should_full_refresh": { "name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n {% set config_full_refresh = config.get('full_refresh') %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.574135, "supported_languages": null }, "macro.dbt.should_store_failures": { "name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n {% set config_store_failures = config.get('store_failures') %}\n {% if config_store_failures is none %}\n {% set config_store_failures = flags.STORE_FAILURES %}\n {% endif %}\n {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5748322, "supported_languages": null }, "macro.dbt.run_hooks": { "name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction) %}\n {% if not inside_transaction and loop.first %}\n {% call statement(auto_begin=inside_transaction) %}\n commit;\n {% endcall %}\n {% endif %}\n {% set rendered = render(hook.get('sql')) | trim %}\n {% if (rendered | length) > 0 %}\n {% call statement(auto_begin=inside_transaction) %}\n {{ rendered }}\n {% endcall %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5770109, "supported_languages": null }, "macro.dbt.make_hook_config": { "name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5774727, "supported_languages": null }, "macro.dbt.before_begin": { "name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5778167, "supported_languages": null }, "macro.dbt.in_transaction": { "name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.57815, "supported_languages": null }, "macro.dbt.after_commit": { "name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_hook_config" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5784829, "supported_languages": null }, "macro.dbt.get_where_subquery": { "name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_where_subquery" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5792453, "supported_languages": null }, "macro.dbt.default__get_where_subquery": { "name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n {% set where = config.get('where', '') %}\n {% if where %}\n {%- set filtered -%}\n (select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ relation }} where {{ where }}) dbt_subquery\n {%- endset -%}\n {% do return(filtered) %}\n {%- else -%}\n {% do return(relation) %}\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5801258, "supported_languages": null }, "macro.dbt.get_test_sql": { "name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5810244, "supported_languages": null }, "macro.dbt.default__get_test_sql": { "name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n select\n {{ fail_calc }} as failures,\n {{ fail_calc }} {{ warn_if }} as should_warn,\n {{ fail_calc }} {{ error_if }} as should_error\n from (\n {{ main_sql }}\n {{ \"limit \" ~ limit if limit != none }}\n ) dbt_internal_test\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5817113, "supported_languages": null }, "macro.dbt.materialization_test_default": { "name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n {% set relations = [] %}\n\n {% if should_store_failures() %}\n\n {% set identifier = models %}\n {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n {% set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n {% if old_relation %}\n {% do adapter.drop_relation(old_relation) %}\n {% endif %}\n\n {% call statement(auto_begin=True) %}\n {{ create_table_as(False, target_relation, sql) }}\n {% endcall %}\n\n {% do relations.append(target_relation) %}\n\n {% set main_sql %}\n select *\n from {{ target_relation }}\n {% endset %}\n\n {{ adapter.commit() }}\n\n {% else %}\n\n {% set main_sql = sql %}\n\n {% endif %}\n\n {% set limit = config.get('limit') %}\n {% set fail_calc = config.get('fail_calc') %}\n {% set warn_if = config.get('warn_if') %}\n {% set error_if = config.get('error_if') %}\n\n {% call statement('main', fetch_result=True) -%}\n\n {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n {%- endcall %}\n\n {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.5858388, "supported_languages": [ "sql" ] }, "macro.dbt.materialization_snapshot_default": { "name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n {%- set config = model['config'] -%}\n\n {%- set target_table = model.get('alias', model.get('name')) -%}\n\n {%- set strategy_name = config.get('strategy') -%}\n {%- set unique_key = config.get('unique_key') %}\n -- grab current tables grants config for comparision later on\n {%- set grant_config = config.get('grants') -%}\n\n {% set target_relation_exists, target_relation = get_or_create_relation(\n database=model.database,\n schema=model.schema,\n identifier=target_table,\n type='table') -%}\n\n {%- if not target_relation.is_table -%}\n {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n {%- endif -%}\n\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set strategy_macro = strategy_dispatch(strategy_name) %}\n {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n {% if not target_relation_exists %}\n\n {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n {% else %}\n\n {{ adapter.valid_snapshot_target(target_relation) }}\n\n {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n -- this may no-op if the database does not require column expansion\n {% do adapter.expand_target_column_types(from_relation=staging_table,\n to_relation=target_relation) %}\n\n {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% do create_columns(target_relation, missing_columns) %}\n\n {% set source_columns = adapter.get_columns_in_relation(staging_table)\n | rejectattr('name', 'equalto', 'dbt_change_type')\n | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n | rejectattr('name', 'equalto', 'dbt_unique_key')\n | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n | list %}\n\n {% set quoted_source_columns = [] %}\n {% for column in source_columns %}\n {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n {% endfor %}\n\n {% set final_sql = snapshot_merge_sql(\n target = target_relation,\n source = staging_table,\n insert_cols = quoted_source_columns\n )\n %}\n\n {% endif %}\n\n {% call statement('main') %}\n {{ final_sql }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if not target_relation_exists %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {% if staging_table is defined %}\n {% do post_snapshot(staging_table) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.596971, "supported_languages": [ "sql" ] }, "macro.dbt.strategy_dispatch": { "name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called with '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n\n {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n {% if search_name not in package_context %}\n {% set error_msg %}\n The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.603093, "supported_languages": null }, "macro.dbt.snapshot_hash_arguments": { "name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6034937, "supported_languages": null }, "macro.dbt.default__snapshot_hash_arguments": { "name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n md5({%- for arg in args -%}\n coalesce(cast({{ arg }} as varchar ), '')\n {% if not loop.last %} || '|' || {% endif %}\n {%- endfor -%})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6040268, "supported_languages": null }, "macro.dbt.snapshot_timestamp_strategy": { "name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set primary_key = config['unique_key'] %}\n {% set updated_at = config['updated_at'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n {#/*\n The snapshot relation might not have an {{ updated_at }} value if the\n snapshot strategy is changed from `check` to `timestamp`. We\n should use a dbt-created column for the comparison in the snapshot\n table instead of assuming that the user-supplied {{ updated_at }}\n will be present in the historical data.\n\n See https://github.com/dbt-labs/dbt-core/issues/2350\n analyses/ assets/ macros/ manifests/ models/ prod/ scripts/ seeds/ snapshots/ tests/ tpch/ #}\n {% set row_changed_expr -%}\n ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6056066, "supported_languages": null }, "macro.dbt.snapshot_string_as_time": { "name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_string_as_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6060042, "supported_languages": null }, "macro.dbt.default__snapshot_string_as_time": { "name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n {% do exceptions.raise_not_implemented(\n 'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.606408, "supported_languages": null }, "macro.dbt.snapshot_check_all_get_existing_columns": { "name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n {%- if not target_exists -%}\n {#-- no table yet -> return whatever the query does --#}\n {{ return((false, query_columns)) }}\n {%- endif -%}\n\n {#-- handle any schema changes --#}\n {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n {% if check_cols_config == 'all' %}\n {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n {#-- query for proper casing/quoting, to support comparison below --#}\n {%- set select_check_cols_from_target -%}\n {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n select {{ check_cols_config | join(', ') }} from (\n {{ node['compiled_code'] }}\n ) subq\n {%- endset -%}\n {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n {% else %}\n {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n {% endif %}\n\n {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n {%- set ns.column_added = false -%}\n\n {%- set intersection = [] -%}\n {%- for col in query_columns -%}\n {%- if col in existing_cols -%}\n {%- do intersection.append(adapter.quote(col)) -%}\n {%- else -%}\n {% set ns.column_added = true %}\n {%- endif -%}\n {%- endfor -%}\n {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6094496, "supported_languages": null }, "macro.dbt.snapshot_check_strategy": { "name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n {% set check_cols_config = config['check_cols'] %}\n {% set primary_key = config['unique_key'] %}\n {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n {% set column_added = false %}\n\n {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n {%- set row_changed_expr -%}\n (\n {%- if column_added -%}\n {{ get_true_sql() }}\n {%- else -%}\n {%- for col in check_cols -%}\n {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n or\n (\n (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n or\n ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n )\n {%- if not loop.last %} or {% endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n {%- endset %}\n\n {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n {% do return({\n \"unique_key\": primary_key,\n \"updated_at\": updated_at,\n \"row_changed\": row_changed_expr,\n \"scd_id\": scd_id_expr,\n \"invalidate_hard_deletes\": invalidate_hard_deletes\n }) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6124103, "supported_languages": null }, "macro.dbt.create_columns": { "name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6182973, "supported_languages": null }, "macro.dbt.default__create_columns": { "name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n {% for column in columns %}\n {% call statement() %}\n alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n {% endcall %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6189435, "supported_languages": null }, "macro.dbt.post_snapshot": { "name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__post_snapshot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.619335, "supported_languages": null }, "macro.dbt.default__post_snapshot": { "name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n {# no-op #}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.619556, "supported_languages": null }, "macro.dbt.get_true_sql": { "name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_true_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6199162, "supported_languages": null }, "macro.dbt.default__get_true_sql": { "name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n {{ return('TRUE') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6202056, "supported_languages": null }, "macro.dbt.snapshot_staging_table": { "name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__snapshot_staging_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6206734, "supported_languages": null }, "macro.dbt.default__snapshot_staging_table": { "name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n with snapshot_query as (\n\n {{ source_sql }}\n\n ),\n\n snapshotted_data as (\n\n select *,\n {{ strategy.unique_key }} as dbt_unique_key\n\n from {{ target_relation }}\n where dbt_valid_to is null\n\n ),\n\n insertions_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n {{ strategy.scd_id }} as dbt_scd_id\n\n from snapshot_query\n ),\n\n updates_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n {{ strategy.updated_at }} as dbt_valid_to\n\n from snapshot_query\n ),\n\n {%- if strategy.invalidate_hard_deletes %}\n\n deletes_source_data as (\n\n select\n *,\n {{ strategy.unique_key }} as dbt_unique_key\n from snapshot_query\n ),\n {% endif %}\n\n insertions as (\n\n select\n 'insert' as dbt_change_type,\n source_data.*\n\n from insertions_source_data as source_data\n left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where snapshotted_data.dbt_unique_key is null\n or (\n snapshotted_data.dbt_unique_key is not null\n and (\n {{ strategy.row_changed }}\n )\n )\n\n ),\n\n updates as (\n\n select\n 'update' as dbt_change_type,\n source_data.*,\n snapshotted_data.dbt_scd_id\n\n from updates_source_data as source_data\n join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where (\n {{ strategy.row_changed }}\n )\n )\n\n {%- if strategy.invalidate_hard_deletes -%}\n ,\n\n deletes as (\n\n select\n 'delete' as dbt_change_type,\n source_data.*,\n {{ snapshot_get_time() }} as dbt_valid_from,\n {{ snapshot_get_time() }} as dbt_updated_at,\n {{ snapshot_get_time() }} as dbt_valid_to,\n snapshotted_data.dbt_scd_id\n\n from snapshotted_data\n left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n where source_data.dbt_unique_key is null\n )\n {%- endif %}\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from insertions\n union all\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from updates\n {%- if strategy.invalidate_hard_deletes %}\n union all\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from deletes\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.62255, "supported_languages": null }, "macro.dbt.build_snapshot_table": { "name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__build_snapshot_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.622986, "supported_languages": null }, "macro.dbt.default__build_snapshot_table": { "name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n select *,\n {{ strategy.scd_id }} as dbt_scd_id,\n {{ strategy.updated_at }} as dbt_updated_at,\n {{ strategy.updated_at }} as dbt_valid_from,\n nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n from (\n {{ sql }}\n ) sbq\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6235518, "supported_languages": null }, "macro.dbt.build_snapshot_staging_table": { "name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n {% set temp_relation = make_temp_relation(target_relation) %}\n\n {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n {% call statement('build_snapshot_staging_relation') %}\n {{ create_table_as(True, temp_relation, select) }}\n {% endcall %}\n\n {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6245244, "supported_languages": null }, "macro.dbt.snapshot_merge_sql": { "name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6253805, "supported_languages": null }, "macro.dbt.default__snapshot_merge_sql": { "name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n when matched\n and DBT_INTERNAL_DEST.dbt_valid_to is null\n and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n then update\n set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n when not matched\n and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n then insert ({{ insert_cols_csv }})\n values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6259804, "supported_languages": null }, "macro.dbt.create_csv_table": { "name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6332872, "supported_languages": null }, "macro.dbt.default__create_csv_table": { "name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n {%- set column_override = model['config'].get('column_types', {}) -%}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n {% set sql %}\n create table {{ this.render() }} (\n {%- for col_name in agate_table.column_names -%}\n {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n {%- set type = column_override.get(col_name, inferred_type) -%}\n {%- set column_name = (col_name | string) -%}\n {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n {%- endfor -%}\n )\n {% endset %}\n\n {% call statement('_') -%}\n {{ sql }}\n {%- endcall %}\n\n {{ return(sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6352568, "supported_languages": null }, "macro.dbt.reset_csv_table": { "name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__reset_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6357884, "supported_languages": null }, "macro.dbt.default__reset_csv_table": { "name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n {% set sql = \"\" %}\n {% if full_refresh %}\n {{ adapter.drop_relation(old_relation) }}\n {% set sql = create_csv_table(model, agate_table) %}\n {% else %}\n {{ adapter.truncate_relation(old_relation) }}\n {% set sql = \"truncate table \" ~ old_relation %}\n {% endif %}\n\n {{ return(sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_csv_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6369116, "supported_languages": null }, "macro.dbt.get_csv_sql": { "name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_csv_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6373692, "supported_languages": null }, "macro.dbt.default__get_csv_sql": { "name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n {{ create_or_truncate_sql }};\n -- dbt seed --\n {{ insert_sql }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6376855, "supported_languages": null }, "macro.dbt.get_binding_char": { "name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6380143, "supported_languages": null }, "macro.dbt.default__get_binding_char": { "name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n {{ return('%s') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6382945, "supported_languages": null }, "macro.dbt.get_batch_size": { "name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_batch_size" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.638801, "supported_languages": null }, "macro.dbt.default__get_batch_size": { "name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n {{ return(10000) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.639086, "supported_languages": null }, "macro.dbt.get_seed_column_quoted_csv": { "name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6401575, "supported_languages": null }, "macro.dbt.load_csv_rows": { "name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__load_csv_rows" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6406102, "supported_languages": null }, "macro.dbt.default__load_csv_rows": { "name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n {% set batch_size = get_batch_size() %}\n\n {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n {% set bindings = [] %}\n\n {% set statements = [] %}\n\n {% for chunk in agate_table.rows | batch(batch_size) %}\n {% set bindings = [] %}\n\n {% for row in chunk %}\n {% do bindings.extend(row) %}\n {% endfor %}\n\n {% set sql %}\n insert into {{ this.render() }} ({{ cols_sql }}) values\n {% for row in chunk -%}\n ({%- for column in agate_table.column_names -%}\n {{ get_binding_char() }}\n {%- if not loop.last%},{%- endif %}\n {%- endfor -%})\n {%- if not loop.last%},{%- endif %}\n {%- endfor %}\n {% endset %}\n\n {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n {% if loop.index0 == 0 %}\n {% do statements.append(sql) %}\n {% endif %}\n {% endfor %}\n\n {# Return SQL so we can render it out into the compiled files #}\n {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.643262, "supported_languages": null }, "macro.dbt.materialization_seed_default": { "name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n {%- set identifier = models -%}\n {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set grant_config = config.get('grants') -%}\n {%- set agate_table = load_agate_table() -%}\n -- grab current tables grants config for comparison later on\n\n {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% set create_table_sql = \"\" %}\n {% if exists_as_view %}\n {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n {% elif exists_as_table %}\n {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n {% else %}\n {% set create_table_sql = create_csv_table(model, agate_table) %}\n {% endif %}\n\n {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n {% set rows_affected = (agate_table.rows | length) %}\n {% set sql = load_csv_rows(model, agate_table) %}\n\n {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n {{ get_csv_sql(create_table_sql, sql) }};\n {% endcall %}\n\n {% set target_relation = this.incorporate(type='table') %}\n\n {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if full_refresh_mode or not exists_as_table %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6495464, "supported_languages": [ "sql" ] }, "macro.dbt.create_or_replace_view": { "name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n {%- set identifier = models -%}\n\n {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n {%- set target_relation = api.Relation.create(\n identifier=identifier, schema=schema, database=database,\n type='view') -%}\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks) }}\n\n -- If there's a table with the same name and we weren't told to full refresh,\n -- that's an error. If we were told to full refresh, drop it. This behavior differs\n -- for Snowflake and BigQuery, so multiple dispatch is used.\n {%- if old_relation is not none and old_relation.is_table -%}\n {{ handle_existing_table(should_full_refresh(), old_relation) }}\n {%- endif -%}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(target_relation, sql) }}\n {%- endcall %}\n\n {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {{ run_hooks(post_hooks) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.652652, "supported_languages": null }, "macro.dbt.materialization_view_default": { "name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='view') -%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n a previous run, and we're going to try to drop it immediately. At the end of this\n materialization, we're going to rename the \"existing_relation\" to this identifier,\n and then we're going to drop it. In order to make sure we run the correct one of:\n - drop view ...\n - drop table ...\n\n We need to set the type of this relation to be the type of the existing_relation, if it exists,\n or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n this relation will be effectively unused.\n */\n {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_view_as_sql(intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n -- move the existing view out of the way\n {% if existing_relation is not none %}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n since the variable was first set. */\n {% set existing_relation = load_cached_relation(existing_relation) %}\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n {% endif %}\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.658094, "supported_languages": [ "sql" ] }, "macro.dbt.handle_existing_table": { "name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__handle_existing_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6587667, "supported_languages": null }, "macro.dbt.default__handle_existing_table": { "name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.65927, "supported_languages": null }, "macro.dbt.get_create_view_as_sql": { "name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6601324, "supported_languages": null }, "macro.dbt.default__get_create_view_as_sql": { "name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6605232, "supported_languages": null }, "macro.dbt.create_view_as": { "name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_view_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6609411, "supported_languages": null }, "macro.dbt.default__create_view_as": { "name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n create view {{ relation }}\n {% set contract_config = config.get('contract') %}\n {% if contract_config.enforced %}\n {{ get_assert_columns_equivalent(sql) }}\n {%- endif %}\n as (\n {{ sql }}\n );\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_assert_columns_equivalent" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6618764, "supported_languages": null }, "macro.dbt.can_clone_table": { "name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__can_clone_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.662417, "supported_languages": null }, "macro.dbt.default__can_clone_table": { "name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n {{ return(False) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6626995, "supported_languages": null }, "macro.dbt.materialization_clone_default": { "name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n {%- set relations = {'relations': []} -%}\n\n {%- if not defer_relation -%}\n -- nothing to do\n {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n {{ return(relations) }}\n {%- endif -%}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n\n {%- if existing_relation and not flags.FULL_REFRESH -%}\n -- noop!\n {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n {{ return(relations) }}\n {%- endif -%}\n\n {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n -- Otherwise, this will be a view\n\n {% set can_clone_table = can_clone_table() %}\n\n {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n {%- set target_relation = this.incorporate(type='table') -%}\n {% if existing_relation is not none and not existing_relation.is_table %}\n {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n {{ drop_relation_if_exists(existing_relation) }}\n {% endif %}\n\n -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n {% call statement('main') %}\n {{ create_or_replace_clone(target_relation, defer_relation) }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n {% do persist_docs(target_relation, model) %}\n\n {{ return({'relations': [target_relation]}) }}\n\n {%- else -%}\n\n {%- set target_relation = this.incorporate(type='view') -%}\n\n -- reuse the view materialization\n -- TODO: support actual dispatch for materialization macros\n -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n {% if not search_name in context %}\n {% set search_name = \"materialization_view_default\" %}\n {% endif %}\n {% set materialization_macro = context[search_name] %}\n {% set relations = materialization_macro() %}\n {{ return(relations) }}\n\n {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6688995, "supported_languages": [ "sql" ] }, "macro.dbt.create_or_replace_clone": { "name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_or_replace_clone" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.669589, "supported_languages": null }, "macro.dbt.default__create_or_replace_clone": { "name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6699066, "supported_languages": null }, "macro.dbt.get_incremental_append_sql": { "name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.671493, "supported_languages": null }, "macro.dbt.default__get_incremental_append_sql": { "name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_insert_into_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6720886, "supported_languages": null }, "macro.dbt.get_incremental_delete_insert_sql": { "name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_delete_insert_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6725461, "supported_languages": null }, "macro.dbt.default__get_incremental_delete_insert_sql": { "name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6732068, "supported_languages": null }, "macro.dbt.get_incremental_merge_sql": { "name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6736388, "supported_languages": null }, "macro.dbt.default__get_incremental_merge_sql": { "name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6742952, "supported_languages": null }, "macro.dbt.get_incremental_insert_overwrite_sql": { "name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_incremental_insert_overwrite_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6747258, "supported_languages": null }, "macro.dbt.default__get_incremental_insert_overwrite_sql": { "name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6753194, "supported_languages": null }, "macro.dbt.get_incremental_default_sql": { "name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_incremental_default_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6757545, "supported_languages": null }, "macro.dbt.default__get_incremental_default_sql": { "name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_incremental_append_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6761348, "supported_languages": null }, "macro.dbt.get_insert_into_sql": { "name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n insert into {{ target_relation }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ temp_relation }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6767685, "supported_languages": null }, "macro.dbt.get_merge_sql": { "name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n -- back compat for old kwarg name\n {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6860714, "supported_languages": null }, "macro.dbt.default__get_merge_sql": { "name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set merge_update_columns = config.get('merge_update_columns') -%}\n {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n {% for key in unique_key %}\n {% set this_key_match %}\n DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n {% endset %}\n {% do predicates.append(this_key_match) %}\n {% endfor %}\n {% else %}\n {% set unique_key_match %}\n DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n {% endset %}\n {% do predicates.append(unique_key_match) %}\n {% endif %}\n {% else %}\n {% do predicates.append('FALSE') %}\n {% endif %}\n\n {{ sql_header if sql_header is not none }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n {% if unique_key %}\n when matched then update set\n {% for column_name in update_columns -%}\n {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n {%- if not loop.last %}, {%- endif %}\n {%- endfor %}\n {% endif %}\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6897113, "supported_languages": null }, "macro.dbt.get_delete_insert_merge_sql": { "name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6903036, "supported_languages": null }, "macro.dbt.default__get_delete_insert_merge_sql": { "name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n {% if unique_key %}\n {% if unique_key is sequence and unique_key is not string %}\n delete from {{target }}\n using {{ source }}\n where (\n {% for key in unique_key %}\n {{ source }}.{{ key }} = {{ target }}.{{ key }}\n {{ \"and \" if not loop.last}}\n {% endfor %}\n {% if incremental_predicates %}\n {% for predicate in incremental_predicates %}\n and {{ predicate }}\n {% endfor %}\n {% endif %}\n );\n {% else %}\n delete from {{ target }}\n where (\n {{ unique_key }}) in (\n select ({{ unique_key }})\n from {{ source }}\n )\n {%- if incremental_predicates %}\n {% for predicate in incremental_predicates %}\n and {{ predicate }}\n {% endfor %}\n {%- endif -%};\n\n {% endif %}\n {% endif %}\n\n insert into {{ target }} ({{ dest_cols_csv }})\n (\n select {{ dest_cols_csv }}\n from {{ source }}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6925318, "supported_languages": null }, "macro.dbt.get_insert_overwrite_merge_sql": { "name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_insert_overwrite_merge_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.693141, "supported_languages": null }, "macro.dbt.default__get_insert_overwrite_merge_sql": { "name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n {#-- The only time include_sql_header is True: --#}\n {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n {#-- We should consider including the sql header at the materialization level instead --#}\n\n {%- set predicates = [] if predicates is none else [] + predicates -%}\n {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none and include_sql_header }}\n\n merge into {{ target }} as DBT_INTERNAL_DEST\n using {{ source }} as DBT_INTERNAL_SOURCE\n on FALSE\n\n when not matched by source\n {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n then delete\n\n when not matched then insert\n ({{ dest_cols_csv }})\n values\n ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_quoted_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.6945527, "supported_languages": null }, "macro.dbt.incremental_validate_on_schema_change": { "name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n {% do log(log_message) %}\n\n {{ return(default) }}\n\n {% else %}\n\n {{ return(on_schema_change) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.702904, "supported_languages": null }, "macro.dbt.check_for_schema_changes": { "name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n {% set schema_changed = False %}\n\n {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n {% if source_not_in_target != [] %}\n {% set schema_changed = True %}\n {% elif target_not_in_source != [] or new_target_types != [] %}\n {% set schema_changed = True %}\n {% elif new_target_types != [] %}\n {% set schema_changed = True %}\n {% endif %}\n\n {% set changes_dict = {\n 'schema_changed': schema_changed,\n 'source_not_in_target': source_not_in_target,\n 'target_not_in_source': target_not_in_source,\n 'source_columns': source_columns,\n 'target_columns': target_columns,\n 'new_target_types': new_target_types\n } %}\n\n {% set msg %}\n In {{ target_relation }}:\n Schema changed: {{ schema_changed }}\n Source columns not in target: {{ source_not_in_target }}\n Target columns not in source: {{ target_not_in_source }}\n New column types: {{ new_target_types }}\n {% endset %}\n\n {% do log(msg) %}\n\n {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.diff_columns", "macro.dbt.diff_column_data_types" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7055562, "supported_languages": null }, "macro.dbt.sync_column_schemas": { "name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n {%- if on_schema_change == 'append_new_columns'-%}\n {%- if add_to_target_arr | length > 0 -%}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n {%- endif -%}\n\n {% elif on_schema_change == 'sync_all_columns' %}\n {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n {% endif %}\n\n {% if new_target_types != [] %}\n {% for ntt in new_target_types %}\n {% set column_name = ntt['column_name'] %}\n {% set new_type = ntt['new_type'] %}\n {% do alter_column_type(target_relation, column_name, new_type) %}\n {% endfor %}\n {% endif %}\n\n {% endif %}\n\n {% set schema_change_message %}\n In {{ target_relation }}:\n Schema change approach: {{ on_schema_change }}\n Columns added: {{ add_to_target_arr }}\n Columns removed: {{ remove_from_target_arr }}\n Data types changed: {{ new_target_types }}\n {% endset %}\n\n {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.708146, "supported_languages": null }, "macro.dbt.process_schema_changes": { "name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n {% if on_schema_change == 'ignore' %}\n\n {{ return({}) }}\n\n {% else %}\n\n {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n {% if schema_changes_dict['schema_changed'] %}\n\n {% if on_schema_change == 'fail' %}\n\n {% set fail_msg %}\n The source and target schemas on this incremental model are out of sync!\n They can be reconciled in several ways:\n - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n - Re-run the incremental model with `full_refresh: True` to update the target schema.\n - update the schema manually and re-run the process.\n\n Additional troubleshooting context:\n Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n New column types: {{ schema_changes_dict['new_target_types'] }}\n {% endset %}\n\n {% do exceptions.raise_compiler_error(fail_msg) %}\n\n {# -- unless we ignore, run the sync operation per the config #}\n {% else %}\n\n {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n {% endif %}\n\n {% endif %}\n\n {{ return(schema_changes_dict['source_columns']) }}\n\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7100053, "supported_languages": null }, "macro.dbt.is_incremental": { "name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n {#-- do not run introspective queries in parsing #}\n {% if not execute %}\n {{ return(False) }}\n {% else %}\n {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n {{ return(relation is not none\n and relation.type == 'table'\n and model.config.materialized == 'incremental'\n and not should_full_refresh()) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7113216, "supported_languages": null }, "macro.dbt.get_quoted_csv": { "name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n {% set quoted = [] %}\n {% for col in column_names -%}\n {%- do quoted.append(adapter.quote(col)) -%}\n {%- endfor %}\n\n {%- set dest_cols_csv = quoted | join(', ') -%}\n {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7140787, "supported_languages": null }, "macro.dbt.diff_columns": { "name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% set source_names = source_columns | map(attribute = 'column') | list %}\n {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n {% for sc in source_columns %}\n {% if sc.name not in target_names %}\n {{ result.append(sc) }}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7152863, "supported_languages": null }, "macro.dbt.diff_column_data_types": { "name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n {% set result = [] %}\n {% for sc in source_columns %}\n {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n {% if tc %}\n {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n {% endif %}\n {% endif %}\n {% endfor %}\n\n {{ return(result) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7167637, "supported_languages": null }, "macro.dbt.get_merge_update_columns": { "name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_merge_update_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.717306, "supported_languages": null }, "macro.dbt.default__get_merge_update_columns": { "name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n {%- if merge_update_columns and merge_exclude_columns -%}\n {{ exceptions.raise_compiler_error(\n 'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n )}}\n {%- elif merge_update_columns -%}\n {%- set update_columns = merge_update_columns -%}\n {%- elif merge_exclude_columns -%}\n {%- set update_columns = [] -%}\n {%- for column in dest_columns -%}\n {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n {%- do update_columns.append(column.quoted) -%}\n {% endif %}\n {%- endfor -%}\n {%- else -%}\n {%- set update_columns = default_cols -%}\n {%- endif -%}\n\n {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7188804, "supported_languages": null }, "macro.dbt.materialization_incremental_default": { "name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n -- relations\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') -%}\n {%- set temp_relation = make_temp_relation(target_relation)-%}\n {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n -- configs\n {%- set unique_key = config.get('unique_key') -%}\n {%- set full_refresh_mode = (should_full_refresh() or existing_relation.is_view) -%}\n {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n -- the temp_ and backup_ relations should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation. This has to happen before\n -- BEGIN, in a separate transaction\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set to_drop = [] %}\n\n {% if existing_relation is none %}\n {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n {% elif full_refresh_mode %}\n {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n {% set need_swap = true %}\n {% else %}\n {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n {% do adapter.expand_target_column_types(\n from_relation=temp_relation,\n to_relation=target_relation) %}\n {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n {% if not dest_columns %}\n {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n {% endif %}\n\n {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n {% endif %}\n\n {% call statement(\"main\") %}\n {{ build_sql }}\n {% endcall %}\n\n {% if need_swap %}\n {% do adapter.rename_relation(target_relation, backup_relation) %}\n {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n {% do to_drop.append(backup_relation) %}\n {% endif %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n {% do create_indexes(target_relation) %}\n {% endif %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n -- `COMMIT` happens here\n {% do adapter.commit() %}\n\n {% for rel in to_drop %}\n {% do adapter.drop_relation(rel) %}\n {% endfor %}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7287114, "supported_languages": [ "sql" ] }, "macro.dbt.get_table_columns_and_constraints": { "name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__get_table_columns_and_constraints" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.730584, "supported_languages": null }, "macro.dbt.default__get_table_columns_and_constraints": { "name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.table_columns_and_constraints" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.730873, "supported_languages": null }, "macro.dbt.table_columns_and_constraints": { "name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n {# loop through user_provided_columns to create DDL with data types and constraints #}\n {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n (\n {% for c in raw_column_constraints -%}\n {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n {% endfor %}\n {% for c in raw_model_constraints -%}\n {{ c }}{{ \",\" if not loop.last }}\n {% endfor -%}\n )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.732051, "supported_languages": null }, "macro.dbt.get_assert_columns_equivalent": { "name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__get_assert_columns_equivalent" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.732457, "supported_languages": null }, "macro.dbt.default__get_assert_columns_equivalent": { "name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.assert_columns_equivalent" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.732778, "supported_languages": null }, "macro.dbt.assert_columns_equivalent": { "name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n {#-- First ensure the user has defined 'columns' in yaml specification --#}\n {%- set user_defined_columns = models -%}\n {%- if not user_defined_columns -%}\n {{ exceptions.raise_contract_error([], []) }}\n {%- endif -%}\n\n {#-- Obtain the column schema provided by sql file. #}\n {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n {#-- create dictionaries with name and formatted data type and strings for exception #}\n {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n {%- set yaml_columns = format_columns(schema_file_provided_columns) -%}\n\n {%- if sql_columns|length != yaml_columns|length -%}\n {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n {%- endif -%}\n\n {%- for sql_col in sql_columns -%}\n {%- set yaml_col = [] -%}\n {%- for this_col in yaml_columns -%}\n {%- if this_col['name'] == sql_col['name'] -%}\n {%- do yaml_col.append(this_col) -%}\n {%- break -%}\n {%- endif -%}\n {%- endfor -%}\n {%- if not yaml_col -%}\n {#-- Column with name not found in yaml #}\n {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n {%- endif -%}\n {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n {#-- Column data types don't match #}\n {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n {%- endif -%}\n {%- endfor -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7355037, "supported_languages": null }, "macro.dbt.format_columns": { "name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n {% set formatted_columns = [] %}\n {% for column in columns %}\n {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n {%- do formatted_columns.append(formatted_column) -%}\n {% endfor %}\n {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.format_column", "macro.dbt.default__format_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7363846, "supported_languages": null }, "macro.dbt.default__format_column": { "name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n {% set data_type = column.dtype %}\n {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7371526, "supported_languages": null }, "macro.dbt.materialization_table_default": { "name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n {%- set existing_relation = load_cached_relation(this) -%}\n {%- set target_relation = this.incorporate(type='table') %}\n {%- set intermediate_relation = make_intermediate_relation(target_relation) -%}\n -- the intermediate_relation should not already exist in the database; get_relation\n -- will return None in that case. Otherwise, we get a relation that we can drop\n -- later, before we try to use this name for the current operation\n {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n /bin /imagegeneration /run /sbin See ../view/view.sql for more information about this relation.\n */\n {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n -- as above, the backup_relation should not already exist\n {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n -- grab current tables grants config for comparision later on\n {% set grant_config = config.get('grants') %}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n -- build model\n {% call statement('main') -%}\n {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n {%- endcall %}\n\n -- cleanup\n {% if existing_relation is not none %}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n since the variable was first set. */\n {% set existing_relation = load_cached_relation(existing_relation) %}\n {% if existing_relation is not none %}\n {{ adapter.rename_relation(existing_relation, backup_relation) }}\n {% endif %}\n {% endif %}\n\n {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n {% do create_indexes(target_relation) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n -- `COMMIT` happens here\n {{ adapter.commit() }}\n\n -- finally, drop the existing/backup relation after the commit\n {{ drop_relation_if_exists(backup_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7427146, "supported_languages": [ "sql" ] }, "macro.dbt.get_create_table_as_sql": { "name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_table_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7443762, "supported_languages": null }, "macro.dbt.default__get_create_table_as_sql": { "name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.744797, "supported_languages": null }, "macro.dbt.create_table_as": { "name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n {# backward compatibility for create_table_as that does not support language #}\n {% if language == \"sql\" %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n {% else %}\n {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__create_table_as" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7458396, "supported_languages": null }, "macro.dbt.default__create_table_as": { "name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n {%- set sql_header = config.get('sql_header', none) -%}\n\n {{ sql_header if sql_header is not none }}\n\n create {% if temporary: -%}temporary{%- endif %} table\n {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n {% set contract_config = config.get('contract') %}\n {% if contract_config.enforced and (not temporary) %}\n {{ get_assert_columns_equivalent(sql) }}\n {{ get_table_columns_and_constraints() }}\n {%- set sql = get_select_subquery(sql) %}\n {% endif %}\n as (\n {{ sql }}\n );\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.747357, "supported_languages": null }, "macro.dbt.default__get_column_names": { "name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n {#- loop through user_provided_columns to get column names -#}\n {%- set user_provided_columns = models -%}\n {%- for i in user_provided_columns %}\n {%- set col = user_provided_columns[i] -%}\n {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n {{ col_name }}{{ \", \" if not loop.last }}\n {%- endfor -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7484012, "supported_languages": null }, "macro.dbt.get_select_subquery": { "name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_select_subquery" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7488415, "supported_languages": null }, "macro.dbt.default__get_select_subquery": { "name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n from (\n {{ sql }}\n ) as model_subq\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_column_names" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7492576, "supported_languages": null }, "macro.dbt.refresh_materialized_view": { "name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n {{- log('Applying REFRESH to: ' ~ relation) -}}\n {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__refresh_materialized_view" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.749935, "supported_languages": null }, "macro.dbt.default__refresh_materialized_view": { "name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7502537, "supported_languages": null }, "macro.dbt.get_alter_materialized_view_as_sql": { "name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n relation,\n configuration_changes,\n sql,\n existing_relation,\n backup_relation,\n intermediate_relation\n) %}\n {{- log('Applying ALTER to: ' ~ relation) -}}\n {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n relation,\n configuration_changes,\n sql,\n existing_relation,\n backup_relation,\n intermediate_relation\n ) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_alter_materialized_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7512343, "supported_languages": null }, "macro.dbt.default__get_alter_materialized_view_as_sql": { "name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n relation,\n configuration_changes,\n sql,\n existing_relation,\n backup_relation,\n intermediate_relation\n) %}\n {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.751668, "supported_languages": null }, "macro.dbt.materialization_materialized_view_default": { "name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n {% set existing_relation = load_cached_relation(this) %}\n {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n {% if build_sql == '' %}\n {{ materialized_view_execute_no_op(target_relation) }}\n {% else %}\n {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n {% endif %}\n\n {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7596154, "supported_languages": [ "sql" ] }, "macro.dbt.materialized_view_setup": { "name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n -- backup_relation and intermediate_relation should not already exist in the database\n -- it's possible these exist because of a previous run that exited unexpectedly\n {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n -- drop the temp relations if they exist already in the database\n {{ drop_relation_if_exists(preexisting_backup_relation) }}\n {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7605445, "supported_languages": null }, "macro.dbt.materialized_view_teardown": { "name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n -- drop the temp relations if they exist to leave the database clean for the next run\n {{ drop_relation_if_exists(backup_relation) }}\n {{ drop_relation_if_exists(intermediate_relation) }}\n\n {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7611127, "supported_languages": null }, "macro.dbt.materialized_view_get_build_sql": { "name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n {% set full_refresh_mode = should_full_refresh() %}\n\n -- determine the scenario we're in: create, full_refresh, alter, refresh data\n {% if existing_relation is none %}\n {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n {% else %}\n\n -- get config options\n {% set on_configuration_change = config.get('on_configuration_change') %}\n {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n {% if configuration_changes is none %}\n {% set build_sql = refresh_materialized_view(target_relation) %}\n\n {% elif on_configuration_change == 'apply' %}\n {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n {% elif on_configuration_change == 'continue' %}\n {% set build_sql = '' %}\n {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n {% elif on_configuration_change == 'fail' %}\n {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n {% else %}\n -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n {% endif %}\n\n {% endif %}\n\n {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7639575, "supported_languages": null }, "macro.dbt.materialized_view_execute_no_op": { "name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n {% do store_raw_result(\n name=\"main\",\n message=\"skip \" ~ target_relation,\n code=\"skip\",\n rows_affected=\"-1\"\n ) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7645085, "supported_languages": null }, "macro.dbt.materialized_view_execute_build_sql": { "name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n -- `BEGIN` happens here:\n {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n {% set grant_config = config.get('grants') %}\n\n {% call statement(name=\"main\") %}\n {{ build_sql }}\n {% endcall %}\n\n {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n {% do persist_docs(target_relation, model) %}\n\n {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7659419, "supported_languages": null }, "macro.dbt.get_create_materialized_view_as_sql": { "name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n {{- log('Applying CREATE to: ' ~ relation) -}}\n {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_materialized_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7666786, "supported_languages": null }, "macro.dbt.default__get_create_materialized_view_as_sql": { "name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7670112, "supported_languages": null }, "macro.dbt.get_materialized_view_configuration_changes": { "name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var {#\n It's recommended that configuration changes be formatted as follows:\n {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n For example:\n {\n \"indexes\": [\n {\"action\": \"drop\", \"context\": \"index_abc\"},\n {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n ],\n }\n\n Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n #} */\n {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_materialized_view_configuration_changes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7681017, "supported_languages": null }, "macro.dbt.default__get_materialized_view_configuration_changes": { "name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.768498, "supported_languages": null }, "macro.dbt.get_replace_materialized_view_as_sql": { "name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n {{- log('Applying REPLACE to: ' ~ relation) -}}\n {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_replace_materialized_view_as_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7693892, "supported_languages": null }, "macro.dbt.default__get_replace_materialized_view_as_sql": { "name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7697911, "supported_languages": null }, "macro.dbt.cast_bool_to_text": { "name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7703376, "supported_languages": null }, "macro.dbt.default__cast_bool_to_text": { "name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.770712, "supported_languages": null }, "macro.dbt.datediff": { "name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7714224, "supported_languages": null }, "macro.dbt.default__datediff": { "name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n datediff(\n {{ datepart }},\n {{ first_date }},\n {{ second_date }}\n )\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7718065, "supported_languages": null }, "macro.dbt.safe_cast": { "name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__safe_cast" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.772473, "supported_languages": null }, "macro.dbt.default__safe_cast": { "name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n {# most databases don't support this function yet\n so we just need to use cast #}\n cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7728078, "supported_languages": null }, "macro.dbt.except": { "name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7733176, "supported_languages": null }, "macro.dbt.default__except": { "name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n except\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.77351, "supported_languages": null }, "macro.dbt.dateadd": { "name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7742178, "supported_languages": null }, "macro.dbt.default__dateadd": { "name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n dateadd(\n {{ datepart }},\n {{ interval }},\n {{ from_date_or_timestamp }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7746067, "supported_languages": null }, "macro.dbt.split_part": { "name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7755773, "supported_languages": null }, "macro.dbt.default__split_part": { "name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7760434, "supported_languages": null }, "macro.dbt._split_part_negative": { "name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n split_part(\n {{ string_text }},\n {{ delimiter_text }},\n length({{ string_text }})\n - length(\n replace({{ string_text }}, {{ delimiter_text }}, '')\n ) + 2 + {{ part_number }}\n )\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7765608, "supported_languages": null }, "macro.dbt.last_day": { "name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7774293, "supported_languages": null }, "macro.dbt.default_last_day": { "name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n cast(\n {{dbt.dateadd('day', '-1',\n dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n )}}\n as date)\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.dateadd", "macro.dbt.date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7780547, "supported_languages": null }, "macro.dbt.default__last_day": { "name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default_last_day" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7784016, "supported_languages": null }, "macro.dbt.intersect": { "name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__intersect" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7789168, "supported_languages": null }, "macro.dbt.default__intersect": { "name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n intersect\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7791097, "supported_languages": null }, "macro.dbt.right": { "name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__right" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7797434, "supported_languages": null }, "macro.dbt.default__right": { "name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n right(\n {{ string_text }},\n {{ length_expression }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7800894, "supported_languages": null }, "macro.dbt.escape_single_quotes": { "name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__escape_single_quotes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7806973, "supported_languages": null }, "macro.dbt.default__escape_single_quotes": { "name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7810266, "supported_languages": null }, "macro.dbt.array_construct": { "name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__array_construct" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7818403, "supported_languages": null }, "macro.dbt.default__array_construct": { "name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n {% if inputs|length > 0 %}\n array[ {{ inputs|join(' , ') }} ]\n {% else %}\n array[]::{{data_type}}[]\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7823937, "supported_languages": null }, "macro.dbt.type_string": { "name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7842238, "supported_languages": null }, "macro.dbt.default__type_string": { "name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7845888, "supported_languages": null }, "macro.dbt.type_timestamp": { "name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7849624, "supported_languages": null }, "macro.dbt.default__type_timestamp": { "name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7853217, "supported_languages": null }, "macro.dbt.type_float": { "name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_float" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7856987, "supported_languages": null }, "macro.dbt.default__type_float": { "name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7860498, "supported_languages": null }, "macro.dbt.type_numeric": { "name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7864234, "supported_languages": null }, "macro.dbt.default__type_numeric": { "name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.786827, "supported_languages": null }, "macro.dbt.type_bigint": { "name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_bigint" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.787204, "supported_languages": null }, "macro.dbt.default__type_bigint": { "name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7875628, "supported_languages": null }, "macro.dbt.type_int": { "name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_int" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7879596, "supported_languages": null }, "macro.dbt.default__type_int": { "name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7884393, "supported_languages": null }, "macro.dbt.type_boolean": { "name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__type_boolean" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7888358, "supported_languages": null }, "macro.dbt.default__type_boolean": { "name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.789183, "supported_languages": null }, "macro.dbt.string_literal": { "name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt.default__string_literal" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7897413, "supported_languages": null }, "macro.dbt.default__string_literal": { "name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n '{{ value }}'\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7899978, "supported_languages": null }, "macro.dbt.array_concat": { "name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__array_concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7906113, "supported_languages": null }, "macro.dbt.default__array_concat": { "name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7909272, "supported_languages": null }, "macro.dbt.position": { "name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__position" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7915578, "supported_languages": null }, "macro.dbt.default__position": { "name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n position(\n {{ substring_text }} in {{ string_text }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7918992, "supported_languages": null }, "macro.dbt.length": { "name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__length" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7924774, "supported_languages": null }, "macro.dbt.default__length": { "name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n length(\n {{ expression }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7927375, "supported_languages": null }, "macro.dbt.listagg": { "name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__listagg" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7939122, "supported_languages": null }, "macro.dbt.default__listagg": { "name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n {% if limit_num -%}\n array_to_string(\n array_slice(\n array_agg(\n {{ measure }}\n ){% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n ,0\n ,{{ limit_num }}\n ),\n {{ delimiter_text }}\n )\n {%- else %}\n listagg(\n {{ measure }},\n {{ delimiter_text }}\n )\n {% if order_by_clause -%}\n within group ({{ order_by_clause }})\n {%- endif %}\n {%- endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7948182, "supported_languages": null }, "macro.dbt.array_append": { "name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__array_append" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7954438, "supported_languages": null }, "macro.dbt.default__array_append": { "name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7957613, "supported_languages": null }, "macro.dbt.any_value": { "name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__any_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7963533, "supported_languages": null }, "macro.dbt.default__any_value": { "name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.79661, "supported_languages": null }, "macro.dbt.replace": { "name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7973068, "supported_languages": null }, "macro.dbt.default__replace": { "name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n replace(\n {{ field }},\n {{ old_chars }},\n {{ new_chars }}\n )\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7976956, "supported_languages": null }, "macro.dbt.concat": { "name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7982414, "supported_languages": null }, "macro.dbt.default__concat": { "name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.798549, "supported_languages": null }, "macro.dbt.hash": { "name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__hash" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.7991114, "supported_languages": null }, "macro.dbt.default__hash": { "name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.799493, "supported_languages": null }, "macro.dbt.date_trunc": { "name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__date_trunc" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8001268, "supported_languages": null }, "macro.dbt.default__date_trunc": { "name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8006098, "supported_languages": null }, "macro.dbt.bool_or": { "name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__bool_or" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8011773, "supported_languages": null }, "macro.dbt.default__bool_or": { "name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8014293, "supported_languages": null }, "macro.dbt.validate_sql": { "name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__validate_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8020384, "supported_languages": null }, "macro.dbt.default__validate_sql": { "name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n {% call statement('validate_sql') -%}\n explain {{ sql }}\n {% endcall %}\n {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8025556, "supported_languages": null }, "macro.dbt.drop_relation": { "name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__drop_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.804147, "supported_languages": null }, "macro.dbt.default__drop_relation": { "name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n {% call statement('drop_relation', auto_begin=False) -%}\n {%- if relation.is_table -%}\n {{- drop_table(relation) -}}\n {%- elif relation.is_view -%}\n {{- drop_view(relation) -}}\n {%- elif relation.is_materialized_view -%}\n {{- drop_materialized_view(relation) -}}\n {%- else -%}\n drop {{ relation.type }} if exists {{ relation }} cascade\n {%- endif -%}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8051748, "supported_languages": null }, "macro.dbt.drop_table": { "name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8055987, "supported_languages": null }, "macro.dbt.default__drop_table": { "name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8058522, "supported_languages": null }, "macro.dbt.drop_view": { "name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_view" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8062553, "supported_languages": null }, "macro.dbt.default__drop_view": { "name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8065078, "supported_languages": null }, "macro.dbt.drop_materialized_view": { "name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_materialized_view" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.80691, "supported_languages": null }, "macro.dbt.default__drop_materialized_view": { "name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.807161, "supported_languages": null }, "macro.dbt.get_columns_in_relation": { "name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8107805, "supported_languages": null }, "macro.dbt.default__get_columns_in_relation": { "name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n {{ exceptions.raise_not_implemented(\n 'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8111606, "supported_languages": null }, "macro.dbt.sql_convert_columns_in_relation": { "name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n {% set columns = [] %}\n {% for row in table %}\n {% do columns.append(api.Column(*row)) %}\n {% endfor %}\n {{ return(columns) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.811887, "supported_languages": null }, "macro.dbt.get_empty_subquery_sql": { "name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_empty_subquery_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.812405, "supported_languages": null }, "macro.dbt.default__get_empty_subquery_sql": { "name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n {%- if select_sql_header is not none -%}\n {{ select_sql_header }}\n {%- endif -%}\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from (\n {{ select_sql }}\n ) as __dbt_sbq\n where false\n limit 0\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8128664, "supported_languages": null }, "macro.dbt.get_empty_schema_sql": { "name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_empty_schema_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8132782, "supported_languages": null }, "macro.dbt.default__get_empty_schema_sql": { "name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n {%- set col_err = [] -%}\n select\n {% for i in columns %}\n {%- set col = columns[i] -%}\n {%- if col['data_type'] is not defined -%}\n {{ col_err.append(col['name']) }}\n {%- endif -%}\n {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n {%- endfor -%}\n {%- if (col_err | length) > 0 -%}\n {{ exceptions.column_type_missing(column_names=col_err) }}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.815076, "supported_languages": null }, "macro.dbt.get_column_schema_from_query": { "name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n {% set columns = [] %}\n {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n {{ return(column_schema) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_empty_subquery_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8158727, "supported_languages": null }, "macro.dbt.get_columns_in_query": { "name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_columns_in_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8163126, "supported_languages": null }, "macro.dbt.default__get_columns_in_query": { "name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n {{ get_empty_subquery_sql(select_sql) }}\n {% endcall %}\n {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.get_empty_subquery_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8170834, "supported_languages": null }, "macro.dbt.alter_column_type": { "name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_type" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.817599, "supported_languages": null }, "macro.dbt.default__alter_column_type": { "name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n {#\n 1. Create a new column (w/ temp name and correct type)\n 2. Copy data over to it\n 3. Drop the existing column (cascade!)\n 4. Rename the new column to existing column\n #}\n {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n {% call statement('alter_column_type') %}\n alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n {% endcall %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8189056, "supported_languages": null }, "macro.dbt.alter_relation_add_remove_columns": { "name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.819483, "supported_languages": null }, "macro.dbt.default__alter_relation_add_remove_columns": { "name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n {% if add_columns is none %}\n {% set add_columns = [] %}\n {% endif %}\n {% if remove_columns is none %}\n {% set remove_columns = [] %}\n {% endif %}\n\n {% set sql -%}\n\n alter {{ relation.type }} {{ relation }}\n\n {% for column in add_columns %}\n add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n {% for column in remove_columns %}\n drop column {{ column.name }}{{ ',' if not loop.last }}\n {% endfor %}\n\n {%- endset -%}\n\n {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8212335, "supported_languages": null }, "macro.dbt.make_intermediate_relation": { "name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_intermediate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8255844, "supported_languages": null }, "macro.dbt.default__make_intermediate_relation": { "name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.825973, "supported_languages": null }, "macro.dbt.make_temp_relation": { "name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_temp_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8264658, "supported_languages": null }, "macro.dbt.default__make_temp_relation": { "name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n {%- set temp_relation = base_relation.incorporate(\n path={\"identifier\": temp_identifier}) -%}\n\n {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.827112, "supported_languages": null }, "macro.dbt.make_backup_relation": { "name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__make_backup_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8276627, "supported_languages": null }, "macro.dbt.default__make_backup_relation": { "name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n {%- set backup_relation = base_relation.incorporate(\n path={\"identifier\": backup_identifier},\n type=backup_relation_type\n ) -%}\n {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.828418, "supported_languages": null }, "macro.dbt.truncate_relation": { "name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__truncate_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8288438, "supported_languages": null }, "macro.dbt.default__truncate_relation": { "name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n {% call statement('truncate_relation') -%}\n truncate table {{ relation }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8292243, "supported_languages": null }, "macro.dbt.rename_relation": { "name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__rename_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.829681, "supported_languages": null }, "macro.dbt.default__rename_relation": { "name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n {% call statement('rename_relation') -%}\n alter table {{ from_relation }} rename to {{ target_name }}\n {%- endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.830317, "supported_languages": null }, "macro.dbt.get_or_create_relation": { "name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_or_create_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8308802, "supported_languages": null }, "macro.dbt.default__get_or_create_relation": { "name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n {% if target_relation %}\n {% do return([true, target_relation]) %}\n {% endif %}\n\n {%- set new_relation = api.Relation.create(\n database=database,\n schema=schema,\n identifier=identifier,\n type=type\n ) -%}\n {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8321095, "supported_languages": null }, "macro.dbt.load_cached_relation": { "name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n {% do return(adapter.get_relation(\n database=relation.database,\n schema=relation.schema,\n identifier=relation.identifier\n )) -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8326435, "supported_languages": null }, "macro.dbt.load_relation": { "name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_cached_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.832985, "supported_languages": null }, "macro.dbt.drop_relation_if_exists": { "name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n {% if relation is not none %}\n {{ adapter.drop_relation(relation) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.833423, "supported_languages": null }, "macro.dbt.alter_column_comment": { "name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8346632, "supported_languages": null }, "macro.dbt.default__alter_column_comment": { "name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8350477, "supported_languages": null }, "macro.dbt.alter_relation_comment": { "name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__alter_relation_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8356712, "supported_languages": null }, "macro.dbt.default__alter_relation_comment": { "name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n {{ exceptions.raise_not_implemented(\n 'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.836092, "supported_languages": null }, "macro.dbt.persist_docs": { "name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__persist_docs" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8367004, "supported_languages": null }, "macro.dbt.default__persist_docs": { "name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n {% if for_relation and config.persist_relation_docs() and model.description %}\n {% do run_query(alter_relation_comment(relation, model.description)) %}\n {% endif %}\n\n {% if for_columns and config.persist_column_docs() and model.columns %}\n {% do run_query(alter_column_comment(relation, model.columns)) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.837755, "supported_languages": null }, "macro.dbt.current_timestamp": { "name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8386939, "supported_languages": null }, "macro.dbt.default__current_timestamp": { "name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n {{ exceptions.raise_not_implemented(\n 'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8390427, "supported_languages": null }, "macro.dbt.snapshot_get_time": { "name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__snapshot_get_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8393762, "supported_languages": null }, "macro.dbt.default__snapshot_get_time": { "name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n {{ current_timestamp() }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8396277, "supported_languages": null }, "macro.dbt.current_timestamp_backcompat": { "name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8400307, "supported_languages": null }, "macro.dbt.default__current_timestamp_backcompat": { "name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n current_timestamp::timestamp\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8402324, "supported_languages": null }, "macro.dbt.current_timestamp_in_utc_backcompat": { "name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8406148, "supported_languages": null }, "macro.dbt.default__current_timestamp_in_utc_backcompat": { "name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8409984, "supported_languages": null }, "macro.dbt.get_create_index_sql": { "name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_create_index_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8425052, "supported_languages": null }, "macro.dbt.default__get_create_index_sql": { "name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n {% do return(None) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.842833, "supported_languages": null }, "macro.dbt.create_indexes": { "name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_indexes" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8432, "supported_languages": null }, "macro.dbt.default__create_indexes": { "name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n {%- set _indexes = config.get('indexes', default=[]) -%}\n\n {% for _index_dict in _indexes %}\n {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n {% if create_index_sql %}\n {% do run_query(create_index_sql) %}\n {% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_create_index_sql", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8441253, "supported_languages": null }, "macro.dbt.get_drop_index_sql": { "name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_drop_index_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8445756, "supported_languages": null }, "macro.dbt.default__get_drop_index_sql": { "name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8448982, "supported_languages": null }, "macro.dbt.get_show_indexes_sql": { "name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_show_indexes_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8452606, "supported_languages": null }, "macro.dbt.default__get_show_indexes_sql": { "name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8455563, "supported_languages": null }, "macro.dbt.copy_grants": { "name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8484359, "supported_languages": null }, "macro.dbt.default__copy_grants": { "name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n {{ return(True) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8487413, "supported_languages": null }, "macro.dbt.support_multiple_grantees_per_dcl_statement": { "name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8491254, "supported_languages": null }, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": { "name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8498166, "supported_languages": null }, "macro.dbt.should_revoke": { "name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n {% if not existing_relation %}\n {#-- The table doesn't already exist, so no grants to copy over --#}\n {{ return(False) }}\n {% elif full_refresh_mode %}\n {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n {{ return(copy_grants()) }}\n {% else %}\n {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n {{ return(True) }}\n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.copy_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.850598, "supported_languages": null }, "macro.dbt.get_show_grant_sql": { "name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_show_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8510232, "supported_languages": null }, "macro.dbt.default__get_show_grant_sql": { "name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n show grants on {{ relation }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8512714, "supported_languages": null }, "macro.dbt.get_grant_sql": { "name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_grant_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8517742, "supported_languages": null }, "macro.dbt.default__get_grant_sql": { "name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.852245, "supported_languages": null }, "macro.dbt.get_revoke_sql": { "name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_revoke_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8527575, "supported_languages": null }, "macro.dbt.default__get_revoke_sql": { "name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8531885, "supported_languages": null }, "macro.dbt.get_dcl_statement_list": { "name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_dcl_statement_list" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8536994, "supported_languages": null }, "macro.dbt.default__get_dcl_statement_list": { "name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n {#\n -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n #}\n {%- set dcl_statements = [] -%}\n {%- for privilege, grantees in grant_config.items() %}\n {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n {%- do dcl_statements.append(dcl) -%}\n {%- else -%}\n {%- for grantee in grantees -%}\n {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n {%- do dcl_statements.append(dcl) -%}\n {% endfor -%}\n {%- endif -%}\n {%- endfor -%}\n {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.support_multiple_grantees_per_dcl_statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8551583, "supported_languages": null }, "macro.dbt.call_dcl_statements": { "name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.855595, "supported_languages": null }, "macro.dbt.default__call_dcl_statements": { "name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n {#\n -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n -- so that they're all processed together.\n\n -- Some databases do not support this. Those adapters will need to override this macro\n -- to run each statement individually.\n #}\n {% call statement('grants') %}\n {% for dcl_statement in dcl_statement_list %}\n {{ dcl_statement }};\n {% endfor %}\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8561897, "supported_languages": null }, "macro.dbt.apply_grants": { "name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__apply_grants" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8567245, "supported_languages": null }, "macro.dbt.default__apply_grants": { "name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n {#-- If grant_config is {} or None, this is a no-op --#}\n {% if grant_config %}\n {% if should_revoke %}\n {#-- We think previous grants may have carried over --#}\n {#-- Show current grants and calculate diffs --#}\n {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n {% if not (needs_granting or needs_revoking) %}\n {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n {% endif %}\n {% else %}\n {#-- We don't think there's any chance of previous grants having carried over. --#}\n {#-- Jump straight to granting what the user has configured. --#}\n {% set needs_revoking = {} %}\n {% set needs_granting = grant_config %}\n {% endif %}\n {% if needs_granting or needs_revoking %}\n {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n {% if dcl_statement_list %}\n {{ call_dcl_statements(dcl_statement_list) }}\n {% endif %}\n {% endif %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8591685, "supported_languages": null }, "macro.dbt.get_catalog": { "name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__get_catalog" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8616881, "supported_languages": null }, "macro.dbt.default__get_catalog": { "name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n {% set typename = adapter.type() %}\n {% set msg -%}\n get_catalog not implemented for {{ typename }}\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8622859, "supported_languages": null }, "macro.dbt.information_schema_name": { "name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__information_schema_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8627148, "supported_languages": null }, "macro.dbt.default__information_schema_name": { "name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n {%- if database -%}\n {{ database }}.INFORMATION_SCHEMA\n {%- else -%}\n INFORMATION_SCHEMA\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8630888, "supported_languages": null }, "macro.dbt.list_schemas": { "name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_schemas" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.863502, "supported_languages": null }, "macro.dbt.default__list_schemas": { "name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n {% set sql %}\n select distinct schema_name\n from {{ information_schema_name(database) }}.SCHEMATA\n where catalog_name ilike '{{ database }}'\n {% endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.information_schema_name", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8640847, "supported_languages": null }, "macro.dbt.check_schema_exists": { "name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__check_schema_exists" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8645694, "supported_languages": null }, "macro.dbt.default__check_schema_exists": { "name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n {% set sql -%}\n select count(*)\n from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n where catalog_name='{{ information_schema.database }}'\n and schema_name='{{ schema }}'\n {%- endset %}\n {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.replace", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.8652568, "supported_languages": null }, "macro.dbt.list_relations_without_caching": { "name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_snowflake.snowflake__list_relations_without_caching" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9286473, "supported_languages": null }, "macro.dbt.default__list_relations_without_caching": { "name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n {{ exceptions.raise_not_implemented(\n 'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.929098, "supported_languages": null }, "macro.dbt.get_show_sql": { "name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n {%- if sql_header -%}\n {{ sql_header }}\n {%- endif -%}\n {%- if limit is not none -%}\n {{ get_limit_subquery_sql(compiled_code, limit) }}\n {%- else -%}\n {{ compiled_code }}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.get_limit_subquery_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9301977, "supported_languages": null }, "macro.dbt.get_limit_subquery_sql": { "name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__get_limit_subquery_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9306436, "supported_languages": null }, "macro.dbt.default__get_limit_subquery_sql": { "name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n select *\n from (\n {{ sql }}\n ) as model_limit_subq\n limit {{ limit }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.930967, "supported_languages": null }, "macro.dbt.create_schema": { "name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__create_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.931734, "supported_languages": null }, "macro.dbt.default__create_schema": { "name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n {%- call statement('create_schema') -%}\n create schema if not exists {{ relation.without_identifier() }}\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9322073, "supported_languages": null }, "macro.dbt.drop_schema": { "name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__drop_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9326007, "supported_languages": null }, "macro.dbt.default__drop_schema": { "name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n {%- call statement('drop_schema') -%}\n drop schema if exists {{ relation.without_identifier() }} cascade\n {% endcall %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9330385, "supported_languages": null }, "macro.dbt.collect_freshness": { "name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__collect_freshness" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9339035, "supported_languages": null }, "macro.dbt.default__collect_freshness": { "name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n select\n max({{ loaded_at_field }}) as max_loaded_at,\n {{ current_timestamp() }} as snapshotted_at\n from {{ source }}\n {% if filter %}\n where {{ filter }}\n {% endif %}\n {% endcall %}\n {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.current_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9348307, "supported_languages": null }, "macro.dbt.default__test_relationships": { "name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n select {{ column_name }} as from_field\n from {{ model }}\n where {{ column_name }} is not null\n),\n\nparent as (\n select {{ field }} as to_field\n from {{ to }}\n)\n\nselect\n from_field\n\nfrom child\nleft join parent\n on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9355977, "supported_languages": null }, "macro.dbt.default__test_accepted_values": { "name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n select\n {{ column_name }} as value_field,\n count(*) as n_records\n\n from {{ model }}\n group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9368443, "supported_languages": null }, "macro.dbt.default__test_not_null": { "name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_store_failures" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9375246, "supported_languages": null }, "macro.dbt.default__test_unique": { "name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n {{ column_name }} as unique_field,\n count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.938069, "supported_languages": null }, "macro.dbt.convert_datetime": { "name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n {% set error_msg -%}\n The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n {%- endset %}\n\n {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n {{ return(res) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9411068, "supported_languages": null }, "macro.dbt.dates_in_range": { "name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n {% set day_count = (end_date - start_date).days %}\n {% if day_count < 0 %}\n {% set msg -%}\n Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n {%- endset %}\n\n {{ exceptions.raise_compiler_error(msg, model) }}\n {% endif %}\n\n {% set date_list = [] %}\n {% for i in range(0, day_count + 1) %}\n {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n {% if not out_fmt %}\n {% set _ = date_list.append(the_date) %}\n {% else %}\n {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n {% endif %}\n {% endfor %}\n\n {{ return(date_list) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.convert_datetime" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9438584, "supported_languages": null }, "macro.dbt.partition_range": { "name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n {% if (partition_range | length) == 1 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = none %}\n {% elif (partition_range | length) == 2 %}\n {% set start_date = partition_range[0] %}\n {% set end_date = partition_range[1] %}\n {% else %}\n {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n {% endif %}\n\n {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.dates_in_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9455338, "supported_languages": null }, "macro.dbt.py_current_timestring": { "name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n {% set dt = modules.datetime.datetime.now() %}\n {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9460835, "supported_languages": null }, "macro.dbt.statement": { "name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n {%- if execute: -%}\n {%- set compiled_code = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n {{ write(compiled_code) }}\n {%- endif -%}\n {%- if language == 'sql'-%}\n {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n {%- elif language == 'python' -%}\n {%- set res = submit_python_job(model, compiled_code) -%}\n {#-- TODO: What should table be for python models? --#}\n {%- set table = None -%}\n {%- else -%}\n {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_result(name, response=res, agate_table=table) }}\n {%- endif -%}\n\n {%- endif -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9490812, "supported_languages": null }, "macro.dbt.noop_statement": { "name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n {%- set sql = caller() -%}\n\n {%- if name == 'main' -%}\n {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n {{ write(sql) }}\n {%- endif -%}\n\n {%- if name is not none -%}\n {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9503534, "supported_languages": null }, "macro.dbt.run_query": { "name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n {{ sql }}\n {% endcall %}\n\n {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9510286, "supported_languages": null }, "macro.dbt.resolve_model_name": { "name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.default__resolve_model_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9537191, "supported_languages": null }, "macro.dbt.default__resolve_model_name": { "name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n {{ input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9540834, "supported_languages": null }, "macro.dbt.build_ref_function": { "name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n {%- set ref_dict = {} -%}\n {%- for _ref in model.refs -%}\n {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n {%- if _ref.get('version') -%}\n {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n {%- endif -%}\n {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n {%- endfor -%}\n\ndef ref(*args, **kwargs):\n refs = {{ ref_dict | tojson }}\n key = '.'.join(args)\n version = kwargs.get(\"v\") or kwargs.get(\"version\")\n if version:\n key += f\".v{version}\"\n dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.resolve_model_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.955865, "supported_languages": null }, "macro.dbt.build_source_function": { "name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n {%- set source_dict = {} -%}\n {%- for _source in model.sources -%}\n {%- set resolved = source(*_source) -%}\n {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n sources = {{ source_dict | tojson }}\n key = '.'.join(args)\n return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.resolve_model_name" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9568038, "supported_languages": null }, "macro.dbt.build_config_dict": { "name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n {%- set config_dict = {} -%}\n {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n {%- for key, default in config_dbt_used -%}\n {# weird type testing with enum, would be much easier to write this logic in Python! #}\n {%- if key == \"language\" -%}\n {%- set value = \"python\" -%}\n {%- endif -%}\n {%- set value = model.config.get(key, default) -%}\n {%- do config_dict.update({key: value}) -%}\n {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9580863, "supported_languages": null }, "macro.dbt.py_script_postfix": { "name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n def __init__(self, *args, **kwargs):\n pass\n\n @staticmethod\n def get(key, default=None):\n return config_dict.get(key, default)\n\nclass this:\n \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n database = \"{{ this.database }}\"\n schema = \"{{ this.schema }}\"\n identifier = \"{{ this.identifier }}\"\n {% set this_relation_name = resolve_model_name(this) %}\n def __repr__(self):\n return '{{ this_relation_name }}'\n\n\nclass dbtObj:\n def __init__(self, load_df_function) -> None:\n self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n self.config = config\n self.this = this()\n self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9591196, "supported_languages": null }, "macro.dbt.py_script_comment": { "name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9593089, "supported_languages": null }, "macro.dbt.test_unique": { "name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_unique" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9603505, "supported_languages": null }, "macro.dbt.test_not_null": { "name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_not_null" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9608848, "supported_languages": null }, "macro.dbt.test_accepted_values": { "name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.961523, "supported_languages": null }, "macro.dbt.test_relationships": { "name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt.default__test_relationships" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9621406, "supported_languages": null }, "macro.dbt_utils.star": { "name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__star" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9643185, "supported_languages": null }, "macro.dbt_utils.default__star": { "name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n {%- do dbt_utils._is_relation(from, 'star') -%}\r\n {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n {%- if not execute -%}\r\n {% do return('*') %}\r\n {%- endif -%}\r\n\r\n {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n {%- if cols|length <= 0 -%}\r\n {% if flags.WHICH == 'compile' %}\r\n {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n {% endset %}\r\n {% do return(response) %}\r\n {% else %}\r\n {% do return(\"/* no columns returned from star() macro */\") %}\r\n {% endif %}\r\n {%- else -%}\r\n {%- for col in cols %}\r\n {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n {%- if quote_identifiers -%}\r\n {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n {%- else -%}\r\n {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n {% endif %}\r\n {%- if not loop.last %},{{ '\\n ' }}{%- endif -%}\r\n {%- endfor -%}\r\n {% endif %}\r\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9675624, "supported_languages": null }, "macro.dbt_utils.get_single_value": { "name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_single_value" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9686275, "supported_languages": null }, "macro.dbt_utils.default__get_single_value": { "name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n {{ query }}\n\n {%- endcall -%}\n\n {%- if execute -%}\n\n {% set r = load_result('get_query_result').table.columns[0].values() %}\n {% if r | length == 0 %}\n {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n {% set sql_result = default %}\n {% else %}\n {% set sql_result = r[0] %}\n {% endif %}\n \n {%- else -%}\n \n {% set sql_result = default %}\n \n {%- endif -%}\n\n {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9702394, "supported_languages": null }, "macro.dbt_utils.get_intervals_between": { "name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_intervals_between" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.971531, "supported_languages": null }, "macro.dbt_utils.default__get_intervals_between": { "name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n {%- call statement('get_intervals_between', fetch_result=True) %}\n\n select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_intervals_between') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values[0]) }}\n {%- else -%}\n {{ return(1) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt.datediff" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9728718, "supported_languages": null }, "macro.dbt_utils.date_spine": { "name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__date_spine" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9734097, "supported_languages": null }, "macro.dbt_utils.default__date_spine": { "name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n \"day\",\n \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n {{dbt_utils.generate_series(\n dbt_utils.get_intervals_between(start_date, end_date, datepart)\n )}}\n\n),\n\nall_periods as (\n\n select (\n {{\n dbt.dateadd(\n datepart,\n \"row_number() over (order by 1) - 1\",\n start_date\n )\n }}\n ) as date_{{datepart}}\n from rawdata\n\n),\n\nfiltered as (\n\n select *\n from all_periods\n where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from filtered\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.974213, "supported_languages": null }, "macro.dbt_utils.deduplicate": { "name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9755294, "supported_languages": null }, "macro.dbt_utils.default__deduplicate": { "name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n with row_numbered as (\n select\n _inner.*,\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) as rn\n from {{ relation }} as _inner\n )\n\n select\n distinct data.*\n from {{ relation }} as data\n {#\n -- Not all DBs will support natural joins but the ones that do include:\n -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n -- Apache Spark, SingleStore, Vertica\n -- Those that do not appear to support natural joins include:\n -- SQLServer, Trino, Presto, Rockset, Athena\n #}\n natural join row_numbered\n where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9760406, "supported_languages": null }, "macro.dbt_utils.redshift__deduplicate": { "name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__deduplicate" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9765127, "supported_languages": null }, "macro.dbt_utils.postgres__deduplicate": { "name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n select\n distinct on ({{ partition_by }}) *\n from {{ relation }}\n order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9769592, "supported_languages": null }, "macro.dbt_utils.snowflake__deduplicate": { "name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n select *\n from {{ relation }}\n qualify\n row_number() over (\n partition by {{ partition_by }}\n order by {{ order_by }}\n ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9773493, "supported_languages": null }, "macro.dbt_utils.bigquery__deduplicate": { "name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n select unique.*\n from (\n select\n array_agg (\n original\n order by {{ order_by }}\n limit 1\n )[offset(0)] unique\n from {{ relation }} original\n group by {{ partition_by }}\n )\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9777498, "supported_languages": null }, "macro.dbt_utils.group_by": { "name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__group_by" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.978369, "supported_languages": null }, "macro.dbt_utils.default__group_by": { "name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n group by {% for i in range(1, n + 1) -%}\n {{ i }}{{ ',' if not loop.last }} \n {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.978941, "supported_languages": null }, "macro.dbt_utils.get_query_results_as_dict": { "name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_query_results_as_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9797375, "supported_languages": null }, "macro.dbt_utils.default__get_query_results_as_dict": { "name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n {{ query }}\n\n {%- endcall -%}\n\n {% set sql_results={} %}\n\n {%- if execute -%}\n {% set sql_results_table = load_result('get_query_results').table.columns %}\n {% for column_name, column in sql_results_table.items() %}\n {% do sql_results.update({column_name: column.values()}) %}\n {% endfor %}\n {%- endif -%}\n\n {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9810836, "supported_languages": null }, "macro.dbt_utils.generate_surrogate_key": { "name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__generate_surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9820004, "supported_languages": null }, "macro.dbt_utils.default__generate_surrogate_key": { "name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n {%- set default_null_value = \"\" -%}\n{%- else -%}\n {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n {%- do fields.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value ~\"')\"\n ) -%}\n\n {%- if not loop.last %}\n {%- do fields.append(\"'-'\") -%}\n {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9833963, "supported_languages": null }, "macro.dbt_utils.pivot": { "name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9853618, "supported_languages": null }, "macro.dbt_utils.default__pivot": { "name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n values,\n alias=True,\n agg='sum',\n cmp='=',\n prefix='',\n suffix='',\n then_value=1,\n else_value=0,\n quote_identifiers=True,\n distinct=False) %}\n {% for value in values %}\n {{ agg }}(\n {% if distinct %} distinct {% endif %}\n case\n when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n then {{ then_value }}\n else {{ else_value }}\n end\n )\n {% if alias %}\n {% if quote_identifiers %}\n as {{ adapter.quote(prefix ~ value ~ suffix) }}\n {% else %}\n as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n {% endif %}\n {% endif %}\n {% if not loop.last %},{% endif %}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9873476, "supported_languages": null }, "macro.dbt_utils.get_relations_by_prefix": { "name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_prefix" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9886656, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_prefix": { "name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9905145, "supported_languages": null }, "macro.dbt_utils.nullcheck_table": { "name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9911988, "supported_languages": null }, "macro.dbt_utils.default__nullcheck_table": { "name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n {% set cols = adapter.get_columns_in_relation(relation) %}\n\n select {{ dbt_utils.nullcheck(cols) }}\n from {{relation}}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9919941, "supported_languages": null }, "macro.dbt_utils.safe_subtract": { "name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__safe_subtract" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9928002, "supported_languages": null }, "macro.dbt_utils.default__safe_subtract": { "name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n ') }}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.993991, "supported_languages": null }, "macro.dbt_utils.degrees_to_radians": { "name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n acos(-1) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch {{degrees}} / 180\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.995788, "supported_languages": null }, "macro.dbt_utils.haversine_distance": { "name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__haversine_distance" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9964418, "supported_languages": null }, "macro.dbt_utils.default__haversine_distance": { "name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n 2 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3961 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n cos(radians({{lat1}})) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch cos(radians({{lat2}})) *\n power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.9976652, "supported_languages": null }, "macro.dbt_utils.bigquery__haversine_distance": { "name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n {% set conversion_rate = 1.60934 %}\n{% else %}\n {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n 2 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3961 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n cos({{ radians_lat1 }}) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch cos({{ radians_lat2 }}) *\n power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.degrees_to_radians" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212554.999465, "supported_languages": null }, "macro.dbt_utils.get_powers_of_two": { "name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0009918, "supported_languages": null }, "macro.dbt_utils.default__get_powers_of_two": { "name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n {% if upper_bound <= 0 %}\n {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n {% endif %}\n\n {% for _ in range(1, 100) %}\n {% if upper_bound <= 2 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch loop.index %}{{ return(loop.index) }}{% endif %}\n {% endfor %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0019283, "supported_languages": null }, "macro.dbt_utils.generate_series": { "name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__generate_series" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.002372, "supported_languages": null }, "macro.dbt_utils.default__generate_series": { "name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n with p as (\n select 0 as generated_number union all select 1\n ), unioned as (\n\n select\n\n {% for i in range(n) %}\n p{{i}}.generated_number README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch power(2, {{i}})\n {% if not loop.last %} + {% endif %}\n {% endfor %}\n + 1\n as generated_number\n\n from\n\n {% for i in range(n) %}\n p as p{{i}}\n {% if not loop.last %} cross join {% endif %}\n {% endfor %}\n\n )\n\n select *\n from unioned\n where generated_number <= {{upper_bound}}\n order by generated_number\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_powers_of_two" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.003536, "supported_languages": null }, "macro.dbt_utils.get_column_values": { "name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_column_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0055487, "supported_languages": null }, "macro.dbt_utils.default__get_column_values": { "name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {% set default = [] if not default %}\n {{ return(default) }}\n {% endif %}\n\n {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n {# TODO: Change the method signature in a future 0.x.0 release #}\n {%- set target_relation = table -%}\n\n {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n {%- call statement('get_column_values', fetch_result=true) %}\n\n {%- if not relation_exists and default is none -%}\n\n {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n {%- elif not relation_exists and default is not none -%}\n\n {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n {{ return(default) }}\n\n {%- else -%}\n\n\n select\n {{ column }} as value\n\n from {{ target_relation }}\n\n {% if where is not none %}\n where {{ where }}\n {% endif %}\n\n group by {{ column }}\n order by {{ order_by }}\n\n {% if max_records is not none %}\n limit {{ max_records }}\n {% endif %}\n\n {% endif %}\n\n {%- endcall -%}\n\n {%- set value_list = load_result('get_column_values') -%}\n\n {%- if value_list and value_list['data'] -%}\n {%- set values = value_list['data'] | map(attribute=0) | list %}\n {{ return(values) }}\n {%- else -%}\n {{ return(default) }}\n {%- endif -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0090013, "supported_languages": null }, "macro.dbt_utils.get_tables_by_pattern_sql": { "name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0117228, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_pattern_sql": { "name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n select distinct\n table_schema as {{ adapter.quote('table_schema') }},\n table_name as {{ adapter.quote('table_name') }},\n {{ dbt_utils.get_table_types_sql() }}\n from {{ database }}.information_schema.tables\n where table_schema ilike '{{ schema_pattern }}'\n and table_name ilike '{{ table_pattern }}'\n and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.012561, "supported_languages": null }, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": { "name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {% if '%' in schema_pattern %}\n {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n {% else %}\n {% set schemata=[schema_pattern] %}\n {% endif %}\n\n {% set sql %}\n {% for schema in schemata %}\n select distinct\n table_schema,\n table_name,\n {{ dbt_utils.get_table_types_sql() }}\n\n from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n where lower(table_name) like lower ('{{ table_pattern }}')\n and lower(table_name) not like lower ('{{ exclude }}')\n\n {% if not loop.last %} union all {% endif %}\n\n {% endfor %}\n {% endset %}\n\n {{ return(sql) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0141456, "supported_languages": null }, "macro.dbt_utils._bigquery__get_matching_schemata": { "name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n {% if execute %}\n\n {% set sql %}\n select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n where lower(schema_name) like lower('{{ schema_pattern }}')\n {% endset %}\n\n {% set results=run_query(sql) %}\n\n {% set schemata=results.columns['schema_name'].values() %}\n\n {{ return(schemata) }}\n\n {% else %}\n\n {{ return([]) }}\n\n {% endif %}\n\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0152795, "supported_languages": null }, "macro.dbt_utils.get_tables_by_prefix_sql": { "name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_tables_by_prefix_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0161693, "supported_languages": null }, "macro.dbt_utils.default__get_tables_by_prefix_sql": { "name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(\n schema_pattern = schema,\n table_pattern = prefix ~ '%',\n exclude = exclude,\n database = database\n ) }}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0168202, "supported_languages": null }, "macro.dbt_utils.get_table_types_sql": { "name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_utils.default__get_table_types_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.017761, "supported_languages": null }, "macro.dbt_utils.default__get_table_types_sql": { "name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'EXTERNAL TABLE' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0180905, "supported_languages": null }, "macro.dbt_utils.postgres__get_table_types_sql": { "name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n case table_type\n when 'BASE TABLE' then 'table'\n when 'FOREIGN' then 'external'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0184133, "supported_languages": null }, "macro.dbt_utils.databricks__get_table_types_sql": { "name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n case table_type\n when 'MANAGED' then 'table'\n when 'BASE TABLE' then 'table'\n when 'MATERIALIZED VIEW' then 'materializedview'\n else lower(table_type)\n end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0187373, "supported_languages": null }, "macro.dbt_utils.safe_add": { "name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__safe_add" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.019516, "supported_languages": null }, "macro.dbt_utils.default__safe_add": { "name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n ') }}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0207493, "supported_languages": null }, "macro.dbt_utils.unpivot": { "name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__unpivot" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0230312, "supported_languages": null }, "macro.dbt_utils.default__unpivot": { "name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n {% if not relation %}\n {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n {% endif %}\n\n {%- set exclude = exclude if exclude is not none else [] %}\n {%- set remove = remove if remove is not none else [] %}\n\n {%- set include_cols = [] %}\n\n {%- set table_columns = {} %}\n\n {%- do table_columns.update({relation: []}) %}\n\n {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n {%- for col in cols -%}\n {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n {% do include_cols.append(col) %}\n {%- endif %}\n {%- endfor %}\n\n\n {%- for col in include_cols -%}\n select\n {%- for exclude_col in exclude %}\n {{ exclude_col }},\n {%- endfor %}\n\n cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n cast( {% if col.data_type == 'boolean' %}\n {{ dbt.cast_bool_to_text(col.column) }}\n {% else %}\n {{ col.column }}\n {% endif %}\n as {{ cast_to }}) as {{ value_name }}\n\n from {{ relation }}\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n {%- endfor -%}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.026678, "supported_languages": null }, "macro.dbt_utils.get_filtered_columns_in_relation": { "name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_filtered_columns_in_relation" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0276475, "supported_languages": null }, "macro.dbt_utils.default__get_filtered_columns_in_relation": { "name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n {%- if not execute -%}\n {{ return('') }}\n {% endif %}\n\n {%- set include_cols = [] %}\n {%- set cols = adapter.get_columns_in_relation(from) -%}\n {%- set except = except | map(\"lower\") | list %}\n {%- for col in cols -%}\n {%- if col.column|lower not in except -%}\n {% do include_cols.append(col.column) %}\n {%- endif %}\n {%- endfor %}\n\n {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0296063, "supported_languages": null }, "macro.dbt_utils.nullcheck": { "name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__nullcheck" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0307016, "supported_languages": null }, "macro.dbt_utils.default__nullcheck": { "name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n {% if col.is_string() -%}\n\n nullif({{col.name}},'') as {{col.name}}\n\n {%- else -%}\n\n {{col.name}}\n\n {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0317588, "supported_languages": null }, "macro.dbt_utils.surrogate_key": { "name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n {% set frustrating_jinja_feature = varargs %}\n {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__surrogate_key" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0326366, "supported_languages": null }, "macro.dbt_utils.default__surrogate_key": { "name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0331774, "supported_languages": null }, "macro.dbt_utils.safe_divide": { "name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__safe_divide" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0338075, "supported_languages": null }, "macro.dbt_utils.default__safe_divide": { "name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0341265, "supported_languages": null }, "macro.dbt_utils.width_bucket": { "name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.snowflake__width_bucket" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0354745, "supported_languages": null }, "macro.dbt_utils.default__width_bucket": { "name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n {% set bin_size -%}\n (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n {%- endset %}\n (\n -- to break ties when the amount is eaxtly at the bucket egde\n case\n when\n mod(\n {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n ) = 0\n then 1\n else 0\n end\n ) +\n -- Anything over max_value goes the N+1 bucket\n least(\n ceil(\n ({{ expr }} - {{ min_value }})/{{ bin_size }}\n ),\n {{ num_buckets }} + 1\n )\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.safe_cast", "macro.dbt.type_numeric" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0365403, "supported_languages": null }, "macro.dbt_utils.snowflake__width_bucket": { "name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0369923, "supported_languages": null }, "macro.dbt_utils.union_relations": { "name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__union_relations" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0417597, "supported_languages": null }, "macro.dbt_utils.default__union_relations": { "name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n {%- if exclude and include -%}\n {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n {%- endif -%}\n\n {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n {%- if not execute %}\n {{ return('') }}\n {% endif -%}\n\n {%- set column_override = column_override if column_override is not none else {} -%}\n\n {%- set relation_columns = {} -%}\n {%- set column_superset = {} -%}\n {%- set all_excludes = [] -%}\n {%- set all_includes = [] -%}\n\n {%- if exclude -%}\n {%- for exc in exclude -%}\n {%- do all_excludes.append(exc | lower) -%}\n {%- endfor -%}\n {%- endif -%}\n\n {%- if include -%}\n {%- for inc in include -%}\n {%- do all_includes.append(inc | lower) -%}\n {%- endfor -%}\n {%- endif -%}\n\n {%- for relation in relations -%}\n\n {%- do relation_columns.update({relation: []}) -%}\n\n {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n {%- set cols = adapter.get_columns_in_relation(relation) -%}\n {%- for col in cols -%}\n\n {#- If an exclude list was provided and the column is in the list, do nothing -#}\n {%- if exclude and col.column | lower in all_excludes -%}\n\n {#- If an include list was provided and the column is not in the list, do nothing -#}\n {%- elif include and col.column | lower not in all_includes -%}\n\n {#- Otherwise add the column to the column superset -#}\n {%- else -%}\n\n {#- update the list of columns in this relation -#}\n {%- do relation_columns[relation].append(col.column) -%}\n\n {%- if col.column in column_superset -%}\n\n {%- set stored = column_superset[col.column] -%}\n {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif %}\n\n {%- else -%}\n\n {%- do column_superset.update({col.column: col}) -%}\n\n {%- endif -%}\n\n {%- endif -%}\n\n {%- endfor -%}\n {%- endfor -%}\n\n {%- set ordered_column_names = column_superset.keys() -%}\n {%- set dbt_command = flags.WHICH -%}\n\n\n {% if dbt_command in ['run', 'build'] %}\n {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n {%- set relations_string -%}\n {%- for relation in relations -%}\n {{ relation.name }}\n {%- if not loop.last %}, {% endif -%}\n {%- endfor -%}\n {%- endset -%}\n\n {%- set error_message -%}\n There were no columns found to union for relations {{ relations_string }}\n {%- endset -%}\n\n {{ exceptions.raise_compiler_error(error_message) }}\n {%- endif -%}\n {%- endif -%}\n\n {%- for relation in relations %}\n\n (\n select\n\n {%- if source_column_name is not none %}\n cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n {%- endif %}\n\n {% for col_name in ordered_column_names -%}\n\n {%- set col = column_superset[col_name] %}\n {%- set col_type = column_override.get(col.column, col.data_type) %}\n {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n {%- endfor %}\n\n from {{ relation }}\n\n {% if where -%}\n where {{ where }}\n {%- endif %}\n )\n\n {% if not loop.last -%}\n union all\n {% endif -%}\n\n {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0493445, "supported_languages": null }, "macro.dbt_utils.get_relations_by_pattern": { "name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0506685, "supported_languages": null }, "macro.dbt_utils.default__get_relations_by_pattern": { "name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n {%- call statement('get_tables', fetch_result=True) %}\n\n {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n {%- endcall -%}\n\n {%- set table_list = load_result('get_tables') -%}\n\n {%- if table_list and table_list['table'] -%}\n {%- set tbl_relations = [] -%}\n {%- for row in table_list['table'] -%}\n {%- set tbl_relation = api.Relation.create(\n database=database,\n schema=row.table_schema,\n identifier=row.table_name,\n type=row.table_type\n ) -%}\n {%- do tbl_relations.append(tbl_relation) -%}\n {%- endfor -%}\n\n {{ return(tbl_relations) }}\n {%- else -%}\n {{ return([]) }}\n {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0525777, "supported_languages": null }, "macro.dbt_utils.log_info": { "name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__log_info" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0531847, "supported_languages": null }, "macro.dbt_utils.default__log_info": { "name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0535908, "supported_languages": null }, "macro.dbt_utils.pretty_time": { "name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0542116, "supported_languages": null }, "macro.dbt_utils.default__pretty_time": { "name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0546598, "supported_languages": null }, "macro.dbt_utils.slugify": { "name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0560153, "supported_languages": null }, "macro.dbt_utils.pretty_log_format": { "name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__pretty_log_format" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.056627, "supported_languages": null }, "macro.dbt_utils.default__pretty_log_format": { "name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.pretty_time" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0570133, "supported_languages": null }, "macro.dbt_utils._is_ephemeral": { "name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n {%- if obj.is_cte -%}\n {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n {% if obj.name.startswith(ephemeral_prefix) %}\n {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n {% else %}\n {% set model_name = obj.name %}\n {%- endif -%}\n {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n {% endset %}\n {%- do exceptions.raise_compiler_error(error_message) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0587068, "supported_languages": null }, "macro.dbt_utils._is_relation": { "name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n {%- endif -%}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.059681, "supported_languages": null }, "macro.dbt_utils.get_url_path": { "name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_path" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0606213, "supported_languages": null }, "macro.dbt_utils.default__get_url_path": { "name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n {%- set stripped_url =\n dbt.replace(\n dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n -%}\n\n {%- set first_slash_pos -%}\n coalesce(\n nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n {{ dbt.position(\"'?'\", stripped_url) }} - 1\n )\n {%- endset -%}\n\n {%- set parsed_path =\n dbt.split_part(\n dbt.right(\n stripped_url,\n dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n ),\n \"'?'\", 1\n )\n -%}\n\n {{ dbt.safe_cast(\n parsed_path,\n dbt.type_string()\n )}}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0620544, "supported_languages": null }, "macro.dbt_utils.get_url_host": { "name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_host" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.062785, "supported_languages": null }, "macro.dbt_utils.default__get_url_host": { "name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n dbt.split_part(\n dbt.split_part(\n dbt.replace(\n dbt.replace(\n dbt.replace(field, \"'android-app://'\", \"''\"\n ), \"'http://'\", \"''\"\n ), \"'https://'\", \"''\"\n ), \"'/'\", 1\n ), \"'?'\", 1\n )\n\n-%}\n\n\n {{ dbt.safe_cast(\n parsed,\n dbt.type_string()\n )}}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0638213, "supported_languages": null }, "macro.dbt_utils.get_url_parameter": { "name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__get_url_parameter" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0645583, "supported_languages": null }, "macro.dbt_utils.default__get_url_parameter": { "name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.split_part" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0652823, "supported_languages": null }, "macro.dbt_utils.test_mutually_exclusive_ranges": { "name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_mutually_exclusive_ranges" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.070458, "supported_languages": null }, "macro.dbt_utils.default__test_mutually_exclusive_ranges": { "name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n {% set allow_gaps_operator='=' %}\n {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n {% set allow_gaps_operator='<=' %}\n {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n {% set allow_gaps_operator='<' %}\n {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n {% set allow_zero_length_operator='<' %}\n {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n {% set allow_zero_length_operator='<=' %}\n {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n select\n {% if partition_by %}\n {{ partition_by }} as partition_by_col,\n {% endif %}\n {{ lower_bound_column }} as lower_bound,\n {{ upper_bound_column }} as upper_bound,\n\n lead({{ lower_bound_column }}) over (\n {{ partition_clause }}\n order by {{ lower_bound_column }}, {{ upper_bound_column }}\n ) as next_lower_bound,\n\n row_number() over (\n {{ partition_clause }}\n order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n ) = 1 as is_last_record\n\n from {{ model }}\n\n),\n\ncalc as (\n -- We want to return records where one of our assumptions fails, so we'll use\n -- the `not` function with `and` statements so we can write our assumptions more cleanly\n select\n *,\n\n -- For each record: lower_bound should be < upper_bound.\n -- Coalesce it to return an error on the null case (implicit assumption\n -- these columns are not_null)\n coalesce(\n lower_bound {{ allow_zero_length_operator }} upper_bound,\n false\n ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n -- Coalesce it to handle null cases for the last record.\n coalesce(\n upper_bound {{ allow_gaps_operator }} next_lower_bound,\n is_last_record,\n false\n ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n from window_functions\n\n),\n\nvalidation_errors as (\n\n select\n *\n from calc\n\n where not(\n -- THE FOLLOWING SHOULD BE TRUE --\n lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n )\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from validation_errors\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0739443, "supported_languages": null }, "macro.dbt_utils.test_not_null_proportion": { "name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_null_proportion" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0751712, "supported_languages": null }, "macro.dbt_utils.default__test_not_null_proportion": { "name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n select\n {{select_gb_cols}}\n sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n from {{ model }}\n {{groupby_gb_cols}}\n),\nvalidation_errors as (\n select\n {{select_gb_cols}}\n not_null_proportion\n from validation\n where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0769756, "supported_languages": null }, "macro.dbt_utils.test_relationships_where": { "name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_relationships_where" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.078215, "supported_languages": null }, "macro.dbt_utils.default__test_relationships_where": { "name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n select\n {{column_name}} as id\n\n from {{model}}\n\n where {{column_name}} is not null\n and {{from_condition}}\n\n),\n\nright_table as (\n\n select\n {{field}} as id\n\n from {{to}}\n\n where {{field}} is not null\n and {{to_condition}}\n\n),\n\nexceptions as (\n\n select\n left_table.id,\n right_table.id as right_id\n\n from left_table\n\n left join right_table\n on left_table.id = right_table.id\n\n where right_table.id is null\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from exceptions\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0789795, "supported_languages": null }, "macro.dbt_utils.test_equality": { "name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0804508, "supported_languages": null }, "macro.dbt_utils.default__test_equality": { "name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n count(*) + coalesce(abs(\n sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema — this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ model }}\n\n),\n\nb as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n select {{compare_cols_csv}} from a\n {{ dbt.except() }}\n select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n select {{compare_cols_csv}} from b\n {{ dbt.except() }}\n select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n union all\n select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from unioned\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0824137, "supported_languages": null }, "macro.dbt_utils.test_accepted_range": { "name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_accepted_range" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0836153, "supported_languages": null }, "macro.dbt_utils.default__test_accepted_range": { "name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n select *\n from {{ model }}\n),\n\nvalidation_errors as (\n select *\n from meet_condition\n where\n -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n 1 = 2\n\n {%- if min_value is not none %}\n -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n {%- endif %}\n\n {%- if max_value is not none %}\n -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0847085, "supported_languages": null }, "macro.dbt_utils.test_recency": { "name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_recency" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0860918, "supported_languages": null }, "macro.dbt_utils.default__test_recency": { "name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')' %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n select \n\n {{ select_gb_cols }}\n {% if ignore_time_component %}\n cast(max({{ field }}) as date) as most_recent\n {%- else %}\n max({{ field }}) as most_recent\n {%- endif %}\n\n from {{ model }}\n\n {{ groupby_gb_cols }}\n\n)\n\nselect\n\n {{ select_gb_cols }}\n most_recent,\n {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.087929, "supported_languages": null }, "macro.dbt_utils.test_fewer_rows_than": { "name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_fewer_rows_than" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.089774, "supported_languages": null }, "macro.dbt_utils.default__test_fewer_rows_than": { "name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set join_gb_cols %}\n {% for c in group_by_columns %}\n and a.{{c}} = b.{{c}}\n {% endfor %}\n {% endset %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_fewer_rows_than,\n count(*) as count_our_model \n from {{ model }}\n {{ groupby_gb_cols }}\n\n),\nb as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_fewer_rows_than,\n count(*) as count_comparison_model \n from {{ compare_model }}\n {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n select\n\n {% for c in group_by_columns -%}\n a.{{c}} as {{c}}_a,\n b.{{c}} as {{c}}_b,\n {% endfor %}\n\n count_our_model,\n count_comparison_model\n from a\n full join b on \n a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n {{ join_gb_cols }}\n\n),\nfinal as (\n\n select *,\n case\n -- fail the test if we have more rows than the reference model and return the row count delta\n when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n -- fail the test if they are the same number\n when count_our_model = count_comparison_model then 1\n -- pass the test if the delta is positive (i.e. return the number 0)\n else 0\n end as row_count_delta\n from counts\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0920084, "supported_languages": null }, "macro.dbt_utils.test_expression_is_true": { "name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_expression_is_true" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0928943, "supported_languages": null }, "macro.dbt_utils.default__test_expression_is_true": { "name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.should_store_failures" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.093707, "supported_languages": null }, "macro.dbt_utils.test_sequential_values": { "name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_sequential_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0953166, "supported_languages": null }, "macro.dbt_utils.default__test_sequential_values": { "name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n select\n {{ select_gb_cols }}\n {{ column_name }},\n lag({{ column_name }}) over (\n {{partition_gb_cols}}\n order by {{ column_name }}\n ) as {{ previous_column_name }}\n from {{ model }}\n),\n\nvalidation_errors as (\n select\n *\n from windowed\n {% if datepart %}\n where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n {% else %}\n where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0974822, "supported_languages": null }, "macro.dbt_utils.test_unique_combination_of_columns": { "name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_unique_combination_of_columns" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.0986724, "supported_languages": null }, "macro.dbt_utils.default__test_unique_combination_of_columns": { "name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n {%- set column_list=[] %}\n {% for column in combination_of_columns -%}\n {% set column_list = column_list.append( adapter.quote(column) ) %}\n {%- endfor %}\n{% else %}\n {{ exceptions.raise_compiler_error(\n \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n select\n {{ columns_csv }}\n from {{ model }}\n group by {{ columns_csv }}\n having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1001928, "supported_languages": null }, "macro.dbt_utils.test_at_least_one": { "name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_at_least_one" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.101449, "supported_languages": null }, "macro.dbt_utils.default__test_at_least_one": { "name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n {% set pruned_cols = group_by_columns %}\n\n {% if column_name not in pruned_cols %}\n {% do pruned_cols.append(column_name) %}\n {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n with pruned_rows as (\n select\n {{ select_pruned_cols }}\n from {{ model }}\n where {{ column_name }} is not null\n limit 1\n )\n select\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n {{select_gb_cols}}\n count({{ column_name }}) as filler_column\n\n from pruned_rows\n\n {{groupby_gb_cols}}\n\n having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1031725, "supported_languages": null }, "macro.dbt_utils.test_equal_rowcount": { "name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_equal_rowcount" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.104742, "supported_languages": null }, "macro.dbt_utils.default__test_equal_rowcount": { "name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n {% set join_gb_cols %}\n {% for c in group_by_columns %}\n and a.{{c}} = b.{{c}}\n {% endfor %}\n {% endset %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_equal_rowcount,\n count(*) as count_a \n from {{ model }}\n {{groupby_gb_cols}}\n\n\n),\nb as (\n\n select \n {{select_gb_cols}}\n 1 as id_dbtutils_test_equal_rowcount,\n count(*) as count_b \n from {{ compare_model }}\n {{groupby_gb_cols}}\n\n),\nfinal as (\n\n select\n \n {% for c in group_by_columns -%}\n a.{{c}} as {{c}}_a,\n b.{{c}} as {{c}}_b,\n {% endfor %}\n\n count_a,\n count_b,\n abs(count_a - count_b) as diff_count\n\n from a\n full join b\n on\n a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n {{join_gb_cols}}\n\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from final\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1070876, "supported_languages": null }, "macro.dbt_utils.test_cardinality_equality": { "name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_cardinality_equality" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1081598, "supported_languages": null }, "macro.dbt_utils.default__test_cardinality_equality": { "name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n {{ column_name }},\n count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n {{ field }},\n count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n select *\n from table_a\n {{ dbt.except() }}\n select *\n from table_b\n),\n\nexcept_b as (\n select *\n from table_b\n {{ dbt.except() }}\n select *\n from table_a\n),\n\nunioned as (\n select *\n from except_a\n union all\n select *\n from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.except" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.108943, "supported_languages": null }, "macro.dbt_utils.test_not_accepted_values": { "name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_accepted_values" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1099963, "supported_languages": null }, "macro.dbt_utils.default__test_not_accepted_values": { "name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n select distinct\n {{ column_name }} as value_field\n\n from {{ model }}\n\n),\n\nvalidation_errors as (\n\n select\n value_field\n\n from all_values\n where value_field in (\n {% for value in values -%}\n {% if quote -%}\n '{{ value }}'\n {%- else -%}\n {{ value }}\n {%- endif -%}\n {%- if not loop.last -%},{%- endif %}\n {%- endfor %}\n )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1108668, "supported_languages": null }, "macro.dbt_utils.test_not_constant": { "name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_constant" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.111777, "supported_languages": null }, "macro.dbt_utils.default__test_not_constant": { "name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n {# In TSQL, subquery aggregate columns need aliases #}\n {# thus: a filler col name, 'filler_column' #}\n {{select_gb_cols}}\n count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1128407, "supported_languages": null }, "macro.dbt_utils.test_not_empty_string": { "name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": { "macros": [ "macro.dbt_utils.default__test_not_empty_string" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1138182, "supported_languages": null }, "macro.dbt_utils.default__test_not_empty_string": { "name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n with\n \n all_values as (\n\n select \n\n\n {% if trim_whitespace == true -%}\n\n trim({{ column_name }}) as {{ column_name }}\n\n {%- else -%}\n\n {{ column_name }}\n\n {%- endif %}\n \n from {{ model }}\n\n ),\n\n errors as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from all_values\n where {{ column_name }} = ''\n\n )\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from errors\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1145117, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__get_external_build_plan": { "name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [ \n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.116613, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__create_external_schema": { "name": "sqlserver__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n {% set ddl %}\n IF NOT EXISTS (SELECT README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n BEGIN\n EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n END \n {% endset %}\n\n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1174128, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__create_external_table": { "name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n\n {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {# TODO set nullity based on schema tests?? #}\n {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n WITH (\n {# remove keys that are None (i.e. not defined for a given source) #}\n {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n {{key}} = \n {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n '{{value}}'\n {% elif key in [\"data_source\",\"file_format\"] -%}\n [{{value}}]\n {% else -%}\n {{value}}\n {%- endif -%}\n {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1208322, "supported_languages": null }, "macro.dbt_external_tables.sqlserver__dropif": { "name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n \n {% set ddl %}\n if object_id ('{{source(node.source_name, node.name)}}') is not null\n begin\n drop external table {{source(node.source_name, node.name)}}\n end\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1217384, "supported_languages": null }, "macro.dbt_external_tables.spark__refresh_external_table": { "name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n \n {% set refresh %}\n refresh table {{source(source_node.source_name, source_node.name)}}\n {% endset %}\n \n {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1224606, "supported_languages": null }, "macro.dbt_external_tables.spark__get_external_build_plan": { "name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n\n {% set old_relation = adapter.get_relation(\n database = none,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n\n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.dropif(source_node), \n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n {% if recover_partitions %}\n {% set build_plan = build_plan + [\n recover_partitions\n ] %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1250117, "supported_languages": null }, "macro.dbt_external_tables.spark__create_external_table": { "name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n\n {%- set columns_and_partitions = columns | list -%}\n {%- if partitions -%}\n {%- for i in partitions -%}\n {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n {%- do columns_and_partitions.append(i) -%}\n {%- endif -%}\n {%- endfor -%}\n {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n create table {{source(source_node.source_name, source_node.name)}} \n {%- if columns | length > 0 %} (\n {% for column in columns_and_partitions %}\n {{column.name}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n ) {% endif -%}\n {% if external.using %} using {{external.using}} {%- endif %}\n {% if options -%} options (\n {%- for key, value in options.items() -%}\n '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n {%- endfor -%}\n ) {%- endif %}\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{partition.name}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1299837, "supported_languages": null }, "macro.dbt_external_tables.spark__recover_partitions": { "name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n {% set ddl %}\n ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n {% endset %}\n {%- else -%}\n {% set ddl = none %}\n {%- endif -%}\n\n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1314294, "supported_languages": null }, "macro.dbt_external_tables.recover_partitions": { "name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.default__recover_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1319168, "supported_languages": null }, "macro.dbt_external_tables.default__recover_partitions": { "name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n /*{# \n We're dispatching this macro so that users can override it if required on other adapters\n but this will work for spark/databricks. \n #}*/\n\n {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1323614, "supported_languages": null }, "macro.dbt_external_tables.spark__dropif": { "name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}}\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1330826, "supported_languages": null }, "macro.dbt_external_tables.bigquery__get_external_build_plan": { "name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if create_or_replace %}\n {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% endif %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1355617, "supported_languages": null }, "macro.dbt_external_tables.bigquery__create_external_schema": { "name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n {%- set fqn -%}\n {%- if source_node.database -%}\n `{{ source_node.database }}`.{{ source_node.schema }}\n {%- else -%}\n {{ source_node.schema }}\n {%- endif -%}\n {%- endset -%}\n\n {% set schema_exists_query %}\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ source_node.database }}.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n {% endset %}\n {% if execute %}\n {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n {% else %}\n {% set schema_exists = false %}\n {% endif %} \n\n {%- if not schema_exists -%}\n {%- set ddl -%}\n create schema if not exists {{ fqn }}\n {%- endset -%}\n {{ return(ddl) }}\n {%- else -%}\n {{ return('') }}\n {% endif %} \n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.137979, "supported_languages": null }, "macro.dbt_external_tables.bigquery__create_external_table": { "name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set options = external.options -%}\n\n {% if options is mapping and options.get('connection_name', none) %}\n {% set connection_name = options.pop('connection_name') %}\n {% endif %}\n \n {%- set uris = [] -%}\n {%- if options is mapping and options.get('uris', none) -%}\n {%- set uris = external.options.get('uris') -%}\n {%- else -%}\n {%- set uris = [external.location] -%}\n {%- endif -%}\n\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns -%}(\n {% for column in columns %}\n {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n {%- endfor -%}\n )\n {% endif %}\n {% if options and options.get('hive_partition_uri_prefix', none) %}\n with partition columns {%- if partitions %} (\n {%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n {%- endfor -%}\n ) {% endif -%}\n {% endif %}\n {% if connection_name %}\n with connection `{{ connection_name }}`\n {% endif %}\n options (\n uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n {%- if options is mapping -%}\n {%- for key, value in options.items() if key != 'uris' %}\n {%- if value is string -%}\n , {{key}} = '{{value}}'\n {%- else -%}\n , {{key}} = {{value}}\n {%- endif -%}\n {%- endfor -%}\n {%- endif -%}\n )\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1447248, "supported_languages": null }, "macro.dbt_external_tables.redshift__refresh_external_table": { "name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n {%- if partitions -%}\n \n {%- set part_len = partitions|length -%}\n \n {%- set get_partitions_sql -%}\n \n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from\n \n {%- for partition in partitions %} (\n \n {%- set part_num = loop.index -%}\n \n {%- if partition.vals.macro -%}\n {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n {%- elif partition.vals is string -%}\n {%- set vals = [partition.vals] -%}\n {%- else -%}\n {%- set vals = partition.vals -%}\n {%- endif -%}\n \n {%- for val in vals %}\n \n select\n '\"{{ partition.name }}\"' as name_{{ part_num }},\n '\"{{ val }}\"' as val_{{ part_num }},\n '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n \n {{ 'union all' if not loop.last else ') ' }}\n \n {%- endfor -%}\n \n {{ 'cross join' if not loop.last }}\n \n {%- endfor -%}\n \n {%- endset -%}\n \n {%- set finals = [] -%}\n \n {%- if execute -%}\n {%- set results = run_query(get_partitions_sql) -%}\n {%- for row in results -%}\n \n {%- set partition_parts = [] -%}\n {%- set path_parts = [] -%}\n \n {%- for i in range(0, part_len) -%}\n {%- do partition_parts.append({\n 'name': row[i README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3][1:-1],\n 'value': row[i README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3 + 1][1:-1]\n }) -%}\n {%- do path_parts.append(row[i README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3 + 2][1:-1]) -%}\n {%- endfor -%}\n \n {%- set construct = {\n 'partition_by': partition_parts,\n 'path': path_parts | join('/')\n } -%}\n \n {% do finals.append(construct) %}\n {%- endfor -%}\n {%- endif -%}\n \n {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n {{ return(ddl) }}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1532004, "supported_languages": null }, "macro.dbt_external_tables.redshift__get_external_build_plan": { "name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n \n {% if create_or_replace %}\n\n {% set build_plan = [\n dbt_external_tables.dropif(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] + dbt_external_tables.refresh_external_table(source_node) \n %}\n \n {% else %}\n \n {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n \n {% endif %}\n \n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.154863, "supported_languages": null }, "macro.dbt_external_tables.redshift__create_external_table": { "name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n create external table {{source(source_node.source_name, source_node.name)}} (\n {% for column in columns %}\n {{adapter.quote(column.name)}} {{column.data_type}}\n {{- ',' if not loop.last -}}\n {% endfor %}\n )\n {% if partitions -%} partitioned by (\n {%- for partition in partitions -%}\n {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n {%- endfor -%}\n ) {%- endif %}\n {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n {% if external.location -%} location '{{external.location}}' {%- endif %}\n {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1578898, "supported_languages": null }, "macro.dbt_external_tables.redshift_is_ext_tbl": { "name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n {% set existing_relation = load_relation(node) %}\n \n {# external tables don't appear in information_schema.tables,\n so dbt doesn't cache them #}\n {% if existing_relation is none %}\n\n {% set find_ext_tbl %}\n \n select count(*) from svv_external_tables\n where schemaname = '{{node.schema}}'\n and tablename = '{{node.identifier}}'\n \n {% endset %}\n \n {% if execute %}\n {% set result = run_query(find_ext_tbl)[0][0] %}\n {% else %}\n {% set result = 0 %}\n {% endif %}\n\n {% set is_ext_tbl = (result > 0) %}\n {% do return(is_ext_tbl) %}\n \n {% else %}\n \n {% do return(false) %}\n \n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.load_relation", "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1599357, "supported_languages": null }, "macro.dbt_external_tables.year_month_day": { "name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n {% set path = value.replace('-','/') %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.replace" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1607082, "supported_languages": null }, "macro.dbt_external_tables.key_value": { "name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n {% set path = name ~ '=' ~ value %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1611671, "supported_languages": null }, "macro.dbt_external_tables.value_only": { "name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n {% set path = value %}\n {{return(path)}}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1615746, "supported_languages": null }, "macro.dbt_external_tables.redshift__dropif": { "name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n \n {% set ddl %}\n drop table if exists {{source(node.source_name, node.name)}} cascade\n {% endset %}\n \n {{return(ddl)}}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1622562, "supported_languages": null }, "macro.dbt_external_tables.redshift__exit_transaction": { "name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1626272, "supported_languages": null }, "macro.dbt_external_tables.redshift_alter_table_add_partitions": { "name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n {{ log(\"Generating ADD PARTITION statement for partition set between \" \n ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n {% set ddl = [] %}\n \n {% if partitions|length > 0 %}\n \n {% set alter_table_add %}\n alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n {% endset %}\n \n {%- set alters -%}\n\n {{ alter_table_add }}\n\n {%- for partition in partitions -%}\n\n {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n ; {{ alter_table_add }}\n\n {%- endif -%}\n\n partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n {% endfor -%}\n \n {%- endset -%}\n \n {% set ddl = ddl + alters.split(';') %}\n\n {% else %}\n\n {{ log(\"No partitions to be added\") }}\n\n {% endif %}\n \n {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1659942, "supported_languages": null }, "macro.dbt_external_tables.render_from_context": { "name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n {% if '.' in name %}\n {% set package_name, name = name.split(\".\", 1) %}\n {% else %}\n {% set package_name = none %}\n {% endif %}\n\n {% if package_name is none %}\n {% set package_context = context %}\n {% elif package_name in context %}\n {% set package_context = context[package_name] %}\n {% else %}\n {% set error_msg %}\n Could not find package '{{package_name}}', called by macro '{{original_name}}'\n {% endset %}\n {{ exceptions.raise_compiler_error(error_msg | trim) }}\n {% endif %}\n \n {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1682563, "supported_languages": null }, "macro.dbt_external_tables.snowflake__refresh_external_table": { "name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n {% set external = source_node.external %}\n {% set snowpipe = source_node.external.get('snowpipe', none) %}\n \n {% set auto_refresh = external.get('auto_refresh', false) %}\n {% set partitions = external.get('partitions', none) %}\n \n {% set manual_refresh = (partitions and not auto_refresh) %}\n \n {% if manual_refresh %}\n\n {% set ddl %}\n begin;\n alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n commit;\n {% endset %}\n \n {% do return([ddl]) %}\n \n {% else %}\n \n {% do return([]) %}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1703312, "supported_languages": null }, "macro.dbt_external_tables.snowflake__get_external_build_plan": { "name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n {% set build_plan = [] %}\n \n {% set old_relation = adapter.get_relation(\n database = source_node.database,\n schema = source_node.schema,\n identifier = source_node.identifier\n ) %}\n \n {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n {% if source_node.external.get('snowpipe', none) is not none %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.snowflake_create_empty_table(source_node),\n dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n dbt_external_tables.snowflake_create_snowpipe(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n {% endif %}\n \n {% else %}\n \n {% if create_or_replace %}\n {% set build_plan = build_plan + [\n dbt_external_tables.create_external_schema(source_node),\n dbt_external_tables.create_external_table(source_node)\n ] %}\n {% else %}\n {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n {% endif %}\n \n {% endif %}\n\n {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1737502, "supported_languages": null }, "macro.dbt_external_tables.snowflake__create_external_schema": { "name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n {% set schema_exists_query %}\n show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n {% endset %}\n {% if execute %}\n {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n {% else %}\n {% set schema_exists = false %}\n {% endif %} \n\n {% if schema_exists %}\n {% set ddl %}\n select 'Schema {{ source_node.schema }} exists' from dual;\n {% endset %}\n {% else %}\n {% set fqn %}\n {% if source_node.database %}\n {{ source_node.database }}.{{ source_node.schema }}\n {% else %}\n {{ source_node.schema }}\n {% endif %}\n {% endset %}\n\n {% set ddl %}\n create schema if not exists {{ fqn }};\n {% endset %}\n {% endif %}\n\n {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1764462, "supported_languages": null }, "macro.dbt_external_tables.snowflake__create_external_table": { "name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set partitions = external.partitions -%}\n {%- set infer_schema = external.infer_schema -%}\n\n {% if infer_schema %}\n {% set query_infer_schema %}\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}') )\n {% endset %}\n {% if execute %}\n {% set columns_infer = run_query(query_infer_schema) %}\n {% endif %}\n {% endif %}\n\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n create or replace external table {{source(source_node.source_name, source_node.name)}}\n {%- if columns or partitions or infer_schema -%}\n (\n {%- if partitions -%}{%- for partition in partitions %}\n {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n {%- endfor -%}{%- endif -%}\n {%- if not infer_schema -%}\n {%- for column in columns %}\n {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n {%- set col_expression -%}\n {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n {%- endset %}\n {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n {{- ',' if not loop.last -}}\n {% endfor %}\n {% else %}\n {%- for column in columns_infer %}\n {%- set col_expression -%}\n {%- set col_id = 'value:' ~ column[0] -%}\n (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n {%- endset %}\n {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n {{- ',' if not loop.last -}}\n {% endfor %}\n {%- endif -%}\n )\n {%- endif -%}\n {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n location = {{external.location}} {# stage #}\n {% if external.auto_refresh in (true, false) -%}\n auto_refresh = {{external.auto_refresh}}\n {%- endif %}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n file_format = {{external.file_format}}\n {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query", "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1845286, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_empty_table": { "name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n {%- set columns = source_node.columns.values() %}\n\n create or replace table {{source(source_node.source_name, source_node.name)}} (\n {% if columns|length == 0 %}\n value variant,\n {% else -%}\n {%- for column in columns -%}\n {{column.name}} {{column.data_type}},\n {% endfor -%}\n {% endif %}\n metadata_filename varchar,\n metadata_file_row_number bigint,\n _dbt_copied_at timestamp\n );\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1858134, "supported_languages": null }, "macro.dbt_external_tables.snowflake_get_copy_sql": { "name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n {%- set columns = source_node.columns.values() -%}\n {%- set external = source_node.external -%}\n {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n \n {%- if explicit_transaction -%} begin; {%- endif %}\n \n copy into {{source(source_node.source_name, source_node.name)}}\n from ( \n select\n {% if columns|length == 0 %}\n $1::variant as value,\n {% else -%}\n {%- for column in columns -%}\n {%- set col_expression -%}\n {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n {%- endif -%}\n {%- endset -%}\n {{col_expression}}::{{column.data_type}} as {{column.name}},\n {% endfor -%}\n {% endif %}\n metadata$filename::varchar as metadata_filename,\n metadata$file_row_number::bigint as metadata_file_row_number,\n current_timestamp::timestamp as _dbt_copied_at\n from {{external.location}} {# stage #}\n )\n file_format = {{external.file_format}}\n {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n {% if copy_options %} {{copy_options}} {% endif %};\n \n {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.is_csv" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1890056, "supported_languages": null }, "macro.dbt_external_tables.snowflake_refresh_snowpipe": { "name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n {% set snowpipe = source_node.external.snowpipe %}\n {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n \n {% if auto_ingest is true %}\n \n {% do return([]) %}\n \n {% else %}\n \n {% set ddl %}\n alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n {% endset %}\n \n {{ return([ddl]) }}\n \n {% endif %}\n \n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1905344, "supported_languages": null }, "macro.dbt_external_tables.snowflake_create_snowpipe": { "name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n {%- set external = source_node.external -%}\n {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n create or replace pipe {{source(source_node.source_name, source_node.name)}}\n {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake_get_copy_sql" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1923077, "supported_languages": null }, "macro.dbt_external_tables.is_csv": { "name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n {% if 'type=' in ff_ltrimmed %}\n \n {% if 'type=csv' in ff_ltrimmed %}\n\n {{return(true)}}\n\n {% else %}\n\n {{return(false)}}\n \n {% endif %}\n \n {% else %}\n \n {% set ff_standardized = ff_ltrimmed\n | replace('(','') | replace(')','')\n | replace('format_name=','') %}\n {% set fqn = ff_standardized.split('.') %}\n \n {% if fqn | length == 3 %}\n {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n {% elif fqn | length == 2 %}\n {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n {% else %}\n {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n {% endif %}\n \n {% call statement('get_file_format', fetch_result = True) %}\n show file formats in {{ff_database}}.{{ff_schema}}\n {% endcall %}\n \n {% set ffs = load_result('get_file_format').table %}\n \n {% for ff in ffs %}\n \n {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n \n {{return(true)}}\n \n {% endif %}\n \n {% endfor %}\n \n {{return(false)}} \n \n {% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1975636, "supported_languages": null }, "macro.dbt_external_tables.refresh_external_table": { "name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__refresh_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.198177, "supported_languages": null }, "macro.dbt_external_tables.default__refresh_external_table": { "name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n {% do return([]) %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1985044, "supported_languages": null }, "macro.dbt_external_tables.get_external_build_plan": { "name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__get_external_build_plan" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1991043, "supported_languages": null }, "macro.dbt_external_tables.default__get_external_build_plan": { "name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.1994264, "supported_languages": null }, "macro.dbt_external_tables.create_external_schema": { "name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__create_external_schema" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.200219, "supported_languages": null }, "macro.dbt_external_tables.default__create_external_schema": { "name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n {%- set fqn -%}\n {%- if source_node.database -%}\n {{ source_node.database }}.{{ source_node.schema }}\n {%- else -%}\n {{ source_node.schema }}\n {%- endif -%}\n {%- endset -%}\n\n {%- set ddl -%}\n create schema if not exists {{ fqn }}\n {%- endset -%}\n\n {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.201014, "supported_languages": null }, "macro.dbt_external_tables.create_external_table": { "name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.snowflake__create_external_table" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2015808, "supported_languages": null }, "macro.dbt_external_tables.default__create_external_table": { "name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.201899, "supported_languages": null }, "macro.dbt_external_tables.stage_external_sources": { "name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n {% set sources_to_stage = [] %}\n \n {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n \n {% for node in source_nodes %}\n {% if node.external %}\n \n {% if select %}\n \n {% for src in select.split(' ') %}\n \n {% if '.' in src %}\n {% set src_s = src.split('.') %}\n {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% else %}\n {% if src == node.source_name %}\n {% do sources_to_stage.append(node) %}\n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% else %}\n \n {% do sources_to_stage.append(node) %}\n \n {% endif %}\n {% endif %}\n \n {% endfor %}\n \n {% if sources_to_stage|length == 0 %}\n {% do log('No external sources selected', info = true) %}\n {% endif %}\n \n {% for node in sources_to_stage %}\n\n {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n \n {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n \n {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n {% set width = flags.PRINTER_WIDTH %}\n \n {% for q in run_queue %}\n \n {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n {% set q_log = q_msg[:width] ~ '... ' if q_msg|length > width else q_msg %}\n \n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n {% set exit_txn = dbt_external_tables.exit_transaction() %}\n \n {% call statement('runner', fetch_result = True, auto_begin = False) %}\n {{ exit_txn }} {{ q }}\n {% endcall %}\n \n {% set runner = load_result('runner') %}\n {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n \n {% endfor %}\n \n {% endfor %}\n \n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.211876, "supported_languages": null }, "macro.dbt_external_tables.dropif": { "name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.default__dropif" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.212505, "supported_languages": null }, "macro.dbt_external_tables.default__dropif": { "name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n {{ exceptions.raise_compiler_error(\n \"Dropping external tables is not implemented for the default adapter\"\n ) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2128165, "supported_languages": null }, "macro.dbt_external_tables.exit_transaction": { "name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_external_tables.default__exit_transaction" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2133486, "supported_languages": null }, "macro.dbt_external_tables.default__exit_transaction": { "name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n {{ return('') }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.213629, "supported_languages": null }, "macro.codegen.get_tables_in_schema": { "name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n \n {% set tables=dbt_utils.get_relations_by_pattern(\n schema_pattern=schema_name,\n database=database_name,\n table_pattern=table_pattern,\n exclude=exclude\n ) %}\n\n {% set table_list= tables | map(attribute='identifier') %}\n\n {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_utils.get_relations_by_pattern" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2174058, "supported_languages": null }, "macro.codegen.generate_source": { "name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append(' - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append(' database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append(' schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append(' tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n {% do sources_yaml.append(' - name: ' ~ table | lower ) %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% if generate_columns %}\n {% do sources_yaml.append(' columns:') %}\n\n {% set table_relation=api.Relation.create(\n database=database_name,\n schema=schema_name,\n identifier=table\n ) %}\n\n {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n {% for column in columns %}\n {% do sources_yaml.append(' - name: ' ~ column.name | lower ) %}\n {% if include_data_types %}\n {% do sources_yaml.append(' data_type: ' ~ codegen.data_type_format_source(column)) %}\n {% endif %}\n {% if include_descriptions %}\n {% do sources_yaml.append(' description: \"\"' ) %}\n {% endif %}\n {% endfor %}\n {% do sources_yaml.append('') %}\n\n {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n {% set joined = sources_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.222861, "supported_languages": null }, "macro.codegen.generate_base_model": { "name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n select\n {%- if leading_commas -%}\n {%- for column in column_names %}\n {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n {%- endfor %}\n {%- else -%}\n {%- for column in column_names %}\n {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n {%- endfor -%}\n {%- endif %}\n\n from source\n\n)\n\nselect README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2270691, "supported_languages": null }, "macro.codegen.generate_column_yaml": { "name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n {% if parent_column_name %}\n {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n {% else %}\n {% set column_name = column.name %}\n {% endif %}\n\n {% do model_yaml.append(' - name: ' ~ column_name | lower ) %}\n {% if include_data_types %}\n {% do model_yaml.append(' data_type: ' ~ codegen.data_type_format_model(column)) %}\n {% endif %}\n {% do model_yaml.append(' description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n {% do model_yaml.append('') %}\n\n {% if column.fields|length > 0 %}\n {% for child_column in column.fields %}\n {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n {% endfor %}\n {% endif %}\n {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.231594, "supported_languages": null }, "macro.codegen.generate_model_yaml": { "name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) %}\n\n {% set model_yaml=[] %}\n\n {% do model_yaml.append('version: 2') %}\n {% do model_yaml.append('') %}\n {% do model_yaml.append('models:') %}\n\n {% if model_names is string %}\n {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n {% else %}\n {% for model in model_names %}\n {% do model_yaml.append(' - name: ' ~ model | lower) %}\n {% do model_yaml.append(' description: \"\"') %}\n {% do model_yaml.append(' columns:') %}\n\n {% set relation=ref(model) %}\n {%- set columns = adapter.get_columns_in_relation(relation) -%}\n {% set column_desc_dict = codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n {% for column in columns %}\n {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n {% endfor %}\n {% endfor %}\n {% endif %}\n\n{% if execute %}\n\n {% set joined = model_yaml | join ('\\n') %}\n {{ log(joined, info=True) }}\n {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.234526, "supported_languages": null }, "macro.codegen.generate_model_import_ctes": { "name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n {%- if execute -%}\n {%- set nodes = graph.nodes.values() -%}\n\n {%- set model = (nodes\n | selectattr('name', 'equalto', model_name) \n | selectattr('resource_type', 'equalto', 'model')\n | list).pop() -%}\n\n {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n {%- else -%}\n {%- set model_raw_sql = '' -%}\n {%- endif -%}\n\n {#-\n\n REGEX Explanations\n\n # with_regex\n - matches (start of file followed by anything then whitespace\n or whitespace\n or a comma) followed by the word with then a space \n\n # from_ref \n - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n # from_source \n - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n # from_var_1\n - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n # from_var_2\n - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n # from_table_1\n - matches (from or join) followed by some spaces and then <something>.<something_else>\n where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n # from_table_2\n - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n # from_table_3\n - matches (from or join) followed by some spaces and then <something>\n where <something> is enclosed by (` or [ or \" or ')\n\n # config block\n - matches the start of the file followed by anything and then {{config(<something>)}}\n\n -#}\n\n {%- set re = modules.re -%}\n\n {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n {%- set from_regexes = {\n 'from_ref':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character\n (from|join)\\s+\n\n # second matching group\n # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n \n # third matching group\n # at least 1 of anything except a parenthesis or quotation mark\n ([^)\\'\\\"]+)\n \n # fourth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s)\n ([\\'\\\"]?\\s*)\n\n # fifth matching group\n # a closing parenthesis, 0 or more whitespace character(s), closing }}\n (\\)\\s*}})\n \n ',\n 'from_source':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character\n (from|join)\\s+\n\n # second matching group\n # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n # third matching group\n # at least 1 of anything except a parenthesis or quotation mark\n ([^)\\'\\\"]+)\n\n # fourth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s)\n ([\\'\\\"]?\\s*)\n\n # fifth matching group\n # a comma\n (,)\n\n # sixth matching group\n # 0 or more whitespace character(s), 1 or 0 quotation mark\n (\\s*[\\'\\\"]?)\n\n # seventh matching group\n # at least 1 of anything except a parenthesis or quotation mark\n ([^)\\'\\\"]+)\n\n # eighth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s)\n ([\\'\\\"]?\\s*)\n\n # ninth matching group\n # a closing parenthesis, 0 or more whitespace character(s), closing }}\n (\\)\\s*}})\n\n ',\n 'from_var_1':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character\n (from|join)\\s+\n\n # second matching group\n # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n # third matching group\n # at least 1 of anything except a parenthesis or quotation mark\n ([^)\\'\\\"]+)\n\n # fourth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s)\n ([\\'\\\"]?\\s*)\n\n # fifth matching group\n # a closing parenthesis, 0 or more whitespace character(s), closing }}\n (\\)\\s*}})\n \n ',\n 'from_var_2':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character\n (from|join)\\s+\n \n # second matching group\n # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n # third matching group\n # at least 1 of anything except a parenthesis or quotation mark \n ([^)\\'\\\"]+)\n \n # fourth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s)\n ([\\'\\\"]?\\s*)\n\n # fifth matching group\n # a comma\n (,)\n\n # sixth matching group\n # 0 or more whitespace character(s), 1 or 0 quotation mark \n (\\s*[\\'\\\"]?)\n\n # seventh matching group\n # at least 1 of anything except a parenthesis or quotation mark \n ([^)\\'\\\"]+)\n\n # eighth matching group\n # 1 or 0 quotation mark, 0 or more whitespace character(s) \n ([\\'\\\"]?\\s*)\n\n # ninth matching group\n # a closing parenthesis, 0 or more whitespace character(s), closing }} \n (\\)\\s*}})\n \n ',\n 'from_table_1':\n '(?ix)\n \n # first matching group\n # from or join followed by at least 1 whitespace character \n (from|join)\\s+\n \n # second matching group\n # 1 or 0 of (opening bracket, backtick, or quotation mark)\n ([\\[`\\\"\\']?)\n \n # third matching group\n # at least 1 word character\n (\\w+)\n \n # fouth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark)\n ([\\]`\\\"\\']?)\n \n # fifth matching group\n # a period\n (\\.)\n \n # sixth matching group\n # 1 or 0 of (opening bracket, backtick, or quotation mark)\n ([\\[`\\\"\\']?)\n \n # seventh matching group\n # at least 1 word character\n (\\w+)\n \n # eighth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n ([\\]`\\\"\\']?)(?=\\s|$)\n \n ',\n 'from_table_2':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character \n (from|join)\\s+\n \n # second matching group\n # 1 or 0 of (opening bracket, backtick, or quotation mark) \n ([\\[`\\\"\\']?)\n \n # third matching group\n # at least 1 word character\n (\\w+)\n\n # fouth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) \n ([\\]`\\\"\\']?)\n \n # fifth matching group\n # a period \n (\\.)\n \n # sixth matching group\n # 1 or 0 of (opening bracket, backtick, or quotation mark)\n ([\\[`\\\"\\']?)\n\n # seventh matching group\n # at least 1 word character \n (\\w+)\n \n # eighth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) \n ([\\]`\\\"\\']?)\n \n # ninth matching group\n # a period \n (\\.)\n \n # tenth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) \n ([\\[`\\\"\\']?)\n \n # eleventh matching group\n # at least 1 word character \n (\\w+)\n\n # twelfth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n ([\\]`\\\"\\']?)(?=\\s|$)\n \n ',\n 'from_table_3':\n '(?ix)\n\n # first matching group\n # from or join followed by at least 1 whitespace character \n (from|join)\\s+\n \n # second matching group\n # 1 or 0 of (opening bracket, backtick, or quotation mark) \n ([\\[`\\\"\\'])\n \n # third matching group\n # at least 1 word character or space \n ([\\w ]+)\n\n # fourth matching group\n # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n ([\\]`\\\"\\'])(?=\\s|$)\n \n ',\n 'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n } -%}\n\n {%- set from_list = [] -%}\n {%- set config_list = [] -%}\n {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n {%- for match in all_regex_matches -%}\n\n {%- if regex_name == 'config_block' -%}\n {%- set match_tuple = (match|trim, regex_name) -%}\n {%- do config_list.append(match_tuple) -%}\n {%- elif regex_name == 'from_source' -%} \n {%- set full_from_clause = match[1:]|join|trim -%}\n {%- set cte_name = 'source_' + match[6]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- elif regex_name == 'from_table_1' -%}\n {%- set full_from_clause = match[1:]|join()|trim -%}\n {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- elif regex_name == 'from_table_2' -%}\n {%- set full_from_clause = match[1:]|join()|trim -%}\n {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%} \n {%- else -%}\n {%- set full_from_clause = match[1:]|join|trim -%}\n {%- set cte_name = match[2]|trim|lower -%}\n {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n {%- do from_list.append(match_tuple) -%}\n {%- endif -%}\n\n {%- endfor -%}\n\n {%- if regex_name == 'config_block' -%}\n {%- elif regex_name == 'from_source' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%} \n {%- elif regex_name == 'from_table_1' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%} \n {%- elif regex_name == 'from_table_2' -%}\n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n {%- else -%} \n {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%} \n {% endif %}\n\n {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n {%- for config_obj in config_list -%}\n\n {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n select README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch from {{ from_obj[1] }}\n {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n -- CAUTION: It's best practice to create staging layer for raw sources\n {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n -- CAUTION: It's best practice to use the ref or source function instead of a var\n {%- endif %}\n \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n {%- if leading_commas -%}\n {%- set replace_with = '\\g<1>,' -%}\n {%- else -%}\n {%- set replace_with = '\\g<1>' -%}\n {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2548263, "supported_languages": null }, "macro.codegen.create_base_models": { "name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n {% set help_command = zsh_command_models + t %}\n {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2563615, "supported_languages": null }, "macro.codegen.get_model_dependencies": { "name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {{ return(node.depends_on.nodes) }}\n {% endfor %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.258763, "supported_languages": null }, "macro.codegen.add_model_column_descriptions_to_dict": { "name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n {% for col_name, col_values in node.columns.items() %}\n {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n {% endfor %}\n {% endfor %}\n {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.25985, "supported_languages": null }, "macro.codegen.build_dict_column_descriptions": { "name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n {% if execute %}\n {% set glob_dict = {} %}\n {% for full_model in codegen.get_model_dependencies(model_name) %}\n {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n {% endfor %}\n {{ return(glob_dict) }}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2608318, "supported_languages": null }, "macro.codegen.get_models": { "name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n {% set model_names=[] %}\n {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n {% if directory and prefix %}\n {% for model in models %}\n {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n {% if model_path == directory and model.name.startswith(prefix) %}\n {% do model_names.append(model.name) %}\n {% endif %} \n {% endfor %}\n {% elif directory %}\n {% for model in models %}\n {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n {% if model_path == directory %}\n {% do model_names.append(model.name) %}\n {% endif %}\n {% endfor %}\n {% elif prefix %}\n {% for model in models if model.name.startswith(prefix) %}\n {% do model_names.append(model.name) %}\n {% endfor %}\n {% else %}\n {% for model in models %}\n {% do model_names.append(model.name) %}\n {% endfor %}\n {% endif %}\n {{ return(model_names) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2639306, "supported_languages": null }, "macro.codegen.data_type_format_source": { "name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.codegen.default__data_type_format_source" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2643988, "supported_languages": null }, "macro.codegen.default__data_type_format_source": { "name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n {% set formatted = codegen.format_column(column) %}\n {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.format_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2649224, "supported_languages": null }, "macro.codegen.data_type_format_model": { "name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.codegen.default__data_type_format_model" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.265342, "supported_languages": null }, "macro.codegen.default__data_type_format_model": { "name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n {% set formatted = codegen.format_column(column) %}\n {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.codegen.format_column" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2658496, "supported_languages": null }, "macro.codegen.format_column": { "name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n {% set data_type = column.dtype %}\n {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.2667584, "supported_languages": null }, "macro.dbt_artifacts.migrate_from_v0_to_v1": { "name": "migrate_from_v0_to_v1", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/migration/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migration/migrate_from_v0_to_v1.sql", "unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n {% set migrate_model_executions %}\n insert into {{new_database}}.{{new_schema}}.model_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n model_materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n model_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n {% endset %}\n\n {{ log(\"Migrating model_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_model_executions }}\n {%- endcall -%}\n\n {% set migrate_tests %}\n insert into {{new_database}}.{{new_schema}}.tests (\n command_invocation_id,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n tags,\n test_path,\n run_started_at\n )\n select\n command_invocation_id,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n [],\n test_path,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__tests\n {% endset %}\n\n {{ log(\"Migrating tests\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_tests }}\n {%- endcall -%}\n\n {% set migrate_test_executions %}\n insert into {{new_database}}.{{new_schema}}.test_executions (\n command_invocation_id,\n compile_started_at,\n failures,\n node_id,\n query_completed_at,\n rows_affected,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n null,\n node_id,\n query_completed_at,\n rows_affected,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n {% endset %}\n\n {{ log(\"Migrating test_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_test_executions }}\n {%- endcall -%}\n\n {% set migrate_models %}\n insert into {{new_database}}.{{new_schema}}.models (\n checksum,\n command_invocation_id,\n database,\n depends_on_nodes,\n materialization,\n name,\n node_id,\n package_name,\n path,\n schema,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n model_database,\n depends_on_nodes,\n model_materialization,\n name,\n node_id,\n package_name,\n model_path,\n model_schema,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__models\n {% endset %}\n\n {{ log(\"Migrating models\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_models }}\n {%- endcall -%}\n\n {% set migrate_seeds %}\n insert into {{new_database}}.{{new_schema}}.seeds (\n checksum,\n command_invocation_id,\n database,\n name,\n node_id,\n package_name,\n path,\n schema,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n seed_database,\n name,\n node_id,\n package_name,\n seed_path,\n seed_schema,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n {% endset %}\n\n {{ log(\"Migrating seeds\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_seeds }}\n {%- endcall -%}\n\n {% set migrate_seed_executions %}\n insert into {{new_database}}.{{new_schema}}.seed_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n 'seed',\n name,\n node_id,\n query_completed_at,\n rows_affected,\n seed_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n {% endset %}\n\n {{ log(\"Migrating seed_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_seed_executions }}\n {%- endcall -%}\n\n {% set migrate_exposures %}\n insert into {{new_database}}.{{new_schema}}.exposures (\n command_invocation_id,\n depends_on_nodes,\n description,\n maturity,\n name,\n node_id,\n owner,\n package_name,\n path,\n type,\n url,\n run_started_at\n )\n select\n command_invocation_id,\n array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n null,\n any_value(maturity) as maturity,\n name,\n node_id,\n null, {#- v0 is a string, v1 is a variant -#}\n any_value(package_name) as package_name,\n null,\n any_value(type) as type,\n null,\n any_value(artifact_generated_at) as artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n group by command_invocation_id, node_id, name, artifact_generated_at\n {% endset %}\n\n {{ log(\"Migrating exposures\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_exposures }}\n {%- endcall -%}\n\n {% set migrate_snapshots %}\n insert into {{new_database}}.{{new_schema}}.snapshots (\n checksum,\n command_invocation_id,\n database,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n path,\n schema,\n strategy,\n run_started_at\n )\n select\n checksum,\n command_invocation_id,\n snapshot_database,\n depends_on_nodes,\n name,\n node_id,\n package_name,\n snapshot_path,\n snapshot_schema,\n null,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n {% endset %}\n\n {{ log(\"Migrating snapshots\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_snapshots }}\n {%- endcall -%}\n\n {% set migrate_snapshot_executions %}\n insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n command_invocation_id,\n compile_started_at,\n materialization,\n name,\n node_id,\n query_completed_at,\n rows_affected,\n schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n run_started_at\n )\n select\n command_invocation_id,\n compile_started_at,\n 'snapshot',\n name,\n node_id,\n query_completed_at,\n rows_affected,\n snapshot_schema,\n status,\n thread_id,\n total_node_runtime,\n was_full_refresh,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n {% endset %}\n\n {{ log(\"Migrating snapshot_executions\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_snapshot_executions }}\n {%- endcall -%}\n\n {% set migrate_sources %}\n insert into {{new_database}}.{{new_schema}}.sources (\n command_invocation_id,\n database,\n freshness,\n identifier,\n loaded_at_field,\n loader,\n name,\n node_id,\n schema,\n source_name,\n run_started_at\n )\n select\n command_invocation_id,\n node_database,\n parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n name,\n null,\n source_loader,\n name,\n node_id,\n source_schema,\n source_name,\n artifact_generated_at\n from {{old_database}}.{{old_schema}}.dim_dbt__sources\n {% endset %}\n\n {{ log(\"Migrating sources\", info=True) }}\n {%- call statement(auto_begin=True) -%}\n {{ migrate_sources }}\n {%- endcall -%}\n\n {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt.statement" ] }, "description": "A macro to assist with migrating from v0 to v1 of dbt_artifacts. See\nhttps://github.com/brooklyn-data/dbt_artifacts/blob/main/README.md#migrating-from-100-to-100\nfor details on the usage.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "old_database", "type": "string", "description": "The database of the <1.0.0 output (fct_/dim_) models - does not have to be different to `new_database`\n" }, { "name": "old_schema", "type": "string", "description": "The schema of the <1.0.0 output (fct_/dim_) models - does not have to be different to `new_schema`\n" }, { "name": "new_database", "type": "string", "description": "The target database that the v1 artifact sources are in - does not have to be different to `old_database`\n" }, { "name": "new_schema", "type": "string", "description": "The target schema that the v1 artifact sources are in - does not have to be different to `old_schema`\n" } ], "created_at": 1697212557.6460629, "supported_languages": null }, "macro.dbt_artifacts.get_table_content_values": { "name": "get_table_content_values", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_table_content_values.sql", "original_file_path": "macros/upload_results/get_table_content_values.sql", "unique_id": "macro.dbt_artifacts.get_table_content_values", "macro_sql": "{% macro get_table_content_values(dataset, objects_to_upload) %}\n\n {# Convert the results to data to be imported #}\n\n {% if dataset == 'model_executions' %}\n {% set content = dbt_artifacts.upload_model_executions(objects_to_upload) %}\n {% elif dataset == 'seed_executions' %}\n {% set content = dbt_artifacts.upload_seed_executions(objects_to_upload) %}\n {% elif dataset == 'test_executions' %}\n {% set content = dbt_artifacts.upload_test_executions(objects_to_upload) %}\n {% elif dataset == 'snapshot_executions' %}\n {% set content = dbt_artifacts.upload_snapshot_executions(objects_to_upload) %}\n {% elif dataset == 'exposures' %}\n {% set content = dbt_artifacts.upload_exposures(objects_to_upload) %}\n {% elif dataset == 'models' %}\n {% set content = dbt_artifacts.upload_models(objects_to_upload) %}\n {% elif dataset == 'seeds' %}\n {% set content = dbt_artifacts.upload_seeds(objects_to_upload) %}\n {% elif dataset == 'snapshots' %}\n {% set content = dbt_artifacts.upload_snapshots(objects_to_upload) %}\n {% elif dataset == 'sources' %}\n {% set content = dbt_artifacts.upload_sources(objects_to_upload) %}\n {% elif dataset == 'tests' %}\n {% set content = dbt_artifacts.upload_tests(objects_to_upload) %}\n {# Invocations only requires data from variables available in the macro #}\n {% elif dataset == 'invocations' %}\n {% set content = dbt_artifacts.upload_invocations() %}\n {% endif %}\n\n {{ return(content) }}\n\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_invocations" ] }, "description": "A macro to create the insert statement values required to be uploaded to the table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "dataset", "type": "string", "description": "The name of the dataset to return the column names for e.g. `models`\n" }, { "name": "objects_to_upload", "type": "list", "description": "The objects to be used to generate the insert statement values - extracted from `get_dataset_content`\n" } ], "created_at": 1697212557.6564126, "supported_languages": null }, "macro.dbt_artifacts.get_dataset_content": { "name": "get_dataset_content", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_dataset_content.sql", "original_file_path": "macros/upload_results/get_dataset_content.sql", "unique_id": "macro.dbt_artifacts.get_dataset_content", "macro_sql": "{% macro get_dataset_content(dataset) %}\n\n {% if dataset in ['model_executions', 'seed_executions', 'test_executions', 'snapshot_executions'] %}\n {# Executions make use of the results object #}\n {% set objects = results | selectattr(\"node.resource_type\", \"equalto\", dataset.split(\"_\")[0]) | list %}\n {% elif dataset in ['seeds', 'snapshots', 'tests', 'models'] %}\n {# Use the nodes in the [graph](https://docs.getdbt.com/reference/dbt-jinja-functions/graph) to extract details #}\n {% set objects = graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", dataset[:-1]) | list %}\n {% elif dataset in ['exposures', 'sources'] %}\n {# Use the [graph](https://docs.getdbt.com/reference/dbt-jinja-functions/graph) to extract details #}\n {% set objects = graph.get(dataset).values() | list %}\n {% elif dataset == 'invocations' %}\n {#\n Invocations doesn't need anything input, but we include this so that it will still be picked up\n as part of the loop below - the length must be >0 to allow for an upload, hence the empty string\n #}\n {% set objects = [''] %}\n {% endif %}\n\n {{ return(objects) }}\n\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to extract the data to be uploaded from either the results or the graph object.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "dataset", "type": "string", "description": "The name of the dataset to return the data for e.g. `models`\n" } ], "created_at": 1697212557.6552753, "supported_languages": null }, "macro.dbt_artifacts.upload_results": { "name": "upload_results", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/upload_results.sql", "original_file_path": "macros/upload_results/upload_results.sql", "unique_id": "macro.dbt_artifacts.upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n {% if execute %}\n\n {% set datasets_to_load = ['exposures', 'seeds', 'snapshots', 'invocations', 'sources', 'tests', 'models'] %}\n {% if results != [] %}\n {# When executing, and results are available, then upload the results #}\n {% set datasets_to_load = ['model_executions', 'seed_executions', 'test_executions', 'snapshot_executions'] + datasets_to_load %}\n {% endif %}\n\n {# Upload each data set in turn #}\n {% for dataset in datasets_to_load %}\n\n {% do log(\"Uploading \" ~ dataset.replace(\"_\", \" \"), true) %}\n\n {# Get the results that need to be uploaded #}\n {% set objects = dbt_artifacts.get_dataset_content(dataset) %}\n\n {# Upload in chunks to reduce query size #}\n {% if dataset == 'model' %}\n {% set upload_limit = 50 if target.type == 'bigquery' else 100 %}\n {% else %}\n {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n {% endif %}\n\n {# Loop through each chunk in turn #}\n {% for i in range(0, objects | length, upload_limit) -%}\n\n {# Get just the objects to load on this loop #}\n {% set content = dbt_artifacts.get_table_content_values(dataset, objects[i: i + upload_limit]) %}\n\n {# Insert the content into the metadata table #}\n {{ dbt_artifacts.insert_into_metadata_table(\n dataset=dataset,\n fields=dbt_artifacts.get_column_name_list(dataset),\n content=content\n )\n }}\n\n {# Loop the next 'chunk' #}\n {% endfor %}\n\n {# Loop the next 'dataset' #}\n {% endfor %}\n\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.replace", "macro.dbt_artifacts.get_dataset_content", "macro.dbt_artifacts.get_table_content_values", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.get_column_name_list" ] }, "description": "The main macro called to upload the metadata into each of the source tables.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "results", "type": "list", "description": "The results object from dbt." } ], "created_at": 1697212557.6602173, "supported_languages": null }, "macro.dbt_artifacts.get_column_name_list": { "name": "get_column_name_list", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_column_name_lists.sql", "original_file_path": "macros/upload_results/get_column_name_lists.sql", "unique_id": "macro.dbt_artifacts.get_column_name_list", "macro_sql": "{% macro get_column_name_list(dataset) -%}\n\n {% if dataset == 'exposures' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n type,\n owner,\n maturity,\n path,\n description,\n url,\n package_name,\n depends_on_nodes,\n tags,\n all_results\n )\n\n {% elif dataset == 'invocations' %}\n\n (\n command_invocation_id,\n dbt_version,\n project_name,\n run_started_at,\n dbt_command,\n full_refresh_flag,\n target_profile_name,\n target_name,\n target_schema,\n target_threads,\n dbt_cloud_project_id,\n dbt_cloud_job_id,\n dbt_cloud_run_id,\n dbt_cloud_run_reason_category,\n dbt_cloud_run_reason,\n env_vars,\n dbt_vars,\n invocation_args,\n dbt_custom_envs\n )\n\n {% elif dataset == 'model_executions' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n {% if target.type == 'bigquery' %}\n bytes_processed,\n {% endif %}\n materialization,\n schema,\n name,\n alias,\n message,\n adapter_response\n )\n\n {% elif dataset == 'models' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n materialization,\n tags,\n meta,\n alias,\n all_results\n )\n\n\n {% elif dataset == 'seed_executions' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias,\n message,\n adapter_response\n )\n\n {% elif dataset == 'seeds' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n package_name,\n path,\n checksum,\n meta,\n alias,\n all_results\n )\n\n {% elif dataset == 'snapshot_executions' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n materialization,\n schema,\n name,\n alias,\n message,\n adapter_response\n )\n\n {% elif dataset == 'snapshots' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n name,\n depends_on_nodes,\n package_name,\n path,\n checksum,\n strategy,\n meta,\n alias,\n all_results\n )\n\n {% elif dataset == 'sources' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n database,\n schema,\n source_name,\n loader,\n name,\n identifier,\n loaded_at_field,\n freshness,\n all_results\n )\n\n {% elif dataset == 'test_executions' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n was_full_refresh,\n thread_id,\n status,\n compile_started_at,\n query_completed_at,\n total_node_runtime,\n rows_affected,\n failures,\n message,\n adapter_response\n )\n\n {% elif dataset == 'tests' %}\n\n (\n command_invocation_id,\n node_id,\n run_started_at,\n name,\n depends_on_nodes,\n package_name,\n test_path,\n tags,\n all_results\n )\n\n {% else %}\n\n /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var No column list available */\n\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "A macro to return the list of column names for a particular dataset. Returns a comment if the dataset is not\nvalid.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "dataset", "type": "string", "description": "The name of the dataset to return the column names for e.g. `models`\n" } ], "created_at": 1697212557.6546261, "supported_languages": null }, "macro.dbt_artifacts.insert_into_metadata_table": { "name": "insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(dataset, fields, content) -%}\n\n {% if content != \"\" %}\n\n {# Get the relation that the results will be uploaded to #}\n {% set dataset_relation = dbt_artifacts.get_relation(dataset) %}\n {# Insert the data into the table #}\n {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(dataset_relation, fields, content)) }}\n\n {% endif %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.snowflake__insert_into_metadata_table" ] }, "description": "Dependent on the adapter type, the wrapper to insert the data into a table from a list of values. Used in the\n`upload_results` macro, alongside the `get_column_lists` macro to generate the column names and the\n`upload_dataset` macros to generate the data to be inserted.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "database_name", "type": "string", "description": "The database name for the relation that the data is to be inserted into\n" }, { "name": "schema_name", "type": "string", "description": "The schema name for the relation that the data is to be inserted into\n" }, { "name": "table_name", "type": "string", "description": "The table name for the relation that the data is to be inserted into\n" }, { "name": "fields", "type": "string", "description": "The list of fields for the relation that the data is to be inserted into\n" }, { "name": "content", "type": "string", "description": "The data content to insert into the relation\n" } ], "created_at": 1697212557.659121, "supported_languages": null }, "macro.dbt_artifacts.spark__insert_into_metadata_table": { "name": "spark__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(relation, fields, content) -%}\n\n {% set insert_into_table_query %}\n insert into {{ relation }} {{ fields }}\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3030868, "supported_languages": null }, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": { "name": "snowflake__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(relation, fields, content) -%}\n\n {% set insert_into_table_query %}\n insert into {{ relation }} {{ fields }}\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.303648, "supported_languages": null }, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": { "name": "bigquery__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(relation, fields, content) -%}\n\n {% set insert_into_table_query %}\n insert into {{ relation }} {{ fields }}\n values\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.304247, "supported_languages": null }, "macro.dbt_artifacts.postgres__insert_into_metadata_table": { "name": "postgres__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.postgres__insert_into_metadata_table", "macro_sql": "{% macro postgres__insert_into_metadata_table(relation, fields, content) -%}\n\n {% set insert_into_table_query %}\n insert into {{ relation }} {{ fields }}\n values\n {{ content }}\n {% endset %}\n\n {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt.run_query" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.304821, "supported_languages": null }, "macro.dbt_artifacts.default__insert_into_metadata_table": { "name": "default__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(relation, fields, content) -%}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3050551, "supported_languages": null }, "macro.dbt_artifacts.upload_snapshot_executions": { "name": "upload_snapshot_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(snapshots) -%}\n {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql" ] }, "description": "The macro to support upload of the data to the snapshot_executions table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "snapshots", "type": "list", "description": "A list of snapshot execution results objects extracted from the dbt result object\n" } ], "created_at": 1697212557.6509748, "supported_languages": null }, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": { "name": "default__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n from values\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.320392, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": { "name": "bigquery__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Databricks #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3247268, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": { "name": "snowflake__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n from values\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3315904, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_snapshot_executions_dml_sql": { "name": "postgres__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.postgres__get_snapshot_executions_dml_sql", "macro_sql": "{% macro postgres__get_snapshot_executions_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_execution_values %}\n {% for model in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n $${{ model.message }}$$, {# message #}\n $${{ tojson(model.adapter_response) }}$$ {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.335216, "supported_languages": null }, "macro.dbt_artifacts.upload_models": { "name": "upload_models", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.upload_models", "macro_sql": "{% macro upload_models(models) -%}\n {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_models_dml_sql" ] }, "description": "The macro to support upload of the data to the models table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "models", "type": "list", "description": "A list of test objects extracted from the dbt graph\n" } ], "created_at": 1697212557.648718, "supported_languages": null }, "macro.dbt_artifacts.default__get_models_dml_sql": { "name": "default__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n {% if models != [] %}\n {% set model_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(15)) }}\n from values\n {% for model in models -%}\n {% do model.pop('raw_code', None) %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ model.database }}', {# database #}\n '{{ model.schema }}', {# schema #}\n '{{ model.name }}', {# name #}\n '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n '{{ model.package_name }}', {# package_name #}\n '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ model.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n '{{ model.config.materialized }}', {# materialization #}\n '{{ tojson(model.tags) }}', {# tags #}\n '{{ tojson(model.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n '{{ model.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.348262, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_models_dml_sql": { "name": "bigquery__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_values %}\n {% for model in models -%}\n {% do model.pop('raw_code', None) %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ model.database }}', {# database #}\n '{{ model.schema }}', {# schema #}\n '{{ model.name }}', {# name #}\n {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ model.package_name }}', {# package_name #}\n '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ model.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n '{{ model.config.materialized }}', {# materialization #}\n {{ tojson(model.tags) }}, {# tags #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.config.meta)) }}, {# meta #}\n '{{ model.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3514938, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_models_dml_sql": { "name": "postgres__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.postgres__get_models_dml_sql", "macro_sql": "{% macro postgres__get_models_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_values %}\n {% for model in models -%}\n {% do model.pop('raw_code', None) %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ model.database }}', {# database #}\n '{{ model.schema }}', {# schema #}\n '{{ model.name }}', {# name #}\n '{{ tojson(model.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ model.package_name }}', {# package_name #}\n $${{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}$$, {# path #}\n '{{ model.checksum.checksum }}', {# checksum #}\n '{{ model.config.materialized }}', {# materialization #}\n '{{ tojson(model.tags) }}', {# tags #}\n $${{ model.config.meta }}$$, {# meta #}\n '{{ model.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(model) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3540921, "supported_languages": null }, "macro.dbt_artifacts.upload_seed_executions": { "name": "upload_seed_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(seeds) -%}\n {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql" ] }, "description": "The macro to support upload of the data to the seed_executions table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "seeds", "type": "list", "description": "A list of seed execution results objects extracted from the dbt result object\n" } ], "created_at": 1697212557.6496108, "supported_languages": null }, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": { "name": "default__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n from values\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3691077, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": { "name": "bigquery__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Databricks #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3732343, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": { "name": "snowflake__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n from values\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3800352, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_seed_executions_dml_sql": { "name": "postgres__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.postgres__get_seed_executions_dml_sql", "macro_sql": "{% macro postgres__get_seed_executions_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_execution_values %}\n {% for model in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% if model.timing != [] %}\n {% for stage in model.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in model.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Databricks #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n $${{ model.message }}$$, {# message #}\n $${{ tojson(model.adapter_response) }}$$ {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3835661, "supported_languages": null }, "macro.dbt_artifacts.upload_exposures": { "name": "upload_exposures", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.upload_exposures", "macro_sql": "{% macro upload_exposures(exposures) -%}\n {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_exposures_dml_sql" ] }, "description": "The macro to support upload of the data to the exposures table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "exposures", "type": "list", "description": "A list of exposure objects extracted from the dbt graph\n" } ], "created_at": 1697212557.6467211, "supported_languages": null }, "macro.dbt_artifacts.default__get_exposures_dml_sql": { "name": "default__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n {% if exposures != [] %}\n {% set exposure_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n from values\n {% for exposure in exposures -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n '{{ exposure.type }}', {# type #}\n '{{ tojson(exposure.owner) }}', {# owner #}\n '{{ exposure.maturity }}', {# maturity #}\n '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n '{{ exposure.url }}', {# url #}\n '{{ exposure.package_name }}', {# package_name #}\n '{{ tojson(exposure.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ tojson(exposure.tags) }}', {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ exposure_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3947527, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": { "name": "bigquery__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n {% if exposures != [] %}\n {% set exposure_values %}\n {% for exposure in exposures -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n '{{ exposure.type }}', {# type #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure.owner) | replace(\"'\",\"\\\\'\")) }}, {# owner #}\n '{{ exposure.maturity }}', {# maturity #}\n '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n '{{ exposure.url }}', {# url #}\n '{{ exposure.package_name }}', {# package_name #}\n {{ tojson(exposure.depends_on.nodes) }}, {# depends_on_nodes #}\n {{ tojson(exposure.tags) }}, {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ exposure_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.3980982, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_exposures_dml_sql": { "name": "postgres__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.postgres__get_exposures_dml_sql", "macro_sql": "{% macro postgres__get_exposures_dml_sql(exposures) -%}\n {% if exposures != [] %}\n\n {% set exposure_values %}\n {% for exposure in exposures -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n $${{ exposure.unique_id }}$$, {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n $${{ exposure.name }}$$, {# name #}\n '{{ exposure.type }}', {# type #}\n $${{ tojson(exposure.owner) }}$$, {# owner #}\n '{{ exposure.maturity }}', {# maturity #}\n $${{ exposure.original_file_path }}$$, {# path #}\n $${{ exposure.description }}$$, {# description #}\n '{{ exposure.url }}', {# url #}\n '{{ exposure.package_name }}', {# package_name #}\n $${{ tojson(exposure.depends_on.nodes) }}$$, {# depends_on_nodes #}\n $${{ tojson(exposure.tags) }}$$, {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(exposure) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ exposure_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.400418, "supported_languages": null }, "macro.dbt_artifacts.upload_model_executions": { "name": "upload_model_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.upload_model_executions", "macro_sql": "{% macro upload_model_executions(models) -%}\n {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql" ] }, "description": "The macro to support upload of the data to the model_executions table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "models", "type": "list", "description": "A list of model execution results objects extracted from the dbt result object\n" } ], "created_at": 1697212557.6480193, "supported_languages": null }, "macro.dbt_artifacts.default__get_model_executions_dml_sql": { "name": "default__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n\n from values\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4152918, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": { "name": "bigquery__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.419618, "supported_languages": null }, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": { "name": "snowflake__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n from values\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.426564, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_model_executions_dml_sql": { "name": "postgres__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.postgres__get_model_executions_dml_sql", "macro_sql": "{% macro postgres__get_model_executions_dml_sql(models) -%}\n {% if models != [] %}\n {% set model_execution_values %}\n {% for model in models -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ model.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = model.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ model.thread_id }}', {# thread_id #}\n '{{ model.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ model.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected #}\n '{{ model.node.config.materialized }}', {# materialization #}\n '{{ model.node.schema }}', {# schema #}\n '{{ model.node.name }}', {# name #}\n '{{ model.node.alias }}', {# alias #}\n $${{ model.message }}$$, {# message #}\n $${{ tojson(model.adapter_response) }}$$ {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ model_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.430062, "supported_languages": null }, "macro.dbt_artifacts.upload_sources": { "name": "upload_sources", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.upload_sources", "macro_sql": "{% macro upload_sources(sources) -%}\n {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_sources_dml_sql" ] }, "description": "The macro to support upload of the data to the sources table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "sources", "type": "list", "description": "A list of sources objects extracted from the dbt graph\n" } ], "created_at": 1697212557.6523325, "supported_languages": null }, "macro.dbt_artifacts.default__get_sources_dml_sql": { "name": "default__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n {% if sources != [] %}\n {% set source_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n from values\n {% for source in sources -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ source.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ source.database }}', {# database #}\n '{{ source.schema }}', {# schema #}\n '{{ source.source_name }}', {# source_name #}\n '{{ source.loader }}', {# loader #}\n '{{ source.name }}', {# name #}\n '{{ source.identifier }}', {# identifier #}\n '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}', {# freshness #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ source_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.439377, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": { "name": "bigquery__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n {% if sources != [] %}\n {% set source_values %}\n {% for source in sources -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ source.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ source.database }}', {# database #}\n '{{ source.schema }}', {# schema #}\n '{{ source.source_name }}', {# source_name #}\n '{{ source.loader }}', {# loader #}\n '{{ source.name }}', {# name #}\n '{{ source.identifier }}', {# identifier #}\n '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source.freshness) | replace(\"'\",\"\\\\'\")) }}, {# freshness #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ source_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4422398, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_sources_dml_sql": { "name": "postgres__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.postgres__get_sources_dml_sql", "macro_sql": "{% macro postgres__get_sources_dml_sql(sources) -%}\n {% if sources != [] %}\n {% set source_values %}\n {% for source in sources -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ source.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ source.database }}', {# database #}\n '{{ source.schema }}', {# schema #}\n '{{ source.source_name }}', {# source_name #}\n '{{ source.loader }}', {# loader #}\n '{{ source.name }}', {# name #}\n '{{ source.identifier }}', {# identifier #}\n $${{ source.loaded_at_field }}$$, {# loaded_at_field #}\n $${{ tojson(source.freshness) }}$$, {# freshness #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(source) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ source_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4443078, "supported_languages": null }, "macro.dbt_artifacts.upload_seeds": { "name": "upload_seeds", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.upload_seeds", "macro_sql": "{% macro upload_seeds(seeds) -%}\n {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_seeds_dml_sql" ] }, "description": "The macro to support upload of the data to the seeds table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "seeds", "type": "list", "description": "A list of seeds objects extracted from the dbt graph\n" } ], "created_at": 1697212557.6503015, "supported_languages": null }, "macro.dbt_artifacts.default__get_seeds_dml_sql": { "name": "default__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n {% if seeds != [] %}\n {% set seed_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n from values\n {% for seed in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ seed.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ seed.database }}', {# database #}\n '{{ seed.schema }}', {# schema #}\n '{{ seed.name }}', {# name #}\n '{{ seed.package_name }}', {# package_name #}\n '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ seed.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n '{{ tojson(seed.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n '{{ seed.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4539325, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": { "name": "bigquery__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_values %}\n {% for seed in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ seed.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ seed.database }}', {# database #}\n '{{ seed.schema }}', {# schema #}\n '{{ seed.name }}', {# name #}\n '{{ seed.package_name }}', {# package_name #}\n '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ seed.checksum.checksum | replace('\\\\', '\\\\\\\\')}}', {# checksum #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed.config.meta)) }}, {# meta #}\n '{{ seed.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.456822, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_seeds_dml_sql": { "name": "postgres__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.postgres__get_seeds_dml_sql", "macro_sql": "{% macro postgres__get_seeds_dml_sql(seeds) -%}\n {% if seeds != [] %}\n {% set seed_values %}\n {% for seed in seeds -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ seed.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ seed.database }}', {# database #}\n '{{ seed.schema }}', {# schema #}\n '{{ seed.name }}', {# name #}\n '{{ seed.package_name }}', {# package_name #}\n '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ seed.checksum.checksum }}', {# checksum #}\n $${{ tojson(seed.config.meta) }}$$, {# meta #}\n '{{ seed.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(seed) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ seed_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4589581, "supported_languages": null }, "macro.dbt_artifacts.upload_snapshots": { "name": "upload_snapshots", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.upload_snapshots", "macro_sql": "{% macro upload_snapshots(snapshots) -%}\n\n {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_snapshots_dml_sql" ] }, "description": "The macro to support upload of the data to the snapshots table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "snapshots", "type": "list", "description": "A list of snapshots objects extracted from the dbt graph\n" } ], "created_at": 1697212557.6516473, "supported_languages": null }, "macro.dbt_artifacts.default__get_snapshots_dml_sql": { "name": "default__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n {% if snapshots != [] %}\n {% set snapshot_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n from values\n {% for snapshot in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ snapshot.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ snapshot.database }}', {# database #}\n '{{ snapshot.schema }}', {# schema #}\n '{{ snapshot.name }}', {# name #}\n '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ snapshot.package_name }}', {# package_name #}\n '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ snapshot.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n '{{ snapshot.config.strategy }}', {# strategy #}\n '{{ tojson(snapshot.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n '{{ snapshot.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4702022, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": { "name": "bigquery__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_values %}\n {% for snapshot in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ snapshot.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ snapshot.database }}', {# database #}\n '{{ snapshot.schema }}', {# schema #}\n '{{ snapshot.name }}', {# name #}\n {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ snapshot.package_name }}', {# package_name #}\n '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ snapshot.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n '{{ snapshot.config.strategy }}', {# strategy #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot.config.meta)) }}, {# meta #}\n '{{ snapshot.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4732935, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_snapshots_dml_sql": { "name": "postgres__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.postgres__get_snapshots_dml_sql", "macro_sql": "{% macro postgres__get_snapshots_dml_sql(snapshots) -%}\n {% if snapshots != [] %}\n {% set snapshot_values %}\n {% for snapshot in snapshots -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ snapshot.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ snapshot.database }}', {# database #}\n '{{ snapshot.schema }}', {# schema #}\n '{{ snapshot.name }}', {# name #}\n $${{ tojson(snapshot.depends_on.nodes) }}$$, {# depends_on_nodes #}\n '{{ snapshot.package_name }}', {# package_name #}\n '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n '{{ snapshot.checksum.checksum }}', {# checksum #}\n '{{ snapshot.config.strategy }}', {# strategy #}\n $${{ tojson(snapshot.config.meta) }}$$, {# meta #}\n '{{ snapshot.alias }}', {# alias #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(snapshot) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ snapshot_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4756548, "supported_languages": null }, "macro.dbt_artifacts.upload_tests": { "name": "upload_tests", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.upload_tests", "macro_sql": "{% macro upload_tests(tests) -%}\n {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_tests_dml_sql" ] }, "description": "The macro to support upload of the data to the tests table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "tests", "type": "list", "description": "A list of test objects extracted from the dbt graph\n" } ], "created_at": 1697212557.6536384, "supported_languages": null }, "macro.dbt_artifacts.default__get_tests_dml_sql": { "name": "default__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n {% if tests != [] %}\n {% set test_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(9)) }}\n from values\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ test.name }}', {# name #}\n '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n '{{ test.package_name }}', {# package_name #}\n '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n '{{ tojson(test.tags) }}', {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n '{{ tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_fields #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4833746, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": { "name": "bigquery__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ test.name }}', {# name #}\n {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n '{{ test.package_name }}', {# package_name #}\n '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n {{ tojson(test.tags) }}, {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_fields #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.48586, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_tests_dml_sql": { "name": "postgres__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.postgres__get_tests_dml_sql", "macro_sql": "{% macro postgres__get_tests_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ test.name }}', {# name #}\n $${{ tojson(test.depends_on.nodes) }}$$, {# depends_on_nodes #}\n '{{ test.package_name }}', {# package_name #}\n '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n $${{ tojson(test.tags) }}$$, {# tags #}\n {% if var('dbt_artifacts_exclude_all_results', false) %}\n null\n {% else %}\n $${{ tojson(test) }}$$ {# all_results #}\n {% endif %}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.4878106, "supported_languages": null }, "macro.dbt_artifacts.upload_invocations": { "name": "upload_invocations", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n\n {# Need to remove keys with results that can't be handled properly #}\n {# warn_error_options - returns a python object in 1.5 #}\n {% if 'warn_error_options' in invocation_args_dict %}\n {% if invocation_args_dict.warn_error_options is not string %}\n {% if invocation_args_dict.warn_error_options.include %}\n {% set include_options = invocation_args_dict.warn_error_options.include %}\n {% else %}\n {% set include_options = '' %}\n {% endif %}\n {% if invocation_args_dict.warn_error_options.exclude %}\n {% set exclude_options = invocation_args_dict.warn_error_options.exclude %}\n {% else %}\n {% set exclude_options = '' %}\n {% endif %}\n {% set warn_error_options = {'include': include_options, 'exclude': exclude_options} %}\n {%- do invocation_args_dict.update({'warn_error_options': warn_error_options}) %}\n {% endif %}\n {% endif %}\n\n {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_invocations_dml_sql" ] }, "description": "The macro to support upload of the data to the invocations table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1697212557.6473138, "supported_languages": null }, "macro.dbt_artifacts.default__get_invocations_dml_sql": { "name": "default__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n {% set invocation_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n from values\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ dbt_version }}', {# dbt_version #}\n '{{ project_name }}', {# project_name #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ flags.WHICH }}', {# dbt_command #}\n '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n '{{ target.profile_name }}', {# target_profile_name #}\n '{{ target.name }}', {# target_name #}\n '{{ target.schema }}', {# target_schema #}\n {{ target.threads }}, {# target_threads #}\n\n '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n {% if var('env_vars', none) %}\n {% set env_vars_dict = {} %}\n {% for env_variable in var('env_vars') %}\n {% do env_vars_dict.update({env_variable: (env_var(env_variable, '') | replace(\"'\", \"''\"))}) %}\n {% endfor %}\n '{{ tojson(env_vars_dict) }}', {# env_vars #}\n {% else %}\n null, {# env_vars #}\n {% endif %}\n\n {% if var('dbt_vars', none) %}\n {% set dbt_vars_dict = {} %}\n {% for dbt_var in var('dbt_vars') %}\n {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, '') | replace(\"'\", \"''\"))}) %}\n {% endfor %}\n '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n {% else %}\n null, {# dbt_vars #}\n {% endif %}\n\n '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') | replace(\"'\", \"\\\\'\") }}', {# invocation_args #}\n\n {% set metadata_env = {} %}\n {% for key, value in dbt_metadata_envs.items() %}\n {% do metadata_env.update({key: (value | replace(\"'\", \"''\"))}) %}\n {% endfor %}\n '{{ tojson(metadata_env) | replace('\\\\', '\\\\\\\\') }}' {# dbt_custom_envs #}\n\n )\n {% endset %}\n {{ invocation_values }}\n\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5065916, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": { "name": "bigquery__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n {% set invocation_values %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ dbt_version }}', {# dbt_version #}\n '{{ project_name }}', {# project_name #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ flags.WHICH }}', {# dbt_command #}\n {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n '{{ target.profile_name }}', {# target_profile_name #}\n '{{ target.name }}', {# target_name #}\n '{{ target.schema }}', {# target_schema #}\n {{ target.threads }}, {# target_threads #}\n\n '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n {% if var('env_vars', none) %}\n {% set env_vars_dict = {} %}\n {% for env_variable in var('env_vars') %}\n {% do env_vars_dict.update({env_variable: (env_var(env_variable, ''))}) %}\n {% endfor %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(env_vars_dict)) }}, {# env_vars #}\n {% else %}\n null, {# env_vars #}\n {% endif %}\n\n {% if var('dbt_vars', none) %}\n {% set dbt_vars_dict = {} %}\n {% for dbt_var in var('dbt_vars') %}\n {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, ''))}) %}\n {% endfor %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(dbt_vars_dict)) }}, {# dbt_vars #}\n {% else %}\n null, {# dbt_vars #}\n {% endif %}\n\n {% if invocation_args_dict.vars %}\n {# vars - different format for pre v1.5 (yaml vs list) #}\n {% if invocation_args_dict.vars is string %}\n {# BigQuery does not handle the yaml-string from \"--vars\" well, when passed to \"parse_json\". Workaround is to parse the string, and then \"tojson\" will properly format the dict as a json-object. #}\n {% set parsed_inv_args_vars = fromyaml(invocation_args_dict.vars) %}\n {% do invocation_args_dict.update({'vars': parsed_inv_args_vars}) %}\n {% endif %}\n {% endif %}\n\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(invocation_args_dict) | replace(\"'\", \"\\\\'\")) }}, {# invocation_args #}\n\n {% set metadata_env = {} %}\n {% for key, value in dbt_metadata_envs.items() %}\n {% do metadata_env.update({key: value}) %}\n {% endfor %}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(metadata_env) | replace('\\\\', '\\\\\\\\')) }} {# dbt_custom_envs #}\n\n )\n {% endset %}\n {{ invocation_values }}\n\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5121899, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_invocations_dml_sql": { "name": "postgres__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.postgres__get_invocations_dml_sql", "macro_sql": "{% macro postgres__get_invocations_dml_sql() -%}\n {% set invocation_values %}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ dbt_version }}', {# dbt_version #}\n '{{ project_name }}', {# project_name #}\n '{{ run_started_at }}', {# run_started_at #}\n '{{ flags.WHICH }}', {# dbt_command #}\n {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n '{{ target.profile_name }}', {# target_profile_name #}\n '{{ target.name }}', {# target_name #}\n '{{ target.schema }}', {# target_schema #}\n {{ target.threads }}, {# target_threads #}\n\n '{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"\") }}', {# dbt_cloud_project_id #}\n '{{ env_var(\"DBT_CLOUD_JOB_ID\", \"\") }}', {# dbt_cloud_job_id #}\n '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"\") }}', {# dbt_cloud_run_id #}\n '{{ env_var(\"DBT_CLOUD_RUN_REASON_CATEGORY\", \"\") }}', {# dbt_cloud_run_reason_category #}\n $${{ env_var('DBT_CLOUD_RUN_REASON', '') }}$$, {# dbt_cloud_run_reason #}\n\n {% if var('env_vars', none) %}\n {% set env_vars_dict = {} %}\n {% for env_variable in var('env_vars') %}\n {% do env_vars_dict.update({env_variable: (env_var(env_variable, ''))}) %}\n {% endfor %}\n $${{ tojson(env_vars_dict) }}$$, {# env_vars #}\n {% else %}\n null, {# env_vars #}\n {% endif %}\n\n {% if var('dbt_vars', none) %}\n {% set dbt_vars_dict = {} %}\n {% for dbt_var in var('dbt_vars') %}\n {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, ''))}) %}\n {% endfor %}\n $${{ tojson(dbt_vars_dict) }}$$, {# dbt_vars #}\n {% else %}\n null, {# dbt_vars #}\n {% endif %}\n\n {% if invocation_args_dict.vars %}\n {# vars - different format for pre v1.5 (yaml vs list) #}\n {% if invocation_args_dict.vars is string %}\n {# BigQuery does not handle the yaml-string from \"--vars\" well, when passed to \"parse_json\". Workaround is to parse the string, and then \"tojson\" will properly format the dict as a json-object. #}\n {% set parsed_inv_args_vars = fromyaml(invocation_args_dict.vars) %}\n {% do invocation_args_dict.update({'vars': parsed_inv_args_vars}) %}\n {% endif %}\n {% endif %}\n\n $${{ tojson(invocation_args_dict) }}$$, {# invocation_args #}\n\n {% set metadata_env = {} %}\n {% for key, value in dbt_metadata_envs.items() %}\n {% do metadata_env.update({key: value}) %}\n {% endfor %}\n $${{ tojson(metadata_env) }}$$ {# dbt_custom_envs #}\n )\n {% endset %}\n {{ invocation_values }}\n\n{% endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5168545, "supported_languages": null }, "macro.dbt_artifacts.upload_test_executions": { "name": "upload_test_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.upload_test_executions", "macro_sql": "{% macro upload_test_executions(tests) -%}\n {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__get_test_executions_dml_sql" ] }, "description": "The macro to support upload of the data to the test_executions table.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "tests", "type": "list", "description": "A list of test execution results objects extracted from the dbt result object\n" } ], "created_at": 1697212557.6529884, "supported_languages": null }, "macro.dbt_artifacts.default__get_test_executions_dml_sql": { "name": "default__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_execution_values %}\n select\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }}\n from values\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = test.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n '{{ config_full_refresh }}', {# was_full_refresh #}\n\n '{{ test.thread_id }}', {# thread_id #}\n '{{ test.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ test.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected not available in Databricks #}\n {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n '{{ tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n {%- endfor %}\n {% endset %}\n {{ test_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.527569, "supported_languages": null }, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": { "name": "bigquery__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_execution_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = test.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ test.thread_id }}', {# thread_id #}\n '{{ test.status }}', {# status #}\n\n {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n {{ test.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected not available in Databricks #}\n {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n\n {%- endfor %}\n {% endset %}\n {{ test_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}\n\n", "depends_on": { "macros": [ "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5314796, "supported_languages": null }, "macro.dbt_artifacts.postgres__get_test_executions_dml_sql": { "name": "postgres__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.postgres__get_test_executions_dml_sql", "macro_sql": "{% macro postgres__get_test_executions_dml_sql(tests) -%}\n {% if tests != [] %}\n {% set test_execution_values %}\n {% for test in tests -%}\n (\n '{{ invocation_id }}', {# command_invocation_id #}\n '{{ test.node.unique_id }}', {# node_id #}\n '{{ run_started_at }}', {# run_started_at #}\n\n {% set config_full_refresh = test.node.config.full_refresh %}\n {% if config_full_refresh is none %}\n {% set config_full_refresh = flags.FULL_REFRESH %}\n {% endif %}\n {{ config_full_refresh }}, {# was_full_refresh #}\n\n '{{ test.thread_id }}', {# thread_id #}\n '{{ test.status }}', {# status #}\n\n {% if test.timing != [] %}\n {% for stage in test.timing if stage.name == \"compile\" %}\n {% if loop.length == 0 %}\n null, {# compile_started_at #}\n {% else %}\n '{{ stage.started_at }}', {# compile_started_at #}\n {% endif %}\n {% endfor %}\n\n {% for stage in test.timing if stage.name == \"execute\" %}\n {% if loop.length == 0 %}\n null, {# query_completed_at #}\n {% else %}\n '{{ stage.completed_at }}', {# query_completed_at #}\n {% endif %}\n {% endfor %}\n {% else %}\n null, {# compile_started_at #}\n null, {# query_completed_at #}\n {% endif %}\n\n {{ test.execution_time }}, {# total_node_runtime #}\n null, {# rows_affected not available in Databricks #}\n {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n $${{ test.message }}$$, {# message #}\n $${{ tojson(test.adapter_response) }}$$ {# adapter_response #}\n )\n {%- if not loop.last %},{%- endif %}\n\n {%- endfor %}\n {% endset %}\n {{ test_execution_values }}\n {% else %}\n {{ return(\"\") }}\n {% endif %}\n{% endmacro -%}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5348532, "supported_languages": null }, "macro.dbt_artifacts.parse_json": { "name": "parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.parse_json", "macro_sql": "{% macro parse_json(field) -%}\n {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__parse_json" ] }, "description": "Dependent on the adapter type, return a column which parses the JSON field.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "field", "type": "string", "description": "The name of the field to parse\n" } ], "created_at": 1697212557.6421657, "supported_languages": null }, "macro.dbt_artifacts.default__parse_json": { "name": "default__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n {{ field }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5357592, "supported_languages": null }, "macro.dbt_artifacts.snowflake__parse_json": { "name": "snowflake__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n parse_json({{ field }})\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5360231, "supported_languages": null }, "macro.dbt_artifacts.bigquery__parse_json": { "name": "bigquery__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n safe.parse_json(\"\"\"{{ field }}\"\"\", wide_number_mode=>'round')\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5362887, "supported_languages": null }, "macro.dbt_artifacts.column_identifier": { "name": "column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__column_identifier" ] }, "description": "Dependent on the adapter type, return the identifier for a column using a numerical index.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "column_index", "type": "integer", "description": "The index of the column to return the identifier for\n" } ], "created_at": 1697212557.638385, "supported_languages": null }, "macro.dbt_artifacts.default__column_identifier": { "name": "default__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n {{ column_index }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5371602, "supported_languages": null }, "macro.dbt_artifacts.snowflake__column_identifier": { "name": "snowflake__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n ${{ column_index }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5373957, "supported_languages": null }, "macro.dbt_artifacts.spark__column_identifier": { "name": "spark__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n col{{ column_index }}\n{%- endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.537631, "supported_languages": null }, "macro.dbt_artifacts.type_boolean": { "name": "type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_boolean", "macro_sql": "{% macro type_boolean() %}\n {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__type_boolean" ] }, "description": "Dependent on the adapter type, returns the native boolean type.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1697212557.64319, "supported_languages": null }, "macro.dbt_artifacts.default__type_boolean": { "name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5388877, "supported_languages": null }, "macro.dbt_artifacts.type_json": { "name": "type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_json", "macro_sql": "{% macro type_json() %}\n {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__type_json" ] }, "description": "Dependent on the adapter type, returns the native type for storing JSON.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1697212557.6436954, "supported_languages": null }, "macro.dbt_artifacts.default__type_json": { "name": "default__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_json", "macro_sql": "{% macro default__type_json() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5396187, "supported_languages": null }, "macro.dbt_artifacts.snowflake__type_json": { "name": "snowflake__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n object\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5398066, "supported_languages": null }, "macro.dbt_artifacts.bigquery__type_json": { "name": "bigquery__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n json\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.540007, "supported_languages": null }, "macro.dbt_artifacts.type_array": { "name": "type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_array", "macro_sql": "{% macro type_array() %}\n {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.snowflake__type_array" ] }, "description": "Dependent on the adapter type, returns the native type for storing an array.\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1697212557.6426778, "supported_languages": null }, "macro.dbt_artifacts.default__type_array": { "name": "default__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_array", "macro_sql": "{% macro default__type_array() %}\n {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5407495, "supported_languages": null }, "macro.dbt_artifacts.snowflake__type_array": { "name": "snowflake__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n array\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5409367, "supported_languages": null }, "macro.dbt_artifacts.bigquery__type_array": { "name": "bigquery__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n array<string>\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5411165, "supported_languages": null }, "macro.dbt_artifacts.generate_surrogate_key": { "name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/generate_surrogate_key.sql", "original_file_path": "macros/database_specific_helpers/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.generate_surrogate_key", "macro_sql": "\n\n{%- macro generate_surrogate_key(field_list) -%}\n {# Note - update the reference to `dbt_utils` to `dbt_artifacts` here #}\n {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_artifacts')(field_list)) }}\n{% endmacro %}", "depends_on": { "macros": [ "macro.dbt_artifacts.default__generate_surrogate_key" ] }, "description": "Since folks commonly install dbt_artifacts alongside a myriad of other packages,\nwe copy the dbt_utils implementation of the surrogate_key macro so we don't have\nany dependencies to make conflicts worse!\n\nThis version is:\nURL: https://github.com/dbt-labs/dbt-utils/blob/main/macros/sql/generate_surrogate_key.sql\nCommit SHA: eaa0e41b033bdf252eff0ae014ec11888f37ebff\nDate: 2023-04-28\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "field_list", "type": "list", "description": "A list of fields to concatenate together to form the surrogate key\n" } ], "created_at": 1697212557.6397512, "supported_languages": null }, "macro.dbt_artifacts.default__generate_surrogate_key": { "name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/generate_surrogate_key.sql", "original_file_path": "macros/database_specific_helpers/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{# Note - Removed this logic to retain consistency with the previous surrogate_key logic #}\n{# {%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%} #}\n{%- set default_null_value = \"\" -%}\n{# {%- else -%}\n {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%} #}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n {%- do fields.append(\n \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value ~\"')\"\n ) -%}\n\n {%- if not loop.last %}\n {%- do fields.append(\"'-'\") -%}\n {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": { "macros": [ "macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat" ] }, "description": "", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": null, "arguments": [], "created_at": 1697212555.5432632, "supported_languages": null }, "macro.dbt_artifacts.get_relation": { "name": "get_relation", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/get_relation.sql", "original_file_path": "macros/database_specific_helpers/get_relation.sql", "unique_id": "macro.dbt_artifacts.get_relation", "macro_sql": "{% macro get_relation(relation_name) %}\n {% if execute %}\n {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', relation_name) | first %}\n {% set relation = api.Relation.create(\n database = model_get_relation_node.database,\n schema = model_get_relation_node.schema,\n identifier = model_get_relation_node.alias\n )\n %}\n {% do return(relation) %}\n {% else %}\n {% do return(api.Relation.create()) %}\n {% endif %}\n{% endmacro %}", "depends_on": { "macros": [] }, "description": "Identify a relation in the graph from a relation name\n", "meta": {}, "docs": { "show": true, "node_color": null }, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [ { "name": "get_relation_name", "type": "string", "description": "The name of the relation to return from the graph\n" } ], "created_at": 1697212557.641158, "supported_languages": null } }, "docs": { "doc.tpch.__dbt_utils__": { "name": "__dbt_utils__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_utils__", "block_contents": "# Utility macros\nThis package is maintained by dbt Labs.\n\nOur dbt project heavily uses this suite of utility macros, especially:\n- `surrogate_key`\n- `test_equality`\n- `pivot`\n\nfor more info, please check [dbt_utils](https://hub.getdbt.com/dbt-labs/dbt_utils/latest/)" }, "doc.tpch.__codegen__": { "name": "__codegen__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__codegen__", "block_contents": "# codegen\nThis package is maintained by dbt Labs.\n\nIt provides macros that are especially helpful in creating yml files and base models quickly.\n\nfor more info, please check [codgen](https://hub.getdbt.com/dbt-labs/codegen/latest/)" }, "doc.tpch.__snowflake_spend__": { "name": "__snowflake_spend__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__snowflake_spend__", "block_contents": "# snowflake_spend\nThis package is provided by the community -- created by gitlabhq. \n\nThe intent of this package is to understand the cost your Snowflake Data Warehouse is accruing\n\nfor more info, please check [snowflake_spend](https://hub.getdbt.com/gitlabhq/snowflake_spend/latest/)" }, "doc.tpch.__dbt_external_tables__": { "name": "__dbt_external_tables__", "resource_type": "doc", "package_name": "tpch", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.tpch.__dbt_external_tables__", "block_contents": "# dbt_external_tables\nThis package is maintained by dbt Labs.\n\nIt provides macros to create/replace external tables and refresh their partitions, using the metadata provided in your .yml file source definitions\n\nfor more info, please check [dbt_external_tables](https://hub.getdbt.com/dbt-labs/dbt_external_tables/latest/)" }, "doc.tpch.tpch_source": { "name": "tpch_source", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.tpch_source", "block_contents": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-guide/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!\n\n![ERD](https://raw.githubusercontent.com/dpguthrie/snowflake-dbt-demo-project/main/assets/tpch_erd.png)" }, "doc.tpch.order_item_key": { "name": "order_item_key", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.order_item_key", "block_contents": "surrogate key for the model -- combo of order_key + line_number" }, "doc.tpch.line_number": { "name": "line_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.line_number", "block_contents": "sequence of the order items within the order" }, "doc.tpch.return_flag": { "name": "return_flag", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.return_flag", "block_contents": "letter determining the status of the return" }, "doc.tpch.ship_date": { "name": "ship_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.ship_date", "block_contents": "the date the order item is being shipped" }, "doc.tpch.commit_date": { "name": "commit_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.commit_date", "block_contents": "the date the order item is being commited" }, "doc.tpch.receipt_date": { "name": "receipt_date", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.receipt_date", "block_contents": "the receipt date of the order item" }, "doc.tpch.ship_mode": { "name": "ship_mode", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.ship_mode", "block_contents": "method of shipping" }, "doc.tpch.comment": { "name": "comment", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.comment", "block_contents": "additional commentary" }, "doc.tpch.extended_price": { "name": "extended_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.extended_price", "block_contents": "line item price" }, "doc.tpch.discount_percentage": { "name": "discount_percentage", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.discount_percentage", "block_contents": "percentage of the discount" }, "doc.tpch.supplier_name": { "name": "supplier_name", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.supplier_name", "block_contents": "id of the supplier" }, "doc.tpch.supplier_address": { "name": "supplier_address", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.supplier_address", "block_contents": "address of the supplier" }, "doc.tpch.phone_number": { "name": "phone_number", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.phone_number", "block_contents": "phone number of the supplier" }, "doc.tpch.account_balance": { "name": "account_balance", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.account_balance", "block_contents": "raw account balance" }, "doc.tpch.retail_price": { "name": "retail_price", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.retail_price", "block_contents": "raw retail price" }, "doc.tpch.available_quantity": { "name": "available_quantity", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.available_quantity", "block_contents": "raw available quantity" }, "doc.tpch.cost": { "name": "cost", "resource_type": "doc", "package_name": "tpch", "path": "staging/tpch/_tpch__docs.md", "original_file_path": "models/staging/tpch/_tpch__docs.md", "unique_id": "doc.tpch.cost", "block_contents": "raw cost" }, "doc.tpch.base_price": { "name": "base_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.base_price", "block_contents": "since extended_price is the line item total, we back out the price per item" }, "doc.tpch.discounted_price": { "name": "discounted_price", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total" }, "doc.tpch.tax_rate": { "name": "tax_rate", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.tax_rate", "block_contents": "tax rate of the order item" }, "doc.tpch.gross_item_sales_amount": { "name": "gross_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.gross_item_sales_amount", "block_contents": "same as extended_price" }, "doc.tpch.discounted_item_sales_amount": { "name": "discounted_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount" }, "doc.tpch.item_discount_amount": { "name": "item_discount_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_discount_amount", "block_contents": "item level discount amount. this is always a negative number" }, "doc.tpch.item_tax_amount": { "name": "item_tax_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.item_tax_amount", "block_contents": "item level tax total" }, "doc.tpch.net_item_sales_amount": { "name": "net_item_sales_amount", "resource_type": "doc", "package_name": "tpch", "path": "marts/intermediate/intermediate.md", "original_file_path": "models/marts/intermediate/intermediate.md", "unique_id": "doc.tpch.net_item_sales_amount", "block_contents": "the net total which factors in discount and tax" }, "doc.dbt.__overview__": { "name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion" }, "doc.dbt_artifacts.command_invocation_id": { "name": "command_invocation_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation." }, "doc.dbt_artifacts.node_id": { "name": "node_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.node_id", "block_contents": "Unique node identifier." }, "doc.dbt_artifacts.name": { "name": "name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.name", "block_contents": "Name of the node." }, "doc.dbt_artifacts.schema": { "name": "schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.schema", "block_contents": "Configured schema for the node." }, "doc.dbt_artifacts.package_name": { "name": "package_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.package_name", "block_contents": "Name of the dbt package which contains the node." }, "doc.dbt_artifacts.total_node_runtime": { "name": "total_node_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.total_node_runtime", "block_contents": "Total time spent executing this node (seconds)." }, "doc.dbt_artifacts.compile_started_at": { "name": "compile_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.compile_started_at", "block_contents": "Timestamp when the node started compiling." }, "doc.dbt_artifacts.depends_on_nodes": { "name": "depends_on_nodes", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph." }, "doc.dbt_artifacts.status": { "name": "status", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.status", "block_contents": "Represents the execution status of a node, can be success, failure, or error." }, "doc.dbt_artifacts.query_completed_at": { "name": "query_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.query_completed_at", "block_contents": "Timestamp when the node's SQL query completed." }, "doc.dbt_artifacts.materialization": { "name": "materialization", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.materialization", "block_contents": "The materialization of the model." }, "doc.dbt_artifacts.database": { "name": "database", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.database", "block_contents": "The configured database for the node." }, "doc.dbt_artifacts.rows_affected": { "name": "rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.rows_affected", "block_contents": "Number of rows affected by the model execution." }, "doc.dbt_artifacts.bytes_processed": { "name": "bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.bytes_processed", "block_contents": "Number of bytes processed by the model execution." }, "doc.dbt_artifacts.thread_id": { "name": "thread_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1" }, "doc.dbt_artifacts.path": { "name": "path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.path", "block_contents": "Path to the model on the local filesystem." }, "doc.dbt_artifacts.was_full_refresh": { "name": "was_full_refresh", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not." }, "doc.dbt_artifacts.checksum": { "name": "checksum", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.checksum", "block_contents": "Checksum of the model." }, "doc.dbt_artifacts.seed_execution_id": { "name": "seed_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.seed_execution_id", "block_contents": "Execution ID of the seed node." }, "doc.dbt_artifacts.test_execution_id": { "name": "test_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_execution_id", "block_contents": "Execution ID of the test node." }, "doc.dbt_artifacts.snapshot_execution_id": { "name": "snapshot_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.snapshot_execution_id", "block_contents": "Execution ID of the snapshot node." }, "doc.dbt_artifacts.model_execution_id": { "name": "model_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.model_execution_id", "block_contents": "Execution ID of the model node." }, "doc.dbt_artifacts.loader": { "name": "loader", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loader", "block_contents": "Describes the tool that loads this source into your warehouse." }, "doc.dbt_artifacts.freshness": { "name": "freshness", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.freshness", "block_contents": "The specified freshness of the source model." }, "doc.dbt_artifacts.url": { "name": "url", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed." }, "doc.dbt_artifacts.identifier": { "name": "identifier", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.identifier", "block_contents": "Source identifier." }, "doc.dbt_artifacts.source_name": { "name": "source_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_name", "block_contents": "Source name." }, "doc.dbt_artifacts.test_path": { "name": "test_path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test." }, "doc.dbt_artifacts.tags": { "name": "tags", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.tags", "block_contents": "Tags used in resource selection associated with the node." }, "doc.dbt_artifacts.strategy": { "name": "strategy", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt — timestamp\nand check." }, "doc.dbt_artifacts.failures": { "name": "failures", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful." }, "doc.dbt_artifacts.loaded_at_field": { "name": "loaded_at_field", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness." }, "doc.dbt_artifacts.type": { "name": "type", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)" }, "doc.dbt_artifacts.description": { "name": "description", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.description", "block_contents": "Node description." }, "doc.dbt_artifacts.maturity": { "name": "maturity", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.maturity", "block_contents": "Exposure maturity; one of high, medium, low." }, "doc.dbt_artifacts.owner": { "name": "owner", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.owner", "block_contents": "Owner of the exposure, usually an email address." }, "doc.dbt_artifacts.source_execution_id": { "name": "source_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_execution_id", "block_contents": "Execution ID of the source node." }, "doc.dbt_artifacts.exposure_execution_id": { "name": "exposure_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.exposure_execution_id", "block_contents": "Execution ID of the exposure node." }, "doc.dbt_artifacts.dbt_version": { "name": "dbt_version", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_version", "block_contents": "Installed version of dbt that is currently running." }, "doc.dbt_artifacts.project_name": { "name": "project_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.project_name", "block_contents": "Name for the root-level project which is being run by dbt." }, "doc.dbt_artifacts.run_started_at": { "name": "run_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record." }, "doc.dbt_artifacts.dbt_command": { "name": "dbt_command", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_command", "block_contents": "dbt command of this run." }, "doc.dbt_artifacts.full_refresh_flag": { "name": "full_refresh_flag", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not." }, "doc.dbt_artifacts.target_profile_name": { "name": "target_profile_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_profile_name", "block_contents": "The name of the active profile." }, "doc.dbt_artifacts.target_name": { "name": "target_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_name", "block_contents": "The name of the active target." }, "doc.dbt_artifacts.target_schema": { "name": "target_schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_schema", "block_contents": "The name of the target dbt schema." }, "doc.dbt_artifacts.target_threads": { "name": "target_threads", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_threads", "block_contents": "The number of threads in use by dbt." }, "doc.dbt_artifacts.dbt_cloud_project_id": { "name": "dbt_cloud_project_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run." }, "doc.dbt_artifacts.dbt_cloud_job_id": { "name": "dbt_cloud_job_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run." }, "doc.dbt_artifacts.dbt_cloud_run_id": { "name": "dbt_cloud_run_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_id", "block_contents": "The ID of this particular run." }, "doc.dbt_artifacts.dbt_cloud_run_reason_category": { "name": "dbt_cloud_run_reason_category", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run." }, "doc.dbt_artifacts.dbt_cloud_run_reason": { "name": "dbt_cloud_run_reason", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason", "block_contents": "The specific trigger for this run." }, "doc.dbt_artifacts.env_vars": { "name": "env_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.env_vars", "block_contents": "Key-value pairs of environment variables to be capture." }, "doc.dbt_artifacts.dbt_vars": { "name": "dbt_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_vars", "block_contents": "Key-value pairs of project variables to be capture." }, "doc.dbt_artifacts.last_full_refresh_run_completed_at": { "name": "last_full_refresh_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run." }, "doc.dbt_artifacts.last_full_refresh_run_rows_affected": { "name": "last_full_refresh_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run." }, "doc.dbt_artifacts.last_full_refresh_run_bytes_processed": { "name": "last_full_refresh_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run." }, "doc.dbt_artifacts.last_full_refresh_run_total_runtime": { "name": "last_full_refresh_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)." }, "doc.dbt_artifacts.last_run_completed_at": { "name": "last_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run." }, "doc.dbt_artifacts.last_run_rows_affected": { "name": "last_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run." }, "doc.dbt_artifacts.last_run_bytes_processed": { "name": "last_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run." }, "doc.dbt_artifacts.last_run_total_runtime": { "name": "last_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)." }, "doc.dbt_artifacts.meta": { "name": "meta", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.meta", "block_contents": "The meta field of the config associated with the node." }, "doc.dbt_artifacts.invocation_args": { "name": "invocation_args", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.invocation_args", "block_contents": "Key-value pairs of args passed to invocation." }, "doc.dbt_artifacts.dbt_custom_envs": { "name": "dbt_custom_envs", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_" }, "doc.dbt_artifacts.alias": { "name": "alias", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.alias", "block_contents": "Alias of the node." }, "doc.dbt_artifacts.message": { "name": "message", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.message", "block_contents": "Result report, based on information returned from the database" }, "doc.dbt_artifacts.adapter_response": { "name": "adapter_response", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.adapter_response", "block_contents": "Response provided by the adapter as JSON." }, "doc.dbt_artifacts.all_results": { "name": "all_results", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.all_results", "block_contents": "All results as a JSON blob" } }, "exposures": { "exposure.tpch.sales_by_region": { "name": "sales_by_region", "resource_type": "exposure", "package_name": "tpch", "path": "marts/aggregates/exposures.yml", "original_file_path": "models/marts/aggregates/exposures.yml", "unique_id": "exposure.tpch.sales_by_region", "fqn": [ "tpch", "marts", "aggregates", "sales_by_region" ], "type": "dashboard", "owner": { "email": "doug.guthrie@dbtlabs.com", "name": "Doug Guthrie" }, "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch this one\n README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch that one\n README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch the other one\n", "label": null, "maturity": "high", "meta": {}, "tags": [], "config": { "enabled": true }, "unrendered_config": {}, "url": "https://10az.online.tableau.com/#/site/dbtlabspartner/views/SalesWorkbook/Dashboard1", "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "created_at": 1697212557.508952 } }, "metrics": { "metric.tpch.total_revenue": { "name": "total_revenue", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.total_revenue", "fqn": [ "tpch", "marts", "core", "total_revenue" ], "description": "The total revenue for the business", "label": "Total Revenue", "type": "simple", "type_params": { "measure": { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4899452, "group": null }, "metric.tpch.cumulative_revenue_total": { "name": "cumulative_revenue_total", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.cumulative_revenue_total", "fqn": [ "tpch", "marts", "core", "cumulative_revenue_total" ], "description": "The cumulative revenue for the business", "label": "Cumulative Revenue (All-Time)", "type": "cumulative", "type_params": { "measure": { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4915092, "group": null }, "metric.tpch.cumulative_revenue_ttm": { "name": "cumulative_revenue_ttm", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.cumulative_revenue_ttm", "fqn": [ "tpch", "marts", "core", "cumulative_revenue_ttm" ], "description": "Cumulative revenue for the trailing twelve months", "label": "Cumulative Revenue (TTM)", "type": "cumulative", "type_params": { "measure": { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": { "count": 12, "granularity": "month" }, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4934742, "group": null }, "metric.tpch.total_expense": { "name": "total_expense", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.total_expense", "fqn": [ "tpch", "marts", "core", "total_expense" ], "description": "The total expense for the business", "label": "Total Expenses", "type": "simple", "type_params": { "measure": { "name": "total_expense", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_expense", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.order_items" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4943426, "group": null }, "metric.tpch.total_profit": { "name": "total_profit", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.total_profit", "fqn": [ "tpch", "marts", "core", "total_profit" ], "description": "The total profit for the business", "label": "Total Profit", "type": "derived", "type_params": { "measure": null, "input_measures": [ { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, { "name": "total_expense", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": "revenue - expense", "window": null, "grain_to_date": null, "metrics": [ { "name": "total_revenue", "filter": null, "alias": "revenue", "offset_window": null, "offset_to_grain": null }, { "name": "total_expense", "filter": null, "alias": "expense", "offset_window": null, "offset_to_grain": null } ] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_expense" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4971743, "group": null }, "metric.tpch.total_customers": { "name": "total_customers", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.total_customers", "fqn": [ "tpch", "marts", "core", "total_customers" ], "description": "The total customers for the business", "label": "Total Customers", "type": "simple", "type_params": { "measure": { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4980447, "group": null }, "metric.tpch.weekly_customers": { "name": "weekly_customers", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.weekly_customers", "fqn": [ "tpch", "marts", "core", "weekly_customers" ], "description": "Number of active weekly customers", "label": "Weekly Active Customers", "type": "cumulative", "type_params": { "measure": { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": { "count": 7, "granularity": "day" }, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.4996176, "group": null }, "metric.tpch.monthly_customers": { "name": "monthly_customers", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.monthly_customers", "fqn": [ "tpch", "marts", "core", "monthly_customers" ], "description": "Number of active monthly customers", "label": "Monthly Active Customers", "type": "cumulative", "type_params": { "measure": { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, "input_measures": [ { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": null, "denominator": null, "expr": null, "window": { "count": 1, "granularity": "month" }, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "semantic_model.tpch.orders" ] }, "refs": [], "metrics": [], "created_at": 1697212557.5012362, "group": null }, "metric.tpch.average_revenue_per_customer": { "name": "average_revenue_per_customer", "resource_type": "metric", "package_name": "tpch", "path": "marts/core/_core__metrics.yml", "original_file_path": "models/marts/core/_core__metrics.yml", "unique_id": "metric.tpch.average_revenue_per_customer", "fqn": [ "tpch", "marts", "core", "average_revenue_per_customer" ], "description": "The average revenue per customer", "label": "Average Revenue per Customer", "type": "ratio", "type_params": { "measure": null, "input_measures": [ { "name": "total_revenue", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null }, { "name": "total_customers", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null } ], "numerator": { "name": "total_revenue", "filter": null, "alias": null, "offset_window": null, "offset_to_grain": null }, "denominator": { "name": "total_customers", "filter": null, "alias": null, "offset_window": null, "offset_to_grain": null }, "expr": null, "window": null, "grain_to_date": null, "metrics": [] }, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": { "enabled": true, "group": null }, "unrendered_config": {}, "sources": [], "depends_on": { "macros": [], "nodes": [ "metric.tpch.total_revenue", "metric.tpch.total_customers" ] }, "refs": [], "metrics": [], "created_at": 1697212557.5030122, "group": null } }, "groups": {}, "selectors": {}, "disabled": { "model.tpch.forecast_train_py": [ { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "forecast_train_py", "resource_type": "model", "package_name": "tpch", "path": "ml/forecast_train_py.py", "original_file_path": "models/ml/forecast_train_py.py", "unique_id": "model.tpch.forecast_train_py", "fqn": [ "tpch", "ml", "forecast_train_py" ], "alias": "forecast_train_py", "checksum": { "name": "sha256", "checksum": "ad2555bf17cf4d66fcde0c27186f19f0e2371eae2c14a2788d6abd462c4b760c" }, "config": { "enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [ "pandas", "prophet" ], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "incremental", "use_anonymous_sproc": true, "enabled": false, "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "created_at": 1697212556.5378373, "config_call_dict": { "materialized": "incremental", "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "relation_name": "DOUG_DEMO_V2.ANALYTICS.forecast_train_py", "raw_code": "import pandas as pd\n\nfrom datetime import datetime\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_to_json\n\n\ndef model(dbt, session):\n\n # dbt configuration\n dbt.config(\n materialized='incremental',\n packages=['pandas', 'prophet'],\n snowflake_warehouse='SNOWPARK_WH',\n )\n\n # get upstream data\n revenue = dbt.ref('revenue_weekly_by_ship_mode').to_pandas()\n\n # rename to match Prophet's expected column names\n renames = {\n 'date_week'.upper(): 'ds',\n 'ship_mode'.upper(): 'location',\n 'total_revenue'.upper(): 'y',\n }\n revenue = revenue.rename(columns=renames)\n\n # get list of unique locations dynamically\n locations = sorted(list(revenue['location'].unique()))\n\n # train the ML models per location\n models = [\n Prophet().fit(revenue[revenue['location'] == location])\n for location in locations\n ]\n\n # use current time to 'version' models\n trained_at = datetime.now()\n\n # persist models -- serialize Prophet as JSON via provided method\n df = pd.DataFrame(\n {\n 'trained_at': [trained_at] README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch len(locations),\n 'location': locations,\n 'model': [model_to_json(model) for model in models],\n }\n )\n\n return df", "language": "python", "refs": [ { "name": "revenue_weekly_by_ship_mode", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null } ], "model.tpch.forecast_score_py": [ { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "forecast_score_py", "resource_type": "model", "package_name": "tpch", "path": "ml/forecast_score_py.py", "original_file_path": "models/ml/forecast_score_py.py", "unique_id": "model.tpch.forecast_score_py", "fqn": [ "tpch", "ml", "forecast_score_py" ], "alias": "forecast_score_py", "checksum": { "name": "sha256", "checksum": "1c20c529b9c20f2c7a83d2885b162b9dfce14767deae9e356eb5404e05135e5f" }, "config": { "enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [ "pandas", "prophet" ], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "enabled": false, "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "created_at": 1697212556.543388, "config_call_dict": { "materialized": "table", "packages": [ "pandas", "prophet" ], "snowflake_warehouse": "SNOWPARK_WH" }, "relation_name": "DOUG_DEMO_V2.ANALYTICS.forecast_score_py", "raw_code": "import pandas as pd\n\nfrom prophet import Prophet\nfrom prophet.serialize import model_from_json\n\n\ndef model(dbt, session):\n\n # dbt configuration\n dbt.config(packages=['pandas', 'prophet'], snowflake_warehouse='SNOWPARK_WH')\n\n # get trained ML models\n # TODO: filter by trained_at to last X days or something\n models = dbt.ref('forecast_train_py').to_pandas()\n\n # get most recent trained_at\n most_recent_trained_at = models['trained_at'].max()\n\n # filter models by most recent trained_at\n models = models[models['trained_at'] == most_recent_trained_at]\n\n # get list of unique locations dynamically\n locations = sorted(list(models['location'].unique()))\n\n # hydrate models as Prophet objects\n models = {\n location: model_from_json(\n models[models['location'] == location]['model'].iloc[0]\n )\n for location in locations\n }\n\n # create future dataframe to forecast on\n future = models[locations[0]].make_future_dataframe(periods=52 README.md analyses assets dbt_cloud.yml dbt_project.yml dependencies.yml macros manifests models prod requirements.txt scripts seeds snapshots tests tpch 3, freq='W')\n\n # score model per location\n forecasts = {location: models[location].predict(future) for location in locations}\n\n # dataframe magic (use location to filter forecasts from single table)\n for location, forecast in forecasts.items():\n forecast['location'] = location\n\n # create a single dataframe to return\n df = pd.concat(forecasts.values())\n\n return df", "language": "python", "refs": [ { "name": "forecast_train_py", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null } ], "model.tpch.fct_orders_stats_py": [ { "database": "DOUG_DEMO_V2", "schema": "ANALYTICS", "name": "fct_orders_stats_py", "resource_type": "model", "package_name": "tpch", "path": "marts/core/fct_orders_stats_py.py", "original_file_path": "models/marts/core/fct_orders_stats_py.py", "unique_id": "model.tpch.fct_orders_stats_py", "fqn": [ "tpch", "marts", "core", "fct_orders_stats_py" ], "alias": "fct_orders_stats_py", "checksum": { "name": "sha256", "checksum": "bff9c52d4d54331d1e593255657a6be16cb1099189ac1026ced51ff521a7e640" }, "config": { "enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": { "show": true, "node_color": null }, "contract": { "enforced": false }, "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "post-hook": [], "pre-hook": [] }, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": { "show": true, "node_color": null }, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": { "materialized": "table", "use_anonymous_sproc": true, "snowflake_warehouse": "SNOWPARK_WH", "enabled": false }, "created_at": 1697212556.550237, "config_call_dict": { "materialized": "table", "snowflake_warehouse": "SNOWPARK_WH", "enabled": false }, "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders_stats_py", "raw_code": "def model(dbt, session):\n\n # Access to config block\n dbt.config(\n materialized='table',\n snowflake_warehouse='SNOWPARK_WH',\n enabled=False,\n )\n\n # Get upstream data\n df = dbt.ref('fct_orders')\n\n # Describe the data\n df = df.describe()\n\n return df", "language": "python", "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "sources": [], "metrics": [], "depends_on": { "macros": [], "nodes": [] }, "compiled_path": null, "contract": { "enforced": false, "checksum": null }, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null } ] }, "parent_map": { "model.tpch.stg_stocks__history": [ "source.tpch.stocks.history" ], "model.tpch.stg_stocks__summary_profile": [ "source.tpch.stocks.summary_profile" ], "model.tpch.stg_tpch_nations": [ "source.tpch.tpch.nation" ], "model.tpch.stg_tpch_orders": [ "source.tpch.tpch.orders" ], "model.tpch.stg_tpch_regions": [ "source.tpch.tpch.region" ], "model.tpch.stg_tpch_customers": [ "source.tpch.tpch.customer" ], "model.tpch.stg_tpch_suppliers": [ "source.tpch.tpch.supplier" ], "model.tpch.stg_tpch_parts": [ "source.tpch.tpch.part" ], "model.tpch.stg_tpch_line_items": [ "source.tpch.tpch.lineitem" ], "model.tpch.stg_tpch_part_suppliers": [ "source.tpch.tpch.partsupp" ], "model.tpch.metricflow_time_spine": [], "model.tpch.dim_date": [], "model.tpch.all_days": [], "model.tpch.use_variables": [ "model.tpch.fct_order_items" ], "model.tpch.materialization_incremental": [ "source.tpch.tpch.customer" ], "model.tpch.fct_order_items": [ "model.tpch.order_items", "model.tpch.part_suppliers" ], "model.tpch.dim_suppliers": [ "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions", "model.tpch.stg_tpch_suppliers" ], "model.tpch.fct_orders_stats_sql": [ "model.tpch.fct_orders" ], "model.tpch.dim_customers": [ "model.tpch.stg_tpch_customers", "model.tpch.stg_tpch_nations", "model.tpch.stg_tpch_regions" ], "model.tpch.fct_orders": [ "model.tpch.order_items", "model.tpch.stg_tpch_orders" ], "model.tpch.dim_parts": [ "model.tpch.stg_tpch_parts" ], "model.tpch.agg_segment_page_views": [ "model.upstream.int_segment__pages" ], "model.tpch.agg_ship_modes_dynamic_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.agg_ship_modes_hardcoded_pivot": [ "model.tpch.fct_order_items" ], "model.tpch.order_items": [ "model.tpch.stg_tpch_line_items", "model.tpch.stg_tpch_orders" ], "model.tpch.part_suppliers": [ "model.tpch.stg_tpch_part_suppliers", "model.tpch.stg_tpch_parts", "model.tpch.stg_tpch_suppliers" ], "snapshot.tpch.tpch_customer_snapshot": [ "source.tpch.tpch.customer" ], "snapshot.tpch.tpch_part_snapshot": [ "source.tpch.tpch.part" ], "snapshot.tpch.tpch_supplier_snapshot": [ "source.tpch.tpch.supplier" ], "analysis.tpch.customer_snapshot_query": [ "snapshot.tpch.tpch_customer_snapshot" ], "test.tpch.stg_tpch_orders_assert_positive_price": [ "model.tpch.stg_tpch_orders" ], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [ "model.tpch.stg_tpch_orders" ], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.dbt_artifacts.dim_dbt__exposures": [ "model.dbt_artifacts.stg_dbt__exposures" ], "model.dbt_artifacts.dim_dbt__models": [ "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.dim_dbt__sources": [ "model.dbt_artifacts.stg_dbt__sources" ], "model.dbt_artifacts.dim_dbt__snapshots": [ "model.dbt_artifacts.stg_dbt__snapshots" ], "model.dbt_artifacts.fct_dbt__model_executions": [ "model.dbt_artifacts.stg_dbt__model_executions" ], "model.dbt_artifacts.dim_dbt__current_models": [ "model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.fct_dbt__test_executions": [ "model.dbt_artifacts.stg_dbt__test_executions" ], "model.dbt_artifacts.fct_dbt__seed_executions": [ "model.dbt_artifacts.stg_dbt__seed_executions" ], "model.dbt_artifacts.fct_dbt__invocations": [ "model.dbt_artifacts.stg_dbt__invocations" ], "model.dbt_artifacts.dim_dbt__tests": [ "model.dbt_artifacts.stg_dbt__tests" ], "model.dbt_artifacts.dim_dbt__seeds": [ "model.dbt_artifacts.stg_dbt__seeds" ], "model.dbt_artifacts.fct_dbt__snapshot_executions": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ], "model.dbt_artifacts.stg_dbt__test_executions": [ "model.dbt_artifacts.test_executions" ], "model.dbt_artifacts.stg_dbt__seed_executions": [ "model.dbt_artifacts.seed_executions" ], "model.dbt_artifacts.stg_dbt__models": [ "model.dbt_artifacts.models" ], "model.dbt_artifacts.stg_dbt__model_executions": [ "model.dbt_artifacts.model_executions" ], "model.dbt_artifacts.stg_dbt__seeds": [ "model.dbt_artifacts.seeds" ], "model.dbt_artifacts.stg_dbt__tests": [ "model.dbt_artifacts.tests" ], "model.dbt_artifacts.stg_dbt__snapshot_executions": [ "model.dbt_artifacts.snapshot_executions" ], "model.dbt_artifacts.stg_dbt__snapshots": [ "model.dbt_artifacts.snapshots" ], "model.dbt_artifacts.stg_dbt__sources": [ "model.dbt_artifacts.sources" ], "model.dbt_artifacts.stg_dbt__invocations": [ "model.dbt_artifacts.invocations" ], "model.dbt_artifacts.stg_dbt__exposures": [ "model.dbt_artifacts.exposures" ], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.seeds": [], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [ "model.tpch.stg_tpch_customers" ], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [ "model.tpch.stg_tpch_customers" ], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [ "model.tpch.stg_tpch_line_items" ], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [ "model.tpch.stg_tpch_nations" ], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [ "model.tpch.stg_tpch_nations" ], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [ "model.tpch.stg_tpch_orders" ], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [ "model.tpch.stg_tpch_orders" ], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [ "model.tpch.stg_tpch_part_suppliers" ], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [ "model.tpch.stg_tpch_parts" ], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [ "model.tpch.stg_tpch_parts" ], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [ "model.tpch.stg_tpch_regions" ], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [ "model.tpch.stg_tpch_regions" ], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [ "model.tpch.stg_tpch_suppliers" ], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [ "model.tpch.materialization_incremental" ], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [ "model.tpch.materialization_incremental" ], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [ "model.tpch.use_variables" ], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [ "model.tpch.use_variables" ], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [ "model.tpch.dim_customers" ], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [ "model.tpch.dim_customers" ], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [ "model.tpch.dim_customers" ], "test.tpch.unique_dim_parts_part_key.712df18d58": [ "model.tpch.dim_parts" ], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [ "model.tpch.dim_parts" ], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [ "model.tpch.dim_suppliers" ], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [ "model.tpch.dim_suppliers" ], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [ "model.tpch.fct_order_items" ], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [ "model.tpch.fct_order_items" ], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [ "model.tpch.fct_orders" ], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [ "model.tpch.fct_orders" ], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [ "model.tpch.dim_customers", "model.tpch.fct_orders" ], "test.tpch.unique_order_items_order_item_key.43a40b2837": [ "model.tpch.order_items" ], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [ "model.tpch.order_items" ], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [ "model.tpch.part_suppliers" ], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [ "model.tpch.part_suppliers" ], "test.tpch.source_not_null_stocks_fund_ownership_symbol.99c0478082": [ "source.tpch.stocks.fund_ownership" ], "test.tpch.source_not_null_stocks_fund_ownership_report_date.02f3c41854": [ "source.tpch.stocks.fund_ownership" ], "test.tpch.source_not_null_stocks_history_symbol.b0644274db": [ "source.tpch.stocks.history" ], "test.tpch.source_not_null_stocks_history_date.f4fea1f801": [ "source.tpch.stocks.history" ], "test.tpch.source_not_null_stocks_insider_transactions_symbol.8f0e196176": [ "source.tpch.stocks.insider_transactions" ], "test.tpch.source_not_null_stocks_summary_profile_symbol.fa45866d66": [ "source.tpch.stocks.summary_profile" ], "test.tpch.source_unique_stocks_summary_profile_symbol.2822f29ef3": [ "source.tpch.stocks.summary_profile" ], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [ "source.tpch.tpch.orders" ], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [ "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [ "source.tpch.tpch.customer", "source.tpch.tpch.orders" ], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [ "source.tpch.tpch.customer" ], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [ "source.tpch.tpch.customer" ], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [ "source.tpch.tpch.customer", "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.orders" ], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [ "source.tpch.tpch.lineitem", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [ "source.tpch.tpch.nation" ], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [ "source.tpch.tpch.nation" ], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [ "source.tpch.tpch.nation", "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [ "source.tpch.tpch.part" ], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [ "source.tpch.tpch.part" ], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [ "source.tpch.tpch.part" ], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [ "source.tpch.tpch.part", "source.tpch.tpch.partsupp" ], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [ "source.tpch.tpch.partsupp", "source.tpch.tpch.supplier" ], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [ "source.tpch.tpch.region" ], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [ "source.tpch.tpch.region" ], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [ "source.tpch.tpch.region" ], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [ "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [ "source.tpch.tpch.supplier" ], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [ "source.tpch.tpch.nation", "source.tpch.tpch.supplier" ], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [ "source.tpch.tpch_snapshot.customer_snapshot_src" ], "model.upstream.int_segment__pages": [], "model.upstream.int_segment__tracks": [], "model.upstream.int_segment__link_clicked": [], "source.tpch.stocks.fund_ownership": [], "source.tpch.stocks.grade_history": [], "source.tpch.stocks.history": [], "source.tpch.stocks.insider_transactions": [], "source.tpch.stocks.recommendation_trends": [], "source.tpch.stocks.sec_filings": [], "source.tpch.stocks.summary_profile": [], "source.tpch.tpch.orders": [], "source.tpch.tpch.customer": [], "source.tpch.tpch.lineitem": [], "source.tpch.tpch.nation": [], "source.tpch.tpch.part": [], "source.tpch.tpch.partsupp": [], "source.tpch.tpch.region": [], "source.tpch.tpch.supplier": [], "source.tpch.tpch_snapshot.customer_snapshot_src": [], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "exposure.tpch.sales_by_region": [ "model.tpch.fct_orders" ], "metric.tpch.total_revenue": [ "semantic_model.tpch.orders" ], "metric.tpch.cumulative_revenue_total": [ "semantic_model.tpch.orders" ], "metric.tpch.cumulative_revenue_ttm": [ "semantic_model.tpch.orders" ], "metric.tpch.total_expense": [ "semantic_model.tpch.order_items" ], "metric.tpch.total_profit": [ "metric.tpch.total_expense", "metric.tpch.total_revenue" ], "metric.tpch.total_customers": [ "semantic_model.tpch.orders" ], "metric.tpch.weekly_customers": [ "semantic_model.tpch.orders" ], "metric.tpch.monthly_customers": [ "semantic_model.tpch.orders" ], "metric.tpch.average_revenue_per_customer": [ "metric.tpch.total_customers", "metric.tpch.total_revenue" ], "semantic_model.tpch.orders": [ "model.tpch.fct_orders" ], "semantic_model.tpch.customers": [ "model.tpch.dim_customers" ], "semantic_model.tpch.order_items": [ "model.tpch.fct_order_items" ] }, "child_map": { "model.tpch.stg_stocks__history": [], "model.tpch.stg_stocks__summary_profile": [], "model.tpch.stg_tpch_nations": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed", "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d" ], "model.tpch.stg_tpch_orders": [ "model.tpch.fct_orders", "model.tpch.order_items", "test.tpch.macro_stg_tpch_orders_assert_pos_price", "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8", "test.tpch.stg_tpch_orders_assert_positive_price", "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9" ], "model.tpch.stg_tpch_regions": [ "model.tpch.dim_customers", "model.tpch.dim_suppliers", "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326", "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5" ], "model.tpch.stg_tpch_customers": [ "model.tpch.dim_customers", "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a", "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4" ], "model.tpch.stg_tpch_suppliers": [ "model.tpch.dim_suppliers", "model.tpch.part_suppliers", "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal", "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d", "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464" ], "model.tpch.stg_tpch_parts": [ "model.tpch.dim_parts", "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420", "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489" ], "model.tpch.stg_tpch_line_items": [ "model.tpch.order_items", "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679", "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a" ], "model.tpch.stg_tpch_part_suppliers": [ "model.tpch.part_suppliers", "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e", "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae" ], "model.tpch.metricflow_time_spine": [], "model.tpch.dim_date": [], "model.tpch.all_days": [], "model.tpch.use_variables": [ "test.tpch.not_null_use_variables_order_item_key.c2bd602686", "test.tpch.unique_use_variables_order_item_key.fb5576fe0e" ], "model.tpch.materialization_incremental": [ "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009", "test.tpch.unique_materialization_incremental_customer_key.325783f327" ], "model.tpch.fct_order_items": [ "model.tpch.agg_ship_modes_dynamic_pivot", "model.tpch.agg_ship_modes_hardcoded_pivot", "model.tpch.use_variables", "semantic_model.tpch.order_items", "test.tpch.not_null_fct_order_items_order_item_key.47516a6371", "test.tpch.unique_fct_order_items_order_item_key.4d6426a255" ], "model.tpch.dim_suppliers": [ "test.tpch.not_null_dim_suppliers_supplier_key.4315350956", "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770" ], "model.tpch.fct_orders_stats_sql": [], "model.tpch.dim_customers": [ "semantic_model.tpch.customers", "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69", "test.tpch.not_null_dim_customers_customer_key.4bebfb3411", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_dim_customers_customer_key.ad8156656e" ], "model.tpch.fct_orders": [ "exposure.tpch.sales_by_region", "model.tpch.fct_orders_stats_sql", "semantic_model.tpch.orders", "test.tpch.not_null_fct_orders_order_key.6a6f83ab15", "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b", "test.tpch.unique_fct_orders_order_key.f5e7a90273" ], "model.tpch.dim_parts": [ "test.tpch.not_null_dim_parts_part_key.4358f880d9", "test.tpch.unique_dim_parts_part_key.712df18d58" ], "model.tpch.agg_segment_page_views": [], "model.tpch.agg_ship_modes_dynamic_pivot": [], "model.tpch.agg_ship_modes_hardcoded_pivot": [], "model.tpch.order_items": [ "model.tpch.fct_order_items", "model.tpch.fct_orders", "test.tpch.not_null_order_items_order_item_key.44b9fa7311", "test.tpch.unique_order_items_order_item_key.43a40b2837" ], "model.tpch.part_suppliers": [ "model.tpch.fct_order_items", "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3", "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8" ], "snapshot.tpch.tpch_customer_snapshot": [ "analysis.tpch.customer_snapshot_query" ], "snapshot.tpch.tpch_part_snapshot": [], "snapshot.tpch.tpch_supplier_snapshot": [], "analysis.tpch.customer_snapshot_query": [], "test.tpch.stg_tpch_orders_assert_positive_price": [], "test.tpch.macro_stg_tphc_suppliers_assert_pos_acct_bal": [], "test.tpch.macro_stg_tpch_orders_assert_pos_price": [], "seed.tpch.country_codes": [], "seed.tpch.snowflake_contract_rates": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.stg_dbt__test_executions": [ "model.dbt_artifacts.fct_dbt__test_executions" ], "model.dbt_artifacts.stg_dbt__seed_executions": [ "model.dbt_artifacts.fct_dbt__seed_executions" ], "model.dbt_artifacts.stg_dbt__models": [ "model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models" ], "model.dbt_artifacts.stg_dbt__model_executions": [ "model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions" ], "model.dbt_artifacts.stg_dbt__seeds": [ "model.dbt_artifacts.dim_dbt__seeds" ], "model.dbt_artifacts.stg_dbt__tests": [ "model.dbt_artifacts.dim_dbt__tests" ], "model.dbt_artifacts.stg_dbt__snapshot_executions": [ "model.dbt_artifacts.fct_dbt__snapshot_executions" ], "model.dbt_artifacts.stg_dbt__snapshots": [ "model.dbt_artifacts.dim_dbt__snapshots" ], "model.dbt_artifacts.stg_dbt__sources": [ "model.dbt_artifacts.dim_dbt__sources" ], "model.dbt_artifacts.stg_dbt__invocations": [ "model.dbt_artifacts.fct_dbt__invocations" ], "model.dbt_artifacts.stg_dbt__exposures": [ "model.dbt_artifacts.dim_dbt__exposures" ], "model.dbt_artifacts.sources": [ "model.dbt_artifacts.stg_dbt__sources" ], "model.dbt_artifacts.invocations": [ "model.dbt_artifacts.stg_dbt__invocations" ], "model.dbt_artifacts.test_executions": [ "model.dbt_artifacts.stg_dbt__test_executions" ], "model.dbt_artifacts.tests": [ "model.dbt_artifacts.stg_dbt__tests" ], "model.dbt_artifacts.snapshots": [ "model.dbt_artifacts.stg_dbt__snapshots" ], "model.dbt_artifacts.exposures": [ "model.dbt_artifacts.stg_dbt__exposures" ], "model.dbt_artifacts.model_executions": [ "model.dbt_artifacts.stg_dbt__model_executions" ], "model.dbt_artifacts.snapshot_executions": [ "model.dbt_artifacts.stg_dbt__snapshot_executions" ], "model.dbt_artifacts.models": [ "model.dbt_artifacts.stg_dbt__models" ], "model.dbt_artifacts.seed_executions": [ "model.dbt_artifacts.stg_dbt__seed_executions" ], "model.dbt_artifacts.seeds": [ "model.dbt_artifacts.stg_dbt__seeds" ], "test.tpch.unique_stg_tpch_customers_customer_key.7f1a18b1a4": [], "test.tpch.not_null_stg_tpch_customers_customer_key.a10e15535a": [], "test.tpch.unique_stg_tpch_line_items_order_item_key.c819d91e0a": [], "test.tpch.not_null_stg_tpch_line_items_order_item_key.cd47c7a679": [], "test.tpch.unique_stg_tpch_nations_nation_key.9e3675553d": [], "test.tpch.not_null_stg_tpch_nations_nation_key.d0c2fe32ed": [], "test.tpch.unique_stg_tpch_orders_order_key.bd29f13cc9": [], "test.tpch.not_null_stg_tpch_orders_order_key.bb22e75ae8": [], "test.tpch.unique_stg_tpch_part_suppliers_part_supplier_key.96ab01c1ae": [], "test.tpch.not_null_stg_tpch_part_suppliers_part_supplier_key.3cc6ccee2e": [], "test.tpch.unique_stg_tpch_parts_part_key.afbc7ad489": [], "test.tpch.not_null_stg_tpch_parts_part_key.cc8e610420": [], "test.tpch.unique_stg_tpch_regions_region_key.b2bd891bb5": [], "test.tpch.not_null_stg_tpch_regions_region_key.869fa0b326": [], "test.tpch.unique_stg_tpch_suppliers_supplier_key.6215308464": [], "test.tpch.not_null_stg_tpch_suppliers_supplier_key.97c31a786d": [], "test.tpch.unique_materialization_incremental_customer_key.325783f327": [], "test.tpch.not_null_materialization_incremental_customer_key.e2b95d8009": [], "test.tpch.unique_use_variables_order_item_key.fb5576fe0e": [], "test.tpch.not_null_use_variables_order_item_key.c2bd602686": [], "test.tpch.unique_dim_customers_customer_key.ad8156656e": [], "test.tpch.not_null_dim_customers_customer_key.4bebfb3411": [], "test.tpch.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.dad4601b69": [], "test.tpch.unique_dim_parts_part_key.712df18d58": [], "test.tpch.not_null_dim_parts_part_key.4358f880d9": [], "test.tpch.unique_dim_suppliers_supplier_key.58fc3e4770": [], "test.tpch.not_null_dim_suppliers_supplier_key.4315350956": [], "test.tpch.unique_fct_order_items_order_item_key.4d6426a255": [], "test.tpch.not_null_fct_order_items_order_item_key.47516a6371": [], "test.tpch.unique_fct_orders_order_key.f5e7a90273": [], "test.tpch.not_null_fct_orders_order_key.6a6f83ab15": [], "test.tpch.relationships_fct_orders_customer_key__customer_key__ref_dim_customers_.018eb0a60b": [], "test.tpch.unique_order_items_order_item_key.43a40b2837": [], "test.tpch.not_null_order_items_order_item_key.44b9fa7311": [], "test.tpch.unique_part_suppliers_part_supplier_key.909477afa8": [], "test.tpch.not_null_part_suppliers_part_supplier_key.b8b2022ed3": [], "test.tpch.source_not_null_stocks_fund_ownership_symbol.99c0478082": [], "test.tpch.source_not_null_stocks_fund_ownership_report_date.02f3c41854": [], "test.tpch.source_not_null_stocks_history_symbol.b0644274db": [], "test.tpch.source_not_null_stocks_history_date.f4fea1f801": [], "test.tpch.source_not_null_stocks_insider_transactions_symbol.8f0e196176": [], "test.tpch.source_not_null_stocks_summary_profile_symbol.fa45866d66": [], "test.tpch.source_unique_stocks_summary_profile_symbol.2822f29ef3": [], "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b": [], "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2": [], "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67": [], "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5": [], "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25": [], "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d": [], "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d": [], "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8": [], "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2": [], "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298": [], "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064": [], "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da": [], "test.tpch.source_not_null_tpch_part_p_partkey.9543847190": [], "test.tpch.source_unique_tpch_part_p_partkey.30b171988e": [], "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc": [], "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f": [], "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e": [], "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076": [], "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103": [], "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2": [], "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab": [], "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370": [], "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da": [], "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e": [], "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96": [], "model.upstream.int_segment__pages": [ "model.tpch.agg_segment_page_views" ], "model.upstream.int_segment__tracks": [], "model.upstream.int_segment__link_clicked": [], "source.tpch.stocks.fund_ownership": [ "test.tpch.source_not_null_stocks_fund_ownership_report_date.02f3c41854", "test.tpch.source_not_null_stocks_fund_ownership_symbol.99c0478082" ], "source.tpch.stocks.grade_history": [], "source.tpch.stocks.history": [ "model.tpch.stg_stocks__history", "test.tpch.source_not_null_stocks_history_date.f4fea1f801", "test.tpch.source_not_null_stocks_history_symbol.b0644274db" ], "source.tpch.stocks.insider_transactions": [ "test.tpch.source_not_null_stocks_insider_transactions_symbol.8f0e196176" ], "source.tpch.stocks.recommendation_trends": [], "source.tpch.stocks.sec_filings": [], "source.tpch.stocks.summary_profile": [ "model.tpch.stg_stocks__summary_profile", "test.tpch.source_not_null_stocks_summary_profile_symbol.fa45866d66", "test.tpch.source_unique_stocks_summary_profile_symbol.2822f29ef3" ], "source.tpch.tpch.orders": [ "model.tpch.stg_tpch_orders", "test.tpch.source_not_null_tpch_orders_o_orderkey.ebd571817b", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_orders_o_orderkey.374f048af2" ], "source.tpch.tpch.customer": [ "model.tpch.materialization_incremental", "model.tpch.stg_tpch_customers", "snapshot.tpch.tpch_customer_snapshot", "test.tpch.source_not_null_tpch_customer_c_custkey.a95b6298b5", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.024e40ec67", "test.tpch.source_unique_tpch_customer_c_custkey.048e97fc25" ], "source.tpch.tpch.lineitem": [ "model.tpch.stg_tpch_line_items", "test.tpch.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.f722cb898d", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2" ], "source.tpch.tpch.nation": [ "model.tpch.stg_tpch_nations", "test.tpch.source_not_null_tpch_nation_n_nationkey.5ac5d27298", "test.tpch.source_relationships_tpch_customer_c_nationkey__n_nationkey__source_tpch_nation_.c9281c341d", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_nation_n_nationkey.3bd4153064" ], "source.tpch.tpch.part": [ "model.tpch.stg_tpch_parts", "snapshot.tpch.tpch_part_snapshot", "test.tpch.dbt_utils_source_accepted_range_tpch_part_p_retailprice__2000__0.534c6e22cc", "test.tpch.source_not_null_tpch_part_p_partkey.9543847190", "test.tpch.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b761c77df8", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_unique_tpch_part_p_partkey.30b171988e" ], "source.tpch.tpch.partsupp": [ "model.tpch.stg_tpch_part_suppliers", "test.tpch.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.511196222f", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e" ], "source.tpch.tpch.region": [ "model.tpch.stg_tpch_regions", "test.tpch.source_accepted_values_tpch_region_r_name__AFRICA__AMERICA__ASIA__EUROPE__MIDDLE_EAST.0e96b086b2", "test.tpch.source_not_null_tpch_region_r_regionkey.8f6ee68076", "test.tpch.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.116e1ee3da", "test.tpch.source_unique_tpch_region_r_regionkey.d8eeced103" ], "source.tpch.tpch.supplier": [ "model.tpch.stg_tpch_suppliers", "snapshot.tpch.tpch_supplier_snapshot", "test.tpch.source_not_null_tpch_supplier_s_suppkey.94660e6dab", "test.tpch.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f872fb81a2", "test.tpch.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.1c7ef0743e", "test.tpch.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2a47ee53da", "test.tpch.source_unique_tpch_supplier_s_suppkey.1a36cf4370" ], "source.tpch.tpch_snapshot.customer_snapshot_src": [ "test.tpch.source_not_null_tpch_snapshot_customer_snapshot_src_c_custkey.e3f0c54a96", "test.tpch.source_unique_tpch_snapshot_customer_snapshot_src_c_custkey.463ab9515e" ], "source.tpch.deutsche_boerse.trading_data": [], "source.tpch.test_eqrx_s3.dummy_data": [], "exposure.tpch.sales_by_region": [], "metric.tpch.total_revenue": [ "metric.tpch.average_revenue_per_customer", "metric.tpch.total_profit" ], "metric.tpch.cumulative_revenue_total": [], "metric.tpch.cumulative_revenue_ttm": [], "metric.tpch.total_expense": [ "metric.tpch.total_profit" ], "metric.tpch.total_profit": [], "metric.tpch.total_customers": [ "metric.tpch.average_revenue_per_customer" ], "metric.tpch.weekly_customers": [], "metric.tpch.monthly_customers": [], "metric.tpch.average_revenue_per_customer": [], "semantic_model.tpch.orders": [ "metric.tpch.cumulative_revenue_total", "metric.tpch.cumulative_revenue_ttm", "metric.tpch.monthly_customers", "metric.tpch.total_customers", "metric.tpch.total_revenue", "metric.tpch.weekly_customers" ], "semantic_model.tpch.customers": [], "semantic_model.tpch.order_items": [ "metric.tpch.total_expense" ] }, "group_map": {}, "semantic_models": { "semantic_model.tpch.orders": { "name": "orders", "resource_type": "semantic_model", "package_name": "tpch", "path": "marts/core/_core__semantic_models.yml", "original_file_path": "models/marts/core/_core__semantic_models.yml", "unique_id": "semantic_model.tpch.orders", "fqn": [ "tpch", "marts", "core", "orders" ], "model": "ref('fct_orders')", "node_relation": { "alias": "fct_orders", "schema_name": "ANALYTICS", "database": "DOUG_DEMO_V2", "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_orders" }, "description": "Order fact table at the order level. This table contains one row\nper order and includes the order key\n", "label": null, "defaults": { "agg_time_dimension": "order_date" }, "entities": [ { "name": "customer_order", "type": "primary", "description": null, "label": null, "role": null, "expr": "order_key" }, { "name": "customer", "type": "foreign", "description": null, "label": null, "role": null, "expr": "customer_key" } ], "measures": [ { "name": "total_revenue", "agg": "sum", "description": null, "label": null, "create_metric": false, "expr": "gross_item_sales_amount", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null }, { "name": "total_customers", "agg": "count_distinct", "description": null, "label": null, "create_metric": false, "expr": "customer_key", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null } ], "dimensions": [ { "name": "order_date", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": { "time_granularity": "day", "validity_params": null }, "expr": null, "metadata": null }, { "name": "order_status_code", "type": "categorical", "description": "Indicates the status of the order", "label": null, "is_partition": false, "type_params": null, "expr": "status_code", "metadata": null }, { "name": "order_priority_code", "type": "categorical", "description": "Indicates the priority of the order", "label": null, "is_partition": false, "type_params": null, "expr": "priority_code", "metadata": null }, { "name": "clerk_on_order", "type": "categorical", "description": "The clerk on the order", "label": null, "is_partition": false, "type_params": null, "expr": "clerk_name", "metadata": null } ], "metadata": null, "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_orders" ] }, "refs": [ { "name": "fct_orders", "package": null, "version": null } ], "created_at": 1697212557.404939, "config": { "enabled": true }, "primary_entity": null }, "semantic_model.tpch.customers": { "name": "customers", "resource_type": "semantic_model", "package_name": "tpch", "path": "marts/core/_core__semantic_models.yml", "original_file_path": "models/marts/core/_core__semantic_models.yml", "unique_id": "semantic_model.tpch.customers", "fqn": [ "tpch", "marts", "core", "customers" ], "model": "ref('dim_customers')", "node_relation": { "alias": "dim_customers", "schema_name": "ANALYTICS", "database": "DOUG_DEMO_V2", "relation_name": "DOUG_DEMO_V2.ANALYTICS.dim_customers" }, "description": "Customer dim table at the individual customer level. This table contains one row\nper customer and includes the customer key\n", "label": null, "defaults": null, "entities": [ { "name": "customer", "type": "primary", "description": null, "label": null, "role": null, "expr": "customer_key" } ], "measures": [], "dimensions": [ { "name": "customer_market_segment", "type": "categorical", "description": "The market segment the customer belongs to", "label": null, "is_partition": false, "type_params": null, "expr": "market_segment", "metadata": null }, { "name": "customer_balance_segment", "type": "categorical", "description": "Bucketing customers by their account balance", "label": null, "is_partition": false, "type_params": null, "expr": "case\n when account_balance < 0 then 'Bad Debt'\n when account_balance < 2500 then 'Low'\n when account_balance < 7500 then 'Medium'\n else 'High'\nend", "metadata": null }, { "name": "nation", "type": "categorical", "description": "The nation the customer belongs to", "label": null, "is_partition": false, "type_params": null, "expr": "nation", "metadata": null }, { "name": "region", "type": "categorical", "description": "The region the customer belongs to", "label": null, "is_partition": false, "type_params": null, "expr": "region", "metadata": null } ], "metadata": null, "depends_on": { "macros": [], "nodes": [ "model.tpch.dim_customers" ] }, "refs": [ { "name": "dim_customers", "package": null, "version": null } ], "created_at": 1697212557.4082985, "config": { "enabled": true }, "primary_entity": null }, "semantic_model.tpch.order_items": { "name": "order_items", "resource_type": "semantic_model", "package_name": "tpch", "path": "marts/core/_core__semantic_models.yml", "original_file_path": "models/marts/core/_core__semantic_models.yml", "unique_id": "semantic_model.tpch.order_items", "fqn": [ "tpch", "marts", "core", "order_items" ], "model": "ref('fct_order_items')", "node_relation": { "alias": "fct_order_items", "schema_name": "ANALYTICS", "database": "DOUG_DEMO_V2", "relation_name": "DOUG_DEMO_V2.ANALYTICS.fct_order_items" }, "description": "Line items for an order. An order_key can be represented multiple times\nin this table\n", "label": null, "defaults": { "agg_time_dimension": "order_date" }, "entities": [ { "name": "order_item", "type": "primary", "description": null, "label": null, "role": null, "expr": "order_item_key" }, { "name": "supplier", "type": "foreign", "description": null, "label": null, "role": null, "expr": "supplier_key" }, { "name": "customer", "type": "foreign", "description": null, "label": null, "role": null, "expr": "customer_key" }, { "name": "customer_order", "type": "foreign", "description": null, "label": null, "role": null, "expr": "order_key" } ], "measures": [ { "name": "total_expense", "agg": "sum", "description": null, "label": null, "create_metric": false, "expr": "supplier_cost", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null } ], "dimensions": [ { "name": "order_date", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": { "time_granularity": "day", "validity_params": null }, "expr": null, "metadata": null } ], "metadata": null, "depends_on": { "macros": [], "nodes": [ "model.tpch.fct_order_items" ] }, "refs": [ { "name": "fct_order_items", "package": null, "version": null } ], "created_at": 1697212557.411739, "config": { "enabled": true }, "primary_entity": null } } }
